import { setPixelAlphaFn, setPixelFn } from "../types";
/**
 * plot any quadratic rational Bezier curve
 * @param  {number} x0
 * @param  {number} y0
 * @param  {number} x1
 * @param  {number} y1
 * @param  {number} x2
 * @param  {number} y2
 * @param  {number} w
 * @param  {setPixel} setPixel
 */
export declare function quadRationalBezier(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, w: number, setPixel: setPixelFn): void;
/**
 * plot a limited rational Bezier segment, squared weight
 * @param  {number} x0
 * @param  {number} y0
 * @param  {number} x1
 * @param  {number} y1
 * @param  {number} x2
 * @param  {number} y2
 * @param  {number} w
 * @param  {setPixel} setPixel
 */
export declare function quadRationalBezierSegment(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, w: number, setPixel: setPixelFn): void;
/**
 * draw an anti-aliased rational quadratic Bezier segment, squared weight
 * @param  {number} x0
 * @param  {number} y0
 * @param  {number} x1
 * @param  {number} y1
 * @param  {number} x2
 * @param  {number} y2
 * @param  {number} w
 * @param  {setPixelAlpha} setPixelAA
 */
export declare function quadRationalBezierSegmentAA(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, w: number, setPixelAA: setPixelAlphaFn): void;
