import { setPixelAlphaFn, setPixelFn } from "../types";
/**
 * Plot any quadratic Bezier curve
 * @param  {number} x0
 * @param  {number} y0
 * @param  {number} x1
 * @param  {number} y1
 * @param  {number} x2
 * @param  {number} y2
 * @param  {setPixel} setPixel
 */
export declare function quadBezier(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, setPixel: setPixelFn): void;
/**
 * plot a limited quadratic Bezier segment
 * @param  {number} x0
 * @param  {number} y0
 * @param  {number} x1
 * @param  {number} y1
 * @param  {number} x2
 * @param  {number} y2
 * @param  {setPixel} setPixel
 */
export declare function quadBezierSegment(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, setPixel: setPixelFn): void;
/**
 * Plot any quadratic Bezier curve with anti-alias
 * @param  {number} x0
 * @param  {number} y0
 * @param  {number} x1
 * @param  {number} y1
 * @param  {number} x2
 * @param  {number} y2
 * @param  {setPixelAlpha} setPixelAA
 */
export declare function quadBezierAA(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, setPixelAA: setPixelAlphaFn): void;
/**
 * Draw an limited anti-aliased quadratic Bezier segment
 * @param  {number} x0
 * @param  {number} y0
 * @param  {number} x1
 * @param  {number} y1
 * @param  {number} x2
 * @param  {number} y2
 * @param  {setPixelAlpha} setPixelAA
 */
export declare function quadBezierSegmentAA(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, setPixelAA: setPixelAlphaFn): void;
