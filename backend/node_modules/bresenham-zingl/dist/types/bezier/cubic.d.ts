import { setPixelAlphaFn, setPixelFn } from "../types";
/**
 * Plot limited cubic Bezier segment
 * @param  {number} x0
 * @param  {number} y0
 * @param  {number} x1
 * @param  {number} y1
 * @param  {number} x2
 * @param  {number} y2
 * @param  {number} x3
 * @param  {number} y3
 * @param  {setPixel} setPixel
 */
export declare function cubicBezierSegment(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, setPixel: setPixelFn): void;
/**
 * Plot limited anti-aliased cubic Bezier segment
 * @param  {Number} x0
 * @param  {Number} y0
 * @param  {Number} x1
 * @param  {Number} y1
 * @param  {Number} x2
 * @param  {Number} y2
 * @param  {Number} x3
 * @param  {Number} y3
 * @param  {setPixelAA} setPixelAA
 */
export declare function cubicBezierSegmentAA(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, setPixelAA: setPixelAlphaFn): void;
/**
 * plot any cubic Bezier curve
 * @param  {number} x0
 * @param  {number} y0
 * @param  {number} x1
 * @param  {number} y1
 * @param  {number} x2
 * @param  {number} y2
 * @param  {number} x3
 * @param  {number} y3
 * @param  {setPixel} setPixel
 */
export declare function cubicBezier(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, setPixel: any): void;
/**
 * plot any cubic Bezier curve
 * @param  {number} x0
 * @param  {number} y0
 * @param  {number} x1
 * @param  {number} y1
 * @param  {number} x2
 * @param  {number} y2
 * @param  {number} x3
 * @param  {number} y3
 * @param  {setPixelAlpha} setPixelAA
 */
export declare function cubicBezierAA(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, setPixelAA: setPixelAlphaFn): void;
