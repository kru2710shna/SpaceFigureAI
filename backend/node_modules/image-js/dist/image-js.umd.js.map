{"version":3,"file":"image-js.umd.js","sources":["../node_modules/is-any-array/lib-esm/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-matrix/matrix.js","../node_modules/ml-matrix/matrix.mjs","../node_modules/ml-affine-transform/lib-esm/getCentroid.js","../node_modules/ml-affine-transform/lib-esm/getAffineTransform.js","../node_modules/median-quickselect/lib/median-quickselect.min.js","../node_modules/ml-array-median/lib-es6/index.js","../node_modules/ml-xsadd/lib-es6/xsadd.js","../node_modules/ml-random/lib-es6/choice.js","../node_modules/ml-random/lib-es6/index.js","../node_modules/ml-ransac/lib-esm/utils/getNbIterations.js","../node_modules/ml-ransac/lib-esm/index.js","../lib/featureMatching/keypoints/utils/getDistanceMatrix.js","../lib/featureMatching/keypoints/utils/getKeypointsInRadius.js","../lib/featureMatching/keypoints/getBestKeypointsInRadius.js","../lib/utils/geometry/points.js","../lib/maskAnalysis/utils/getAngle.js","../lib/utils/geometry/angles.js","../lib/utils/getRadius.js","../lib/featureMatching/utils/checkBorderDistance.js","../node_modules/ts-pattern/dist/index.js","../node_modules/bresenham-zingl/dist/index.umd.js","../lib/draw/utils/deleteDuplicates.js","../lib/utils/geometry/getCirclePoints.js","../lib/utils/getIndex.js","../lib/utils/surroundingPixels.js","../lib/utils/validators/checkProcessable.js","../lib/featureMatching/keypoints/getFastScore.js","../lib/utils/constants/kernels.js","../lib/featureMatching/keypoints/getHarrisScore.js","../lib/featureMatching/keypoints/isFastKeypoint.js","../lib/featureMatching/keypoints/getFastKeypoints.js","../lib/featureMatching/keypoints/getPatchIntensityMoment.js","../lib/featureMatching/keypoints/getPatchIntensityCentroid.js","../lib/featureMatching/keypoints/getOrientedFastKeypoints.js","../lib/featureMatching/utils/compareIntensity.js","../node_modules/ml-spectra-processing/lib/x/xMedian.js","../node_modules/ml-spectra-processing/lib/x/xCheck.js","../node_modules/ml-spectra-processing/lib/x/xFindClosestIndex.js","../node_modules/ml-spectra-processing/lib/x/xGetFromToIndex.js","../node_modules/ml-spectra-processing/lib/x/xMean.js","../node_modules/ml-spectra-processing/lib/x/xVariance.js","../node_modules/fft.js/lib/fft.js","../node_modules/ml-spectra-processing/node_modules/ml-xsadd/lib-esm/XSadd.js","../node_modules/ml-spectra-processing/lib/utils/createRandomArray.js","../node_modules/ml-spectra-processing/lib/xy/xyCovariance.js","../lib/utils/validators/assert.js","../lib/utils/clamp.js","../lib/featureMatching/utils/getGaussianPoints.js","../lib/featureMatching/utils/extractSquareImage.js","../lib/featureMatching/descriptors/utils/getKeypointPatch.js","../lib/featureMatching/descriptors/getBriefDescriptors.js","../lib/featureMatching/descriptors/getBrief.js","../lib/featureMatching/keypoints/getIntensityMoment.js","../lib/featureMatching/keypoints/getIntensityCentroid.js","../lib/featureMatching/matching/getHammingDistance.js","../lib/featureMatching/matching/bruteForceMatch.js","../lib/featureMatching/utils/sortBySourceDest.js","../lib/featureMatching/matching/getCrosscheckMatches.js","../lib/utils/validators/validators.js","../lib/compare/divide.js","../lib/compare/computeRmse.js","../lib/compare/computePsnr.js","../lib/utils/getDefaultColor.js","../lib/utils/setBlendedPixel.js","../lib/utils/setBlendedVisiblePixel.js","../lib/draw/utils/roundPoint.js","../lib/draw/drawCircleOnImage.js","../lib/draw/drawLineOnImage.js","../lib/draw/drawLineOnMask.js","../lib/draw/drawPolylineOnImage.js","../lib/draw/drawPolylineOnMask.js","../node_modules/two-product/two-product.js","../node_modules/robust-sum/robust-sum.js","../node_modules/two-sum/two-sum.js","../node_modules/robust-scale/robust-scale.js","../node_modules/robust-subtract/robust-diff.js","../node_modules/robust-orientation/orientation.js","../node_modules/robust-point-in-polygon/robust-pnp.js","../lib/utils/arrayPointsToObjects.js","../lib/draw/drawPolygonOnImage.js","../lib/draw/drawPolygonOnMask.js","../lib/draw/drawRectangle.js","../lib/draw/drawPoints.js","../lib/draw/drawMarker.js","../lib/draw/drawMarkers.js","../lib/filters/and.js","../node_modules/ml-convolution/src/utils.js","../node_modules/ml-convolution/src/directConvolution.js","../node_modules/ml-convolution/src/index.js","../lib/utils/interpolateBorder.js","../lib/operations/extendBorders.js","../lib/utils/round.js","../lib/filters/convolution.js","../lib/filters/blur.js","../lib/filters/derivativeFilter.js","../lib/utils/constants/colorModels.js","../lib/filters/increaseContrast.js","../lib/filters/gaussianBlur.js","../lib/filters/gradientFilter.js","../lib/filters/hypotenuse.js","../lib/operations/convertColor.js","../lib/operations/convertBitDepth.js","../lib/utils/validators/checkPointIsInteger.js","../lib/operations/extract.js","../lib/operations/merge.js","../lib/operations/split.js","../lib/operations/thresholds/huang.js","../lib/operations/thresholds/intermodes.js","../lib/operations/thresholds/isodata.js","../lib/operations/thresholds/li.js","../lib/operations/thresholds/maxEntropy.js","../lib/operations/thresholds/mean.js","../lib/operations/thresholds/minError.js","../lib/operations/thresholds/minimum.js","../lib/operations/thresholds/moments.js","../lib/operations/thresholds/otsu.js","../lib/operations/thresholds/percentile.js","../lib/operations/thresholds/renyiEntropy.js","../lib/operations/thresholds/shanbhag.js","../lib/operations/thresholds/triangle.js","../lib/operations/thresholds/yen.js","../lib/operations/threshold.js","../lib/operations/greyAlgorithms.js","../lib/operations/grey.js","../lib/operations/copyTo.js","../lib/operations/crop.js","../lib/operations/cropAlpha.js","../lib/utils/interpolatePixel.js","../lib/geometry/transform.js","../lib/geometry/resize.js","../lib/geometry/rotate.js","../lib/geometry/transformRotate.js","../lib/geometry/getPerspectiveWarp.js","../lib/point/operations.js","../lib/operations/cropRectangle.js","../lib/operations/paintMaskOnImage.js","../lib/operations/paintMaskOnMask.js","../node_modules/ml-regression-base/lib-esm/maybeToPrecision.js","../node_modules/ml-regression-polynomial-2d/lib-esm/checkArrayLength.js","../node_modules/ml-regression-polynomial-2d/lib-esm/BaseRegression2D.js","../node_modules/ml-regression-polynomial-2d/lib-esm/PolynomialRegression2D.js","../lib/operations/correctBackground.js","../lib/filters/invert.js","../lib/filters/level.js","../lib/filters/or.js","../lib/filters/flipX.js","../lib/filters/flipY.js","../lib/filters/flip.js","../lib/filters/medianFilter.js","../lib/filters/pixelate.js","../lib/maskAnalysis/getBorderPoints.js","../lib/utils/geometry/lines.js","../lib/utils/geometry/polygons.js","../lib/maskAnalysis/utils/getExtendedBorderPoints.js","../lib/maskAnalysis/utils/monotoneChainConvexHull.js","../lib/maskAnalysis/getConvexHull.js","../lib/maskAnalysis/getFeret.js","../lib/maskAnalysis/utils/getMbrAngle.js","../lib/maskAnalysis/utils/getMbrFromPoints.js","../lib/maskAnalysis/getMbr.js","../lib/utils/validators/checkKernel.js","../lib/morphology/erode.js","../lib/morphology/dilate.js","../lib/morphology/open.js","../lib/morphology/close.js","../lib/morphology/topHat.js","../lib/morphology/bottomHat.js","../lib/morphology/morphologicalGradient.js","../lib/utils/borderIterator.js","../lib/morphology/multipleFloodFill.js","../lib/morphology/clearBorder.js","../lib/morphology/cannyEdgeDetector.js","../lib/morphology/floodFill.js","../lib/morphology/solidFill.js","../lib/utils/boolToNumber.js","../lib/Mask.js","../lib/compare/subtract.js","../lib/compare/add.js","../lib/compare/multiply.js","../lib/compute/mean.js","../lib/compute/histogram.js","../lib/compute/median.js","../lib/compute/getExtrema.js","../lib/compute/variance.js","../node_modules/ml-regression-multivariate-linear/src/index.js","../node_modules/colord/index.mjs","../node_modules/colord/plugins/lab.mjs","../lib/correctColor/utils/formatData.js","../lib/correctColor/correctColor.js","../lib/utils/getMinMax.js","../lib/Image.js","../lib/utils/copyData.js","../lib/utils/getOutputImage.js","../lib/featureMatching/utils/getColors.js","../lib/featureMatching/utils/getKeypointColor.js","../lib/featureMatching/visualize/drawKeypoints.js","../lib/featureMatching/utils/getMatchColor.js","../lib/featureMatching/utils/sortByDistance.js","../lib/featureMatching/visualize/scaleKeypoints.js","../lib/featureMatching/visualize/drawMatches.js","../lib/featureMatching/visualize/Montage.js","../lib/featureMatching/visualize/overlapImages.js","../lib/featureMatching/matching/filterEuclideanDistance.js","../node_modules/iobuffer/lib/text.js","../node_modules/iobuffer/lib/iobuffer.js","../node_modules/fast-bmp/lib/bmp_decoder.js","../node_modules/fast-bmp/lib/constants.js","../node_modules/fast-bmp/lib/bmp_encoder.js","../node_modules/fast-bmp/lib/index.js","../lib/save/encodeBmp.js","../node_modules/jpeg-js/lib/encoder.js","../node_modules/jpeg-js/lib/decoder.js","../node_modules/jpeg-js/index.js","../lib/save/encodeJpeg.js","../node_modules/pako/dist/pako.esm.mjs","../node_modules/fast-png/lib/helpers/crc.js","../node_modules/fast-png/lib/helpers/unfilter.js","../node_modules/fast-png/lib/helpers/apply_unfilter.js","../node_modules/fast-png/lib/helpers/decode_interlace_adam7.js","../node_modules/fast-png/lib/helpers/decode_interlace_null.js","../node_modules/fast-png/lib/helpers/signature.js","../node_modules/fast-png/lib/helpers/text.js","../node_modules/fast-png/lib/internal_types.js","../node_modules/fast-png/lib/png_decoder.js","../node_modules/fast-png/lib/png_encoder.js","../node_modules/fast-png/lib/index.js","../lib/save/encodePng.js","../lib/save/encode.js","../lib/utils/cross_platform.js","../lib/save/write.js","../lib/save/writeCanvas.js","../node_modules/uint8-base64/lib-esm/decode.js","../node_modules/uint8-base64/lib-esm/base64codes.js","../node_modules/uint8-base64/lib-esm/encodeFast.js","../lib/save/encodeDataURL.js","../lib/align/affineTransfrom/getMatrixFromPoints.js","../lib/align/affineTransfrom/affineFitFunction.js","../lib/align/affineTransfrom/createAffineTransformModel.js","../lib/align/affineTransfrom/getEuclideanDistance.js","../lib/align/affineTransfrom/utils/getSourceWithoutMargins.js","../lib/align/affineTransfrom/getAffineTransform.js","../lib/align/alignMinDifference.js","../lib/utils/geometry/removeClosePoints.js","../node_modules/file-type/index.js","../node_modules/image-type/index.js","../lib/load/decodeBmp.js","../node_modules/tiff/lib/tags/exif.js","../node_modules/tiff/lib/tags/gps.js","../node_modules/tiff/lib/tags/standard.js","../node_modules/tiff/lib/hacks.js","../node_modules/tiff/lib/horizontal_differencing.js","../node_modules/tiff/lib/ifd.js","../node_modules/tiff/lib/ifd_value.js","../node_modules/tiff/lib/lzw.js","../node_modules/tiff/lib/tiff_ifd.js","../node_modules/tiff/lib/zlib.js","../node_modules/tiff/lib/tiff_decoder.js","../node_modules/tiff/lib/index.js","../node_modules/fast-jpeg/lib/decode.js","../lib/load/getMetadata.js","../lib/load/decodeJpeg.js","../lib/load/decodePng.js","../lib/load/decodeTiff.js","../lib/load/decode.js","../lib/load/read.js","../lib/load/readCanvas.js","../lib/load/readImg.js","../lib/load/fetchURL.js","../lib/roi/utils/hsvToRgb.js","../lib/roi/utils/rgbToNumber.js","../lib/roi/utils/colorMaps/getBinaryMap.js","../lib/roi/utils/colorMaps/getRainbowMap.js","../lib/roi/utils/colorMaps/getSaturationMap.js","../lib/roi/utils/getColorMap.js","../lib/roi/colorRois.js","../lib/roi/getBorderPoints.js","../lib/roi/getMask.js","../lib/roi/properties/getEllipse.js","../lib/roi/Roi.js","../lib/roi/computeRois.js","../lib/roi/getRois.js","../lib/roi/RoiMapManager.js","../lib/roi/fromMask.js","../node_modules/js-priority-queue/priority-queue.js","../lib/roi/waterShed.js","../lib/stack/utils/checkProcessable.js","../lib/stack/compute/histogram.js","../lib/stack/compute/maxImage.js","../lib/stack/compute/meanImage.js","../lib/stack/compute/medianImage.js","../lib/stack/load/decodeApng.js","../lib/stack/load/decodeTiff.js","../lib/stack/load/decodeStack.js","../lib/stack/compute/minImage.js","../lib/stack/compute/sum.js","../lib/stack/utils/checkImagesValid.js","../lib/Stack.js","../lib/utils/constants/channelLabels.js"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/unbound-method\nconst toString = Object.prototype.toString;\n/**\n * Checks if an object is an instance of an Array (array or typed array, except those that contain bigint values).\n *\n * @param value - Object to check.\n * @returns True if the object is an array or a typed array.\n */\nexport function isAnyArray(value) {\n    const tag = toString.call(value);\n    return tag.endsWith('Array]') && !tag.includes('Big');\n}\n//# sourceMappingURL=index.js.map","import { isAnyArray } from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport { max as default };\n","import { isAnyArray } from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport { min as default };\n","import { isAnyArray } from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isAnyArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport { rescale as default };\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar isAnyArray = require('is-any-array');\nvar rescale = require('ml-array-rescale');\n\nconst indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\n/**\n * @this {Matrix}\n * @returns {string}\n */\nfunction inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nfunction inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8,\n    padMinus = 'auto',\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  if (padMinus === 'auto') {\n    padMinus = false;\n    loop: for (let i = 0; i < maxI; i++) {\n      for (let j = 0; j < maxJ; j++) {\n        if (matrix.get(i, j) < 0) {\n          padMinus = true;\n          break loop;\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize, padMinus) {\n  return (\n    num >= 0 && padMinus\n      ? ` ${formatNumber2(num, maxNumSize - 1)}`\n      : formatNumber2(num, maxNumSize)\n  ).padEnd(maxNumSize);\n}\n\nfunction formatNumber2(num, len) {\n  // small.length numbers should be as is\n  let str = num.toString();\n  if (str.length <= len) return str;\n\n  // (7)'0.00123' is better then (7)'1.23e-2'\n  // (8)'0.000123' is worse then (7)'1.23e-3',\n  let fix = num.toFixed(len);\n  if (fix.length > len) {\n    fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n  }\n  if (\n    fix.length <= len &&\n    !fix.startsWith('0.000') &&\n    !fix.startsWith('-0.000')\n  ) {\n    return fix;\n  }\n\n  // well, if it's still too long the user should've used longer numbers\n  let exp = num.toExponential(len);\n  if (exp.length > len) {\n    exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n  }\n  return exp.slice(0);\n}\n\nfunction installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ** value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ** matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n}\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nfunction checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nfunction checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nfunction checkRowIndices(matrix, rowIndices) {\n  if (!isAnyArray.isAnyArray(rowIndices)) {\n    throw new TypeError('row indices must be an array');\n  }\n\n  for (let i = 0; i < rowIndices.length; i++) {\n    if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {\n      throw new RangeError('row indices are out of range');\n    }\n  }\n}\n\nfunction checkColumnIndices(matrix, columnIndices) {\n  if (!isAnyArray.isAnyArray(columnIndices)) {\n    throw new TypeError('column indices must be an array');\n  }\n\n  for (let i = 0; i < columnIndices.length; i++) {\n    if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {\n      throw new RangeError('column indices are out of range');\n    }\n  }\n}\n\nfunction checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nfunction newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nfunction checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n\nfunction sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nfunction productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nfunction varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nfunction varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nfunction varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nfunction centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nfunction centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nfunction centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nfunction getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += matrix.get(i, j) ** 2 / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nfunction getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += matrix.get(i, j) ** 2 / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nfunction scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nfunction getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += matrix.get(i, j) ** 2 / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nfunction scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n\nclass AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isDistance() {\n    if (!this.isSymmetric()) return false;\n\n    for (let i = 0; i < this.rows; i++) {\n      if (this.get(i, i) !== 0) return false;\n    }\n\n    return true;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    switch (type) {\n      case 'max':\n        return this.max();\n      case 'frobenius':\n        return Math.sqrt(this.dot(this));\n      default:\n        throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  mpow(scalar) {\n    if (!this.isSquare()) {\n      throw new RangeError('Matrix must be square');\n    }\n    if (!Number.isInteger(scalar) || scalar < 0) {\n      throw new RangeError('Exponent must be a non-negative integer');\n    }\n    // Russian Peasant exponentiation, i.e. exponentiation by squaring\n    let result = Matrix.eye(this.rows);\n    let bb = this;\n    // Note: Don't bit shift. In JS, that would truncate at 32 bits\n    for (let e = scalar; e >= 1; e /= 2) {\n      if ((e & 1) !== 0) {\n        result = result.mmul(bb);\n      }\n      bb = bb.mmul(bb);\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let result = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      result = result.setSubMatrix(c11, 0, 0);\n      result = result.setSubMatrix(c12, c11.rows, 0);\n      result = result.setSubMatrix(c21, 0, c11.columns);\n      result = result.setSubMatrix(c22, c11.rows, c11.columns);\n      return result.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min,\n          max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    return this.constructor.copy(this, new Matrix(this.rows, this.columns));\n  }\n\n  /**\n   * @template {AbstractMatrix} M\n   * @param {AbstractMatrix} from\n   * @param {M} to\n   * @return {M}\n   */\n  static copy(from, to) {\n    for (const [row, column, value] of from.entries()) {\n      to.set(row, column, value);\n    }\n\n    return to;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray.isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray.isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield [row, column, value]\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *entries() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield [row, col, this.get(row, col)];\n      }\n    }\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield value\n   * @returns {Generator<number, void, void>}\n   */\n  *values() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield this.get(row, col);\n      }\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nclass Matrix extends AbstractMatrix {\n  /**\n   * @type {Float64Array[]}\n   */\n  data;\n\n  /**\n   * Init an empty matrix\n   * @param {number} nRows\n   * @param {number} nColumns\n   */\n  #initData(nRows, nColumns) {\n    this.data = [];\n\n    if (Number.isInteger(nColumns) && nColumns >= 0) {\n      for (let i = 0; i < nRows; i++) {\n        this.data.push(new Float64Array(nColumns));\n      }\n    } else {\n      throw new TypeError('nColumns must be a positive integer');\n    }\n\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      this.#initData(nRows.rows, nRows.columns);\n      Matrix.copy(nRows, this);\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      this.#initData(nRows, nColumns);\n    } else if (isAnyArray.isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n\n      this.rows = nRows;\n      this.columns = nColumns;\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n\n/**\n * @typedef {0 | 1 | number | boolean} Mask\n */\n\nclass SymmetricMatrix extends AbstractMatrix {\n  /** @type {Matrix} */\n  #matrix;\n\n  get size() {\n    return this.#matrix.size;\n  }\n\n  get rows() {\n    return this.#matrix.rows;\n  }\n\n  get columns() {\n    return this.#matrix.columns;\n  }\n\n  get diagonalSize() {\n    return this.rows;\n  }\n\n  /**\n   * not the same as matrix.isSymmetric()\n   * Here is to check if it's instanceof SymmetricMatrix without bundling issues\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  static isSymmetricMatrix(value) {\n    return Matrix.isMatrix(value) && value.klassType === 'SymmetricMatrix';\n  }\n\n  /**\n   * @param diagonalSize\n   * @return {SymmetricMatrix}\n   */\n  static zeros(diagonalSize) {\n    return new this(diagonalSize);\n  }\n\n  /**\n   * @param diagonalSize\n   * @return {SymmetricMatrix}\n   */\n  static ones(diagonalSize) {\n    return new this(diagonalSize).fill(1);\n  }\n\n  /**\n   * @param {number | AbstractMatrix | ArrayLike<ArrayLike<number>>} diagonalSize\n   * @return {this}\n   */\n  constructor(diagonalSize) {\n    super();\n\n    if (Matrix.isMatrix(diagonalSize)) {\n      if (!diagonalSize.isSymmetric()) {\n        throw new TypeError('not symmetric data');\n      }\n\n      this.#matrix = Matrix.copy(\n        diagonalSize,\n        new Matrix(diagonalSize.rows, diagonalSize.rows),\n      );\n    } else if (Number.isInteger(diagonalSize) && diagonalSize >= 0) {\n      this.#matrix = new Matrix(diagonalSize, diagonalSize);\n    } else {\n      this.#matrix = new Matrix(diagonalSize);\n\n      if (!this.isSymmetric()) {\n        throw new TypeError('not symmetric data');\n      }\n    }\n  }\n\n  clone() {\n    const matrix = new SymmetricMatrix(this.diagonalSize);\n\n    for (const [row, col, value] of this.upperRightEntries()) {\n      matrix.set(row, col, value);\n    }\n\n    return matrix;\n  }\n\n  toMatrix() {\n    return new Matrix(this);\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.#matrix.get(rowIndex, columnIndex);\n  }\n  set(rowIndex, columnIndex, value) {\n    // symmetric set\n    this.#matrix.set(rowIndex, columnIndex, value);\n    this.#matrix.set(columnIndex, rowIndex, value);\n\n    return this;\n  }\n\n  removeCross(index) {\n    // symmetric remove side\n    this.#matrix.removeRow(index);\n    this.#matrix.removeColumn(index);\n\n    return this;\n  }\n\n  addCross(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.diagonalSize;\n    }\n\n    const row = array.slice();\n    row.splice(index, 1);\n\n    this.#matrix.addRow(index, row);\n    this.#matrix.addColumn(index, array);\n\n    return this;\n  }\n\n  /**\n   * @param {Mask[]} mask\n   */\n  applyMask(mask) {\n    if (mask.length !== this.diagonalSize) {\n      throw new RangeError('Mask size do not match with matrix size');\n    }\n\n    // prepare sides to remove from matrix from mask\n    /** @type {number[]} */\n    const sidesToRemove = [];\n    for (const [index, passthroughs] of mask.entries()) {\n      if (passthroughs) continue;\n      sidesToRemove.push(index);\n    }\n    // to remove from highest to lowest for no mutation shifting\n    sidesToRemove.reverse();\n\n    // remove sides\n    for (const sideIndex of sidesToRemove) {\n      this.removeCross(sideIndex);\n    }\n\n    return this;\n  }\n\n  /**\n   * Compact format upper-right corner of matrix\n   * iterate from left to right, from top to bottom.\n   *\n   * ```\n   *   A B C D\n   * A 1 2 3 4\n   * B 2 5 6 7\n   * C 3 6 8 9\n   * D 4 7 9 10\n   * ```\n   *\n   * will return compact 1D array `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`\n   *\n   * length is S(i=0, n=sideSize) => 10 for a 4 sideSized matrix\n   *\n   * @returns {number[]}\n   */\n  toCompact() {\n    const { diagonalSize } = this;\n\n    /** @type {number[]} */\n    const compact = new Array((diagonalSize * (diagonalSize + 1)) / 2);\n    for (let col = 0, row = 0, index = 0; index < compact.length; index++) {\n      compact[index] = this.get(row, col);\n\n      if (++col >= diagonalSize) col = ++row;\n    }\n\n    return compact;\n  }\n\n  /**\n   * @param {number[]} compact\n   * @return {SymmetricMatrix}\n   */\n  static fromCompact(compact) {\n    const compactSize = compact.length;\n    // compactSize = (sideSize * (sideSize + 1)) / 2\n    // https://mathsolver.microsoft.com/fr/solve-problem/y%20%3D%20%20x%20%60cdot%20%20%20%60frac%7B%20%20%60left(%20x%2B1%20%20%60right)%20%20%20%20%7D%7B%202%20%20%7D\n    // sideSize = (Sqrt(8 × compactSize + 1) - 1) / 2\n    const diagonalSize = (Math.sqrt(8 * compactSize + 1) - 1) / 2;\n\n    if (!Number.isInteger(diagonalSize)) {\n      throw new TypeError(\n        `This array is not a compact representation of a Symmetric Matrix, ${JSON.stringify(\n          compact,\n        )}`,\n      );\n    }\n\n    const matrix = new SymmetricMatrix(diagonalSize);\n    for (let col = 0, row = 0, index = 0; index < compactSize; index++) {\n      matrix.set(col, row, compact[index]);\n      if (++col >= diagonalSize) col = ++row;\n    }\n\n    return matrix;\n  }\n\n  /**\n   * half iterator upper-right-corner from left to right, from top to bottom\n   * yield [row, column, value]\n   *\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *upperRightEntries() {\n    for (let row = 0, col = 0; row < this.diagonalSize; void 0) {\n      const value = this.get(row, col);\n\n      yield [row, col, value];\n\n      // at the end of row, move cursor to next row at diagonal position\n      if (++col >= this.diagonalSize) col = ++row;\n    }\n  }\n\n  /**\n   * half iterator upper-right-corner from left to right, from top to bottom\n   * yield value\n   *\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *upperRightValues() {\n    for (let row = 0, col = 0; row < this.diagonalSize; void 0) {\n      const value = this.get(row, col);\n\n      yield value;\n\n      // at the end of row, move cursor to next row at diagonal position\n      if (++col >= this.diagonalSize) col = ++row;\n    }\n  }\n}\nSymmetricMatrix.prototype.klassType = 'SymmetricMatrix';\n\nclass DistanceMatrix extends SymmetricMatrix {\n  /**\n   * not the same as matrix.isSymmetric()\n   * Here is to check if it's instanceof SymmetricMatrix without bundling issues\n   *\n   * @param value\n   * @returns {boolean}\n   */\n  static isDistanceMatrix(value) {\n    return (\n      SymmetricMatrix.isSymmetricMatrix(value) &&\n      value.klassSubType === 'DistanceMatrix'\n    );\n  }\n\n  constructor(sideSize) {\n    super(sideSize);\n\n    if (!this.isDistance()) {\n      throw new TypeError('Provided arguments do no produce a distance matrix');\n    }\n  }\n\n  set(rowIndex, columnIndex, value) {\n    // distance matrix diagonal is 0\n    if (rowIndex === columnIndex) value = 0;\n\n    return super.set(rowIndex, columnIndex, value);\n  }\n\n  addCross(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.diagonalSize;\n    }\n\n    // ensure distance\n    array = array.slice();\n    array[index] = 0;\n\n    return super.addCross(index, array);\n  }\n\n  toSymmetricMatrix() {\n    return new SymmetricMatrix(this);\n  }\n\n  clone() {\n    const matrix = new DistanceMatrix(this.diagonalSize);\n\n    for (const [row, col, value] of this.upperRightEntries()) {\n      if (row === col) continue;\n      matrix.set(row, col, value);\n    }\n\n    return matrix;\n  }\n\n  /**\n   * Compact format upper-right corner of matrix\n   * no diagonal (only zeros)\n   * iterable from left to right, from top to bottom.\n   *\n   * ```\n   *   A B C D\n   * A 0 1 2 3\n   * B 1 0 4 5\n   * C 2 4 0 6\n   * D 3 5 6 0\n   * ```\n   *\n   * will return compact 1D array `[1, 2, 3, 4, 5, 6]`\n   *\n   * length is S(i=0, n=sideSize-1) => 6 for a 4 side sized matrix\n   *\n   * @returns {number[]}\n   */\n  toCompact() {\n    const { diagonalSize } = this;\n    const compactLength = ((diagonalSize - 1) * diagonalSize) / 2;\n\n    /** @type {number[]} */\n    const compact = new Array(compactLength);\n    for (let col = 1, row = 0, index = 0; index < compact.length; index++) {\n      compact[index] = this.get(row, col);\n\n      if (++col >= diagonalSize) col = ++row + 1;\n    }\n\n    return compact;\n  }\n\n  /**\n   * @param {number[]} compact\n   */\n  static fromCompact(compact) {\n    const compactSize = compact.length;\n\n    if (compactSize === 0) {\n      return new this(0);\n    }\n\n    // compactSize in Natural integer range ]0;∞]\n    // compactSize = (sideSize * (sideSize - 1)) / 2\n    // sideSize = (Sqrt(8 × compactSize + 1) + 1) / 2\n    const diagonalSize = (Math.sqrt(8 * compactSize + 1) + 1) / 2;\n\n    if (!Number.isInteger(diagonalSize)) {\n      throw new TypeError(\n        `This array is not a compact representation of a DistanceMatrix, ${JSON.stringify(\n          compact,\n        )}`,\n      );\n    }\n\n    const matrix = new this(diagonalSize);\n    for (let col = 1, row = 0, index = 0; index < compactSize; index++) {\n      matrix.set(col, row, compact[index]);\n      if (++col >= diagonalSize) col = ++row + 1;\n    }\n\n    return matrix;\n  }\n}\nDistanceMatrix.prototype.klassSubType = 'DistanceMatrix';\n\nclass BaseView extends AbstractMatrix {\n  constructor(matrix, rows, columns) {\n    super();\n    this.matrix = matrix;\n    this.rows = rows;\n    this.columns = columns;\n  }\n}\n\nclass MatrixColumnView extends BaseView {\n  constructor(matrix, column) {\n    checkColumnIndex(matrix, column);\n    super(matrix, matrix.rows, 1);\n    this.column = column;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.column, value);\n    return this;\n  }\n\n  get(rowIndex) {\n    return this.matrix.get(rowIndex, this.column);\n  }\n}\n\nclass MatrixColumnSelectionView extends BaseView {\n  constructor(matrix, columnIndices) {\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, matrix.rows, columnIndices.length);\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columnIndices[columnIndex], value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columnIndices[columnIndex]);\n  }\n}\n\nclass MatrixFlipColumnView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n  }\n}\n\nclass MatrixFlipRowView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.rows, matrix.columns);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n  }\n}\n\nclass MatrixRowView extends BaseView {\n  constructor(matrix, row) {\n    checkRowIndex(matrix, row);\n    super(matrix, 1, matrix.columns);\n    this.row = row;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.row, columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.row, columnIndex);\n  }\n}\n\nclass MatrixRowSelectionView extends BaseView {\n  constructor(matrix, rowIndices) {\n    checkRowIndices(matrix, rowIndices);\n    super(matrix, rowIndices.length, matrix.columns);\n    this.rowIndices = rowIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(this.rowIndices[rowIndex], columnIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(this.rowIndices[rowIndex], columnIndex);\n  }\n}\n\nclass MatrixSelectionView extends BaseView {\n  constructor(matrix, rowIndices, columnIndices) {\n    checkRowIndices(matrix, rowIndices);\n    checkColumnIndices(matrix, columnIndices);\n    super(matrix, rowIndices.length, columnIndices.length);\n    this.rowIndices = rowIndices;\n    this.columnIndices = columnIndices;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.rowIndices[rowIndex],\n      this.columnIndices[columnIndex],\n    );\n  }\n}\n\nclass MatrixSubView extends BaseView {\n  constructor(matrix, startRow, endRow, startColumn, endColumn) {\n    checkRange(matrix, startRow, endRow, startColumn, endColumn);\n    super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n    this.startRow = startRow;\n    this.startColumn = startColumn;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n      value,\n    );\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(\n      this.startRow + rowIndex,\n      this.startColumn + columnIndex,\n    );\n  }\n}\n\nclass MatrixTransposeView extends BaseView {\n  constructor(matrix) {\n    super(matrix, matrix.columns, matrix.rows);\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.matrix.set(columnIndex, rowIndex, value);\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.matrix.get(columnIndex, rowIndex);\n  }\n}\n\nclass WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n\nclass WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n\nfunction wrap(array, options) {\n  if (isAnyArray.isAnyArray(array)) {\n    if (array[0] && isAnyArray.isAnyArray(array[0])) {\n      return new WrapperMatrix2D(array);\n    } else {\n      return new WrapperMatrix1D(array, options);\n    }\n  } else {\n    throw new Error('the argument is not an array');\n  }\n}\n\nclass LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n\nfunction hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n\nclass QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n\nclass SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n\nfunction inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nfunction solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n\nfunction determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    if (matrix.columns === 0) {\n      return 1;\n    }\n\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n\nfunction xrange(n, exception) {\n  let range = [];\n  for (let i = 0; i < n; i++) {\n    if (i !== exception) {\n      range.push(i);\n    }\n  }\n  return range;\n}\n\nfunction dependenciesOneRow(\n  error,\n  matrix,\n  index,\n  thresholdValue = 10e-10,\n  thresholdError = 10e-10,\n) {\n  if (error > thresholdError) {\n    return new Array(matrix.rows + 1).fill(0);\n  } else {\n    let returnArray = matrix.addRow(index, [0]);\n    for (let i = 0; i < returnArray.rows; i++) {\n      if (Math.abs(returnArray.get(i, 0)) < thresholdValue) {\n        returnArray.set(i, 0, 0);\n      }\n    }\n    return returnArray.to1DArray();\n  }\n}\n\nfunction linearDependencies(matrix, options = {}) {\n  const { thresholdValue = 10e-10, thresholdError = 10e-10 } = options;\n  matrix = Matrix.checkMatrix(matrix);\n\n  let n = matrix.rows;\n  let results = new Matrix(n, n);\n\n  for (let i = 0; i < n; i++) {\n    let b = Matrix.columnVector(matrix.getRow(i));\n    let Abis = matrix.subMatrixRow(xrange(n, i)).transpose();\n    let svd = new SingularValueDecomposition(Abis);\n    let x = svd.solve(b);\n    let error = Matrix.sub(b, Abis.mmul(x)).abs().max();\n    results.setRow(\n      i,\n      dependenciesOneRow(error, x, i, thresholdValue, thresholdError),\n    );\n  }\n  return results;\n}\n\nfunction pseudoInverse(matrix, threshold = Number.EPSILON) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isEmpty()) {\n    // with a zero dimension, the pseudo-inverse is the transpose, since all 0xn and nx0 matrices are singular\n    // (0xn)*(nx0)*(0xn) = 0xn\n    // (nx0)*(0xn)*(nx0) = nx0\n    return matrix.transpose();\n  }\n  let svdSolution = new SingularValueDecomposition(matrix, { autoTranspose: true });\n\n  let U = svdSolution.leftSingularVectors;\n  let V = svdSolution.rightSingularVectors;\n  let s = svdSolution.diagonal;\n\n  for (let i = 0; i < s.length; i++) {\n    if (Math.abs(s[i]) > threshold) {\n      s[i] = 1.0 / s[i];\n    } else {\n      s[i] = 0.0;\n    }\n  }\n\n  return V.mmul(Matrix.diag(s).mmul(U.transpose()));\n}\n\nfunction covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n\nfunction correlation(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !isAnyArray.isAnyArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const { center = true, scale = true } = options;\n  if (center) {\n    xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix.center('column');\n    }\n  }\n  if (scale) {\n    xMatrix.scale('column');\n    if (!yIsSame) {\n      yMatrix.scale('column');\n    }\n  }\n\n  const sdx = xMatrix.standardDeviation('column', { unbiased: true });\n  const sdy = yIsSame\n    ? sdx\n    : yMatrix.standardDeviation('column', { unbiased: true });\n\n  const corr = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < corr.rows; i++) {\n    for (let j = 0; j < corr.columns; j++) {\n      corr.set(\n        i,\n        j,\n        corr.get(i, j) * (1 / (sdx[i] * sdy[j])) * (1 / (xMatrix.rows - 1)),\n      );\n    }\n  }\n  return corr;\n}\n\nclass EigenvalueDecomposition {\n  constructor(matrix, options = {}) {\n    const { assumeSymmetric = false } = options;\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n      throw new Error('Matrix is not a square matrix');\n    }\n\n    if (matrix.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let n = matrix.columns;\n    let V = new Matrix(n, n);\n    let d = new Float64Array(n);\n    let e = new Float64Array(n);\n    let value = matrix;\n    let i, j;\n\n    let isSymmetric = false;\n    if (assumeSymmetric) {\n      isSymmetric = true;\n    } else {\n      isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          V.set(i, j, value.get(i, j));\n        }\n      }\n      tred2(n, e, d, V);\n      tql2(n, e, d, V);\n    } else {\n      let H = new Matrix(n, n);\n      let ort = new Float64Array(n);\n      for (j = 0; j < n; j++) {\n        for (i = 0; i < n; i++) {\n          H.set(i, j, value.get(i, j));\n        }\n      }\n      orthes(n, H, ort, V);\n      hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n  }\n\n  get realEigenvalues() {\n    return Array.from(this.d);\n  }\n\n  get imaginaryEigenvalues() {\n    return Array.from(this.e);\n  }\n\n  get eigenvectorMatrix() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    let n = this.n;\n    let e = this.e;\n    let d = this.d;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        X.set(i, j, 0);\n      }\n      X.set(i, i, d[i]);\n      if (e[i] > 0) {\n        X.set(i, i + 1, e[i]);\n      } else if (e[i] < 0) {\n        X.set(i, i - 1, e[i]);\n      }\n    }\n    return X;\n  }\n}\n\nfunction tred2(n, e, d, V) {\n  let f, g, h, i, j, k, hh, scale;\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n  }\n\n  for (i = n - 1; i > 0; i--) {\n    scale = 0;\n    h = 0;\n    for (k = 0; k < i; k++) {\n      scale = scale + Math.abs(d[k]);\n    }\n\n    if (scale === 0) {\n      e[i] = d[i - 1];\n      for (j = 0; j < i; j++) {\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n        V.set(j, i, 0);\n      }\n    } else {\n      for (k = 0; k < i; k++) {\n        d[k] /= scale;\n        h += d[k] * d[k];\n      }\n\n      f = d[i - 1];\n      g = Math.sqrt(h);\n      if (f > 0) {\n        g = -g;\n      }\n\n      e[i] = scale * g;\n      h = h - f * g;\n      d[i - 1] = f - g;\n      for (j = 0; j < i; j++) {\n        e[j] = 0;\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        V.set(j, i, f);\n        g = e[j] + V.get(j, j) * f;\n        for (k = j + 1; k <= i - 1; k++) {\n          g += V.get(k, j) * d[k];\n          e[k] += V.get(k, j) * f;\n        }\n        e[j] = g;\n      }\n\n      f = 0;\n      for (j = 0; j < i; j++) {\n        e[j] /= h;\n        f += e[j] * d[j];\n      }\n\n      hh = f / (h + h);\n      for (j = 0; j < i; j++) {\n        e[j] -= hh * d[j];\n      }\n\n      for (j = 0; j < i; j++) {\n        f = d[j];\n        g = e[j];\n        for (k = j; k <= i - 1; k++) {\n          V.set(k, j, V.get(k, j) - (f * e[k] + g * d[k]));\n        }\n        d[j] = V.get(i - 1, j);\n        V.set(i, j, 0);\n      }\n    }\n    d[i] = h;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    V.set(n - 1, i, V.get(i, i));\n    V.set(i, i, 1);\n    h = d[i + 1];\n    if (h !== 0) {\n      for (k = 0; k <= i; k++) {\n        d[k] = V.get(k, i + 1) / h;\n      }\n\n      for (j = 0; j <= i; j++) {\n        g = 0;\n        for (k = 0; k <= i; k++) {\n          g += V.get(k, i + 1) * V.get(k, j);\n        }\n        for (k = 0; k <= i; k++) {\n          V.set(k, j, V.get(k, j) - g * d[k]);\n        }\n      }\n    }\n\n    for (k = 0; k <= i; k++) {\n      V.set(k, i + 1, 0);\n    }\n  }\n\n  for (j = 0; j < n; j++) {\n    d[j] = V.get(n - 1, j);\n    V.set(n - 1, j, 0);\n  }\n\n  V.set(n - 1, n - 1, 1);\n  e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n  let g, h, i, j, k, l, m, p, r, dl1, c, c2, c3, el1, s, s2;\n\n  for (i = 1; i < n; i++) {\n    e[i - 1] = e[i];\n  }\n\n  e[n - 1] = 0;\n\n  let f = 0;\n  let tst1 = 0;\n  let eps = Number.EPSILON;\n\n  for (l = 0; l < n; l++) {\n    tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n    m = l;\n    while (m < n) {\n      if (Math.abs(e[m]) <= eps * tst1) {\n        break;\n      }\n      m++;\n    }\n\n    if (m > l) {\n      do {\n\n        g = d[l];\n        p = (d[l + 1] - g) / (2 * e[l]);\n        r = hypotenuse(p, 1);\n        if (p < 0) {\n          r = -r;\n        }\n\n        d[l] = e[l] / (p + r);\n        d[l + 1] = e[l] * (p + r);\n        dl1 = d[l + 1];\n        h = g - d[l];\n        for (i = l + 2; i < n; i++) {\n          d[i] -= h;\n        }\n\n        f = f + h;\n\n        p = d[m];\n        c = 1;\n        c2 = c;\n        c3 = c;\n        el1 = e[l + 1];\n        s = 0;\n        s2 = 0;\n        for (i = m - 1; i >= l; i--) {\n          c3 = c2;\n          c2 = c;\n          s2 = s;\n          g = c * e[i];\n          h = c * p;\n          r = hypotenuse(p, e[i]);\n          e[i + 1] = s * r;\n          s = e[i] / r;\n          c = p / r;\n          p = c * d[i] - s * g;\n          d[i + 1] = h + s * (c * g + s * d[i]);\n\n          for (k = 0; k < n; k++) {\n            h = V.get(k, i + 1);\n            V.set(k, i + 1, s * V.get(k, i) + c * h);\n            V.set(k, i, c * V.get(k, i) - s * h);\n          }\n        }\n\n        p = (-s * s2 * c3 * el1 * e[l]) / dl1;\n        e[l] = s * p;\n        d[l] = c * p;\n      } while (Math.abs(e[l]) > eps * tst1);\n    }\n    d[l] = d[l] + f;\n    e[l] = 0;\n  }\n\n  for (i = 0; i < n - 1; i++) {\n    k = i;\n    p = d[i];\n    for (j = i + 1; j < n; j++) {\n      if (d[j] < p) {\n        k = j;\n        p = d[j];\n      }\n    }\n\n    if (k !== i) {\n      d[k] = d[i];\n      d[i] = p;\n      for (j = 0; j < n; j++) {\n        p = V.get(j, i);\n        V.set(j, i, V.get(j, k));\n        V.set(j, k, p);\n      }\n    }\n  }\n}\n\nfunction orthes(n, H, ort, V) {\n  let low = 0;\n  let high = n - 1;\n  let f, g, h, i, j, m;\n  let scale;\n\n  for (m = low + 1; m <= high - 1; m++) {\n    scale = 0;\n    for (i = m; i <= high; i++) {\n      scale = scale + Math.abs(H.get(i, m - 1));\n    }\n\n    if (scale !== 0) {\n      h = 0;\n      for (i = high; i >= m; i--) {\n        ort[i] = H.get(i, m - 1) / scale;\n        h += ort[i] * ort[i];\n      }\n\n      g = Math.sqrt(h);\n      if (ort[m] > 0) {\n        g = -g;\n      }\n\n      h = h - ort[m] * g;\n      ort[m] = ort[m] - g;\n\n      for (j = m; j < n; j++) {\n        f = 0;\n        for (i = high; i >= m; i--) {\n          f += ort[i] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (i = m; i <= high; i++) {\n          H.set(i, j, H.get(i, j) - f * ort[i]);\n        }\n      }\n\n      for (i = 0; i <= high; i++) {\n        f = 0;\n        for (j = high; j >= m; j--) {\n          f += ort[j] * H.get(i, j);\n        }\n\n        f = f / h;\n        for (j = m; j <= high; j++) {\n          H.set(i, j, H.get(i, j) - f * ort[j]);\n        }\n      }\n\n      ort[m] = scale * ort[m];\n      H.set(m, m - 1, scale * g);\n    }\n  }\n\n  for (i = 0; i < n; i++) {\n    for (j = 0; j < n; j++) {\n      V.set(i, j, i === j ? 1 : 0);\n    }\n  }\n\n  for (m = high - 1; m >= low + 1; m--) {\n    if (H.get(m, m - 1) !== 0) {\n      for (i = m + 1; i <= high; i++) {\n        ort[i] = H.get(i, m - 1);\n      }\n\n      for (j = m; j <= high; j++) {\n        g = 0;\n        for (i = m; i <= high; i++) {\n          g += ort[i] * V.get(i, j);\n        }\n\n        g = g / ort[m] / H.get(m, m - 1);\n        for (i = m; i <= high; i++) {\n          V.set(i, j, V.get(i, j) + g * ort[i]);\n        }\n      }\n    }\n  }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n  let n = nn - 1;\n  let low = 0;\n  let high = nn - 1;\n  let eps = Number.EPSILON;\n  let exshift = 0;\n  let norm = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let z = 0;\n  let iter = 0;\n  let i, j, k, l, m, t, w, x, y;\n  let ra, sa, vr, vi;\n  let notlast, cdivres;\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      d[i] = H.get(i, i);\n      e[i] = 0;\n    }\n\n    for (j = Math.max(i - 1, 0); j < nn; j++) {\n      norm = norm + Math.abs(H.get(i, j));\n    }\n  }\n\n  while (n >= low) {\n    l = n;\n    while (l > low) {\n      s = Math.abs(H.get(l - 1, l - 1)) + Math.abs(H.get(l, l));\n      if (s === 0) {\n        s = norm;\n      }\n      if (Math.abs(H.get(l, l - 1)) < eps * s) {\n        break;\n      }\n      l--;\n    }\n\n    if (l === n) {\n      H.set(n, n, H.get(n, n) + exshift);\n      d[n] = H.get(n, n);\n      e[n] = 0;\n      n--;\n      iter = 0;\n    } else if (l === n - 1) {\n      w = H.get(n, n - 1) * H.get(n - 1, n);\n      p = (H.get(n - 1, n - 1) - H.get(n, n)) / 2;\n      q = p * p + w;\n      z = Math.sqrt(Math.abs(q));\n      H.set(n, n, H.get(n, n) + exshift);\n      H.set(n - 1, n - 1, H.get(n - 1, n - 1) + exshift);\n      x = H.get(n, n);\n\n      if (q >= 0) {\n        z = p >= 0 ? p + z : p - z;\n        d[n - 1] = x + z;\n        d[n] = d[n - 1];\n        if (z !== 0) {\n          d[n] = x - w / z;\n        }\n        e[n - 1] = 0;\n        e[n] = 0;\n        x = H.get(n, n - 1);\n        s = Math.abs(x) + Math.abs(z);\n        p = x / s;\n        q = z / s;\n        r = Math.sqrt(p * p + q * q);\n        p = p / r;\n        q = q / r;\n\n        for (j = n - 1; j < nn; j++) {\n          z = H.get(n - 1, j);\n          H.set(n - 1, j, q * z + p * H.get(n, j));\n          H.set(n, j, q * H.get(n, j) - p * z);\n        }\n\n        for (i = 0; i <= n; i++) {\n          z = H.get(i, n - 1);\n          H.set(i, n - 1, q * z + p * H.get(i, n));\n          H.set(i, n, q * H.get(i, n) - p * z);\n        }\n\n        for (i = low; i <= high; i++) {\n          z = V.get(i, n - 1);\n          V.set(i, n - 1, q * z + p * V.get(i, n));\n          V.set(i, n, q * V.get(i, n) - p * z);\n        }\n      } else {\n        d[n - 1] = x + p;\n        d[n] = x + p;\n        e[n - 1] = z;\n        e[n] = -z;\n      }\n\n      n = n - 2;\n      iter = 0;\n    } else {\n      x = H.get(n, n);\n      y = 0;\n      w = 0;\n      if (l < n) {\n        y = H.get(n - 1, n - 1);\n        w = H.get(n, n - 1) * H.get(n - 1, n);\n      }\n\n      if (iter === 10) {\n        exshift += x;\n        for (i = low; i <= n; i++) {\n          H.set(i, i, H.get(i, i) - x);\n        }\n        s = Math.abs(H.get(n, n - 1)) + Math.abs(H.get(n - 1, n - 2));\n        // eslint-disable-next-line no-multi-assign\n        x = y = 0.75 * s;\n        w = -0.4375 * s * s;\n      }\n\n      if (iter === 30) {\n        s = (y - x) / 2;\n        s = s * s + w;\n        if (s > 0) {\n          s = Math.sqrt(s);\n          if (y < x) {\n            s = -s;\n          }\n          s = x - w / ((y - x) / 2 + s);\n          for (i = low; i <= n; i++) {\n            H.set(i, i, H.get(i, i) - s);\n          }\n          exshift += s;\n          // eslint-disable-next-line no-multi-assign\n          x = y = w = 0.964;\n        }\n      }\n\n      iter = iter + 1;\n\n      m = n - 2;\n      while (m >= l) {\n        z = H.get(m, m);\n        r = x - z;\n        s = y - z;\n        p = (r * s - w) / H.get(m + 1, m) + H.get(m, m + 1);\n        q = H.get(m + 1, m + 1) - z - r - s;\n        r = H.get(m + 2, m + 1);\n        s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n        p = p / s;\n        q = q / s;\n        r = r / s;\n        if (m === l) {\n          break;\n        }\n        if (\n          Math.abs(H.get(m, m - 1)) * (Math.abs(q) + Math.abs(r)) <\n          eps *\n            (Math.abs(p) *\n              (Math.abs(H.get(m - 1, m - 1)) +\n                Math.abs(z) +\n                Math.abs(H.get(m + 1, m + 1))))\n        ) {\n          break;\n        }\n        m--;\n      }\n\n      for (i = m + 2; i <= n; i++) {\n        H.set(i, i - 2, 0);\n        if (i > m + 2) {\n          H.set(i, i - 3, 0);\n        }\n      }\n\n      for (k = m; k <= n - 1; k++) {\n        notlast = k !== n - 1;\n        if (k !== m) {\n          p = H.get(k, k - 1);\n          q = H.get(k + 1, k - 1);\n          r = notlast ? H.get(k + 2, k - 1) : 0;\n          x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n          if (x !== 0) {\n            p = p / x;\n            q = q / x;\n            r = r / x;\n          }\n        }\n\n        if (x === 0) {\n          break;\n        }\n\n        s = Math.sqrt(p * p + q * q + r * r);\n        if (p < 0) {\n          s = -s;\n        }\n\n        if (s !== 0) {\n          if (k !== m) {\n            H.set(k, k - 1, -s * x);\n          } else if (l !== m) {\n            H.set(k, k - 1, -H.get(k, k - 1));\n          }\n\n          p = p + s;\n          x = p / s;\n          y = q / s;\n          z = r / s;\n          q = q / p;\n          r = r / p;\n\n          for (j = k; j < nn; j++) {\n            p = H.get(k, j) + q * H.get(k + 1, j);\n            if (notlast) {\n              p = p + r * H.get(k + 2, j);\n              H.set(k + 2, j, H.get(k + 2, j) - p * z);\n            }\n\n            H.set(k, j, H.get(k, j) - p * x);\n            H.set(k + 1, j, H.get(k + 1, j) - p * y);\n          }\n\n          for (i = 0; i <= Math.min(n, k + 3); i++) {\n            p = x * H.get(i, k) + y * H.get(i, k + 1);\n            if (notlast) {\n              p = p + z * H.get(i, k + 2);\n              H.set(i, k + 2, H.get(i, k + 2) - p * r);\n            }\n\n            H.set(i, k, H.get(i, k) - p);\n            H.set(i, k + 1, H.get(i, k + 1) - p * q);\n          }\n\n          for (i = low; i <= high; i++) {\n            p = x * V.get(i, k) + y * V.get(i, k + 1);\n            if (notlast) {\n              p = p + z * V.get(i, k + 2);\n              V.set(i, k + 2, V.get(i, k + 2) - p * r);\n            }\n\n            V.set(i, k, V.get(i, k) - p);\n            V.set(i, k + 1, V.get(i, k + 1) - p * q);\n          }\n        }\n      }\n    }\n  }\n\n  if (norm === 0) {\n    return;\n  }\n\n  for (n = nn - 1; n >= 0; n--) {\n    p = d[n];\n    q = e[n];\n\n    if (q === 0) {\n      l = n;\n      H.set(n, n, 1);\n      for (i = n - 1; i >= 0; i--) {\n        w = H.get(i, i) - p;\n        r = 0;\n        for (j = l; j <= n; j++) {\n          r = r + H.get(i, j) * H.get(j, n);\n        }\n\n        if (e[i] < 0) {\n          z = w;\n          s = r;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            H.set(i, n, w !== 0 ? -r / w : -r / (eps * norm));\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n            t = (x * s - z * r) / q;\n            H.set(i, n, t);\n            H.set(\n              i + 1,\n              n,\n              Math.abs(x) > Math.abs(z) ? (-r - w * t) / x : (-s - y * t) / z,\n            );\n          }\n\n          t = Math.abs(H.get(i, n));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    } else if (q < 0) {\n      l = n - 1;\n\n      if (Math.abs(H.get(n, n - 1)) > Math.abs(H.get(n - 1, n))) {\n        H.set(n - 1, n - 1, q / H.get(n, n - 1));\n        H.set(n - 1, n, -(H.get(n, n) - p) / H.get(n, n - 1));\n      } else {\n        cdivres = cdiv(0, -H.get(n - 1, n), H.get(n - 1, n - 1) - p, q);\n        H.set(n - 1, n - 1, cdivres[0]);\n        H.set(n - 1, n, cdivres[1]);\n      }\n\n      H.set(n, n - 1, 0);\n      H.set(n, n, 1);\n      for (i = n - 2; i >= 0; i--) {\n        ra = 0;\n        sa = 0;\n        for (j = l; j <= n; j++) {\n          ra = ra + H.get(i, j) * H.get(j, n - 1);\n          sa = sa + H.get(i, j) * H.get(j, n);\n        }\n\n        w = H.get(i, i) - p;\n\n        if (e[i] < 0) {\n          z = w;\n          r = ra;\n          s = sa;\n        } else {\n          l = i;\n          if (e[i] === 0) {\n            cdivres = cdiv(-ra, -sa, w, q);\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n          } else {\n            x = H.get(i, i + 1);\n            y = H.get(i + 1, i);\n            vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n            vi = (d[i] - p) * 2 * q;\n            if (vr === 0 && vi === 0) {\n              vr =\n                eps *\n                norm *\n                (Math.abs(w) +\n                  Math.abs(q) +\n                  Math.abs(x) +\n                  Math.abs(y) +\n                  Math.abs(z));\n            }\n            cdivres = cdiv(\n              x * r - z * ra + q * sa,\n              x * s - z * sa - q * ra,\n              vr,\n              vi,\n            );\n            H.set(i, n - 1, cdivres[0]);\n            H.set(i, n, cdivres[1]);\n            if (Math.abs(x) > Math.abs(z) + Math.abs(q)) {\n              H.set(\n                i + 1,\n                n - 1,\n                (-ra - w * H.get(i, n - 1) + q * H.get(i, n)) / x,\n              );\n              H.set(\n                i + 1,\n                n,\n                (-sa - w * H.get(i, n) - q * H.get(i, n - 1)) / x,\n              );\n            } else {\n              cdivres = cdiv(\n                -r - y * H.get(i, n - 1),\n                -s - y * H.get(i, n),\n                z,\n                q,\n              );\n              H.set(i + 1, n - 1, cdivres[0]);\n              H.set(i + 1, n, cdivres[1]);\n            }\n          }\n\n          t = Math.max(Math.abs(H.get(i, n - 1)), Math.abs(H.get(i, n)));\n          if (eps * t * t > 1) {\n            for (j = i; j <= n; j++) {\n              H.set(j, n - 1, H.get(j, n - 1) / t);\n              H.set(j, n, H.get(j, n) / t);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < nn; i++) {\n    if (i < low || i > high) {\n      for (j = i; j < nn; j++) {\n        V.set(i, j, H.get(i, j));\n      }\n    }\n  }\n\n  for (j = nn - 1; j >= low; j--) {\n    for (i = low; i <= high; i++) {\n      z = 0;\n      for (k = low; k <= Math.min(j, high); k++) {\n        z = z + V.get(i, k) * H.get(k, j);\n      }\n      V.set(i, j, z);\n    }\n  }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n  let r, d;\n  if (Math.abs(yr) > Math.abs(yi)) {\n    r = yi / yr;\n    d = yr + r * yi;\n    return [(xr + r * xi) / d, (xi - r * xr) / d];\n  } else {\n    r = yr / yi;\n    d = yi + r * yr;\n    return [(r * xr + xi) / d, (r * xi - xr) / d];\n  }\n}\n\nclass CholeskyDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    if (!value.isSymmetric()) {\n      throw new Error('Matrix is not symmetric');\n    }\n\n    let a = value;\n    let dimension = a.rows;\n    let l = new Matrix(dimension, dimension);\n    let positiveDefinite = true;\n    let i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n      let d = 0;\n      for (k = 0; k < j; k++) {\n        let s = 0;\n        for (i = 0; i < k; i++) {\n          s += l.get(k, i) * l.get(j, i);\n        }\n        s = (a.get(j, k) - s) / l.get(k, k);\n        l.set(j, k, s);\n        d = d + s * s;\n      }\n\n      d = a.get(j, j) - d;\n\n      positiveDefinite &&= d > 0;\n      l.set(j, j, Math.sqrt(Math.max(d, 0)));\n      for (k = j + 1; k < dimension; k++) {\n        l.set(j, k, 0);\n      }\n    }\n\n    this.L = l;\n    this.positiveDefinite = positiveDefinite;\n  }\n\n  isPositiveDefinite() {\n    return this.positiveDefinite;\n  }\n\n  solve(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let l = this.L;\n    let dimension = l.rows;\n\n    if (value.rows !== dimension) {\n      throw new Error('Matrix dimensions do not match');\n    }\n    if (this.isPositiveDefinite() === false) {\n      throw new Error('Matrix is not positive definite');\n    }\n\n    let count = value.columns;\n    let B = value.clone();\n    let i, j, k;\n\n    for (k = 0; k < dimension; k++) {\n      for (j = 0; j < count; j++) {\n        for (i = 0; i < k; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(k, i));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    for (k = dimension - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        for (i = k + 1; i < dimension; i++) {\n          B.set(k, j, B.get(k, j) - B.get(i, j) * l.get(i, k));\n        }\n        B.set(k, j, B.get(k, j) / l.get(k, k));\n      }\n    }\n\n    return B;\n  }\n\n  get lowerTriangularMatrix() {\n    return this.L;\n  }\n}\n\nclass nipals {\n  constructor(X, options = {}) {\n    X = WrapperMatrix2D.checkMatrix(X);\n    let { Y } = options;\n    const {\n      scaleScores = false,\n      maxIterations = 1000,\n      terminationCriteria = 1e-10,\n    } = options;\n\n    let u;\n    if (Y) {\n      if (isAnyArray.isAnyArray(Y) && typeof Y[0] === 'number') {\n        Y = Matrix.columnVector(Y);\n      } else {\n        Y = WrapperMatrix2D.checkMatrix(Y);\n      }\n      if (Y.rows !== X.rows) {\n        throw new Error('Y should have the same number of rows as X');\n      }\n      u = Y.getColumnVector(0);\n    } else {\n      u = X.getColumnVector(0);\n    }\n\n    let diff = 1;\n    let t, q, w, tOld;\n\n    for (\n      let counter = 0;\n      counter < maxIterations && diff > terminationCriteria;\n      counter++\n    ) {\n      w = X.transpose().mmul(u).div(u.transpose().mmul(u).get(0, 0));\n      w = w.div(w.norm());\n\n      t = X.mmul(w).div(w.transpose().mmul(w).get(0, 0));\n\n      if (counter > 0) {\n        diff = t.clone().sub(tOld).pow(2).sum();\n      }\n      tOld = t.clone();\n\n      if (Y) {\n        q = Y.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n        q = q.div(q.norm());\n\n        u = Y.mmul(q).div(q.transpose().mmul(q).get(0, 0));\n      } else {\n        u = t;\n      }\n    }\n\n    if (Y) {\n      let p = X.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      p = p.div(p.norm());\n      let xResidual = X.clone().sub(t.clone().mmul(p.transpose()));\n      let residual = u.transpose().mmul(t).div(t.transpose().mmul(t).get(0, 0));\n      let yResidual = Y.clone().sub(\n        t.clone().mulS(residual.get(0, 0)).mmul(q.transpose()),\n      );\n\n      this.t = t;\n      this.p = p.transpose();\n      this.w = w.transpose();\n      this.q = q;\n      this.u = u;\n      this.s = t.transpose().mmul(t);\n      this.xResidual = xResidual;\n      this.yResidual = yResidual;\n      this.betas = residual;\n    } else {\n      this.w = w.transpose();\n      this.s = t.transpose().mmul(t).sqrt();\n      if (scaleScores) {\n        this.t = t.clone().div(this.s.get(0, 0));\n      } else {\n        this.t = t;\n      }\n      this.xResidual = X.sub(t.mmul(w.transpose()));\n    }\n  }\n}\n\nexports.AbstractMatrix = AbstractMatrix;\nexports.CHO = CholeskyDecomposition;\nexports.CholeskyDecomposition = CholeskyDecomposition;\nexports.DistanceMatrix = DistanceMatrix;\nexports.EVD = EigenvalueDecomposition;\nexports.EigenvalueDecomposition = EigenvalueDecomposition;\nexports.LU = LuDecomposition;\nexports.LuDecomposition = LuDecomposition;\nexports.Matrix = Matrix;\nexports.MatrixColumnSelectionView = MatrixColumnSelectionView;\nexports.MatrixColumnView = MatrixColumnView;\nexports.MatrixFlipColumnView = MatrixFlipColumnView;\nexports.MatrixFlipRowView = MatrixFlipRowView;\nexports.MatrixRowSelectionView = MatrixRowSelectionView;\nexports.MatrixRowView = MatrixRowView;\nexports.MatrixSelectionView = MatrixSelectionView;\nexports.MatrixSubView = MatrixSubView;\nexports.MatrixTransposeView = MatrixTransposeView;\nexports.NIPALS = nipals;\nexports.Nipals = nipals;\nexports.QR = QrDecomposition;\nexports.QrDecomposition = QrDecomposition;\nexports.SVD = SingularValueDecomposition;\nexports.SingularValueDecomposition = SingularValueDecomposition;\nexports.SymmetricMatrix = SymmetricMatrix;\nexports.WrapperMatrix1D = WrapperMatrix1D;\nexports.WrapperMatrix2D = WrapperMatrix2D;\nexports.correlation = correlation;\nexports.covariance = covariance;\nexports.default = Matrix;\nexports.determinant = determinant;\nexports.inverse = inverse;\nexports.linearDependencies = linearDependencies;\nexports.pseudoInverse = pseudoInverse;\nexports.solve = solve;\nexports.wrap = wrap;\n","import * as matrix from './matrix.js';\n\nexport const AbstractMatrix = matrix.AbstractMatrix;\nexport const CHO = matrix.CHO;\nexport const CholeskyDecomposition = matrix.CholeskyDecomposition;\nexport const DistanceMatrix = matrix.DistanceMatrix;\nexport const EVD = matrix.EVD;\nexport const EigenvalueDecomposition = matrix.EigenvalueDecomposition;\nexport const LU = matrix.LU;\nexport const LuDecomposition = matrix.LuDecomposition;\nexport const Matrix = matrix.Matrix;\nexport const MatrixColumnSelectionView = matrix.MatrixColumnSelectionView;\nexport const MatrixColumnView = matrix.MatrixColumnView;\nexport const MatrixFlipColumnView = matrix.MatrixFlipColumnView;\nexport const MatrixFlipRowView = matrix.MatrixFlipRowView;\nexport const MatrixRowSelectionView = matrix.MatrixRowSelectionView;\nexport const MatrixRowView = matrix.MatrixRowView;\nexport const MatrixSelectionView = matrix.MatrixSelectionView;\nexport const MatrixSubView = matrix.MatrixSubView;\nexport const MatrixTransposeView = matrix.MatrixTransposeView;\nexport const NIPALS = matrix.NIPALS;\nexport const Nipals = matrix.Nipals;\nexport const QR = matrix.QR;\nexport const QrDecomposition = matrix.QrDecomposition;\nexport const SVD = matrix.SVD;\nexport const SingularValueDecomposition = matrix.SingularValueDecomposition;\nexport const SymmetricMatrix = matrix.SymmetricMatrix;\nexport const WrapperMatrix1D = matrix.WrapperMatrix1D;\nexport const WrapperMatrix2D = matrix.WrapperMatrix2D;\nexport const correlation = matrix.correlation;\nexport const covariance = matrix.covariance;\nexport default matrix.default.Matrix ? matrix.default.Matrix : matrix.Matrix;\nexport const determinant = matrix.determinant;\nexport const inverse = matrix.inverse;\nexport const linearDependencies = matrix.linearDependencies;\nexport const pseudoInverse = matrix.pseudoInverse;\nexport const solve = matrix.solve;\nexport const wrap = matrix.wrap;\n","import Matrix from 'ml-matrix';\n/**\n * Compute the centroid of a set of points.\n *\n * @param points - Points to process as a 3xN matrix. Third dimension must be padded with ones.\n * @returns The centroid.\n */\nexport function getCentroid(points) {\n    let result = new Matrix(3, 1);\n    const nbPoints = points.columns;\n    let xSum = 0;\n    let ySum = 0;\n    for (let i = 0; i < nbPoints; i++) {\n        xSum += points.get(0, i);\n        ySum += points.get(1, i);\n    }\n    result.set(0, 0, xSum / nbPoints);\n    result.set(1, 0, ySum / nbPoints);\n    return result;\n}\n//# sourceMappingURL=getCentroid.js.map","import Matrix, { SingularValueDecomposition, determinant } from 'ml-matrix';\nimport { getCentroid } from './getCentroid';\n/**\n * Get best rotation and translation of source points to destination points.\n * Based on {@link https://nghiaho.com/?page_id=671}\n *\n * @param source - Source points as a 3xN matrix. Third dimension must be padded with ones.\n * @param destination - Destination points as a 3xN matrix. Third dimension must be padded with ones.\n * @returns The affine transformation.\n */\nexport function getAffineTransform(source, destination) {\n    if (source.columns !== destination.columns) {\n        throw new Error('Source and destination matrices should have same dimensions (same number of points).');\n    }\n    if (source.columns < 2) {\n        throw new Error('Matrices should contain at least two points for the algorithm to run properly.');\n    }\n    const sourceCentroid = getCentroid(source);\n    const destinationCentroid = getCentroid(destination);\n    const translatedSource = source.clone().subColumnVector(sourceCentroid);\n    const translatedDestination = destination\n        .clone()\n        .subColumnVector(destinationCentroid);\n    // computing scale\n    let ratioSum = 0;\n    const nbPoints = source.columns;\n    for (let i = 0; i < nbPoints; i++) {\n        const sourcePoint = translatedSource.getColumn(i);\n        const destinationPoint = translatedDestination.getColumn(i);\n        ratioSum +=\n            getDistanceToOrigin(destinationPoint) / getDistanceToOrigin(sourcePoint);\n    }\n    const scale = ratioSum / nbPoints;\n    const scaledSource = Matrix.mul(translatedSource, scale);\n    // computing rotation\n    const covarianceMatrix = scaledSource.mmul(translatedDestination.transpose());\n    const svd = new SingularValueDecomposition(covarianceMatrix);\n    const U = svd.leftSingularVectors;\n    const V = svd.rightSingularVectors;\n    let rotation = V.mmul(U.transpose());\n    if (determinant(rotation) < 0) {\n        const newV = V.mulColumn(2, -1);\n        rotation = newV.mmul(U.transpose());\n    }\n    let angleDegrees = (Math.atan2(rotation.get(1, 0), rotation.get(0, 0)) * 180) / Math.PI;\n    if (angleDegrees === -180) {\n        angleDegrees = 180;\n    }\n    // computing translation\n    const translation = Matrix.sub(destinationCentroid, Matrix.mul(rotation.mmul(sourceCentroid), scale));\n    return {\n        translation: {\n            x: translation.get(0, 0),\n            y: translation.get(1, 0),\n        },\n        rotation: angleDegrees,\n        scale,\n    };\n}\nfunction getDistanceToOrigin(point) {\n    return Math.hypot(point[0], point[1]);\n}\n//# sourceMappingURL=getAffineTransform.js.map","(function(){function a(d){for(var e=0,f=d.length-1,g=void 0,h=void 0,i=void 0,j=c(e,f);!0;){if(f<=e)return d[j];if(f==e+1)return d[e]>d[f]&&b(d,e,f),d[j];for(g=c(e,f),d[g]>d[f]&&b(d,g,f),d[e]>d[f]&&b(d,e,f),d[g]>d[e]&&b(d,g,e),b(d,g,e+1),h=e+1,i=f;!0;){do h++;while(d[e]>d[h]);do i--;while(d[i]>d[e]);if(i<h)break;b(d,h,i)}b(d,e,i),i<=j&&(e=h),i>=j&&(f=i-1)}}var b=function b(d,e,f){var _ref;return _ref=[d[f],d[e]],d[e]=_ref[0],d[f]=_ref[1],_ref},c=function c(d,e){return~~((d+e)/2)};'undefined'!=typeof module&&module.exports?module.exports=a:window.median=a})();\n","import { isAnyArray } from 'is-any-array';\nimport quickSelectMedian from 'median-quickselect';\n\nfunction median(input) {\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  return quickSelectMedian(input.slice());\n}\n\nexport { median as default };\n","const LOOP = 8;\nconst FLOAT_MUL = 1 / 16777216;\nconst sh1 = 15;\nconst sh2 = 18;\nconst sh3 = 11;\nfunction multiply_uint32(n, m) {\n    n >>>= 0;\n    m >>>= 0;\n    const nlo = n & 0xffff;\n    const nhi = n - nlo;\n    return (((nhi * m) >>> 0) + nlo * m) >>> 0;\n}\nexport default class XSadd {\n    constructor(seed = Date.now()) {\n        this.state = new Uint32Array(4);\n        this.init(seed);\n        this.random = this.getFloat.bind(this);\n    }\n    /**\n     * Returns a 32-bit integer r (0 <= r < 2^32)\n     */\n    getUint32() {\n        this.nextState();\n        return (this.state[3] + this.state[2]) >>> 0;\n    }\n    /**\n     * Returns a floating point number r (0.0 <= r < 1.0)\n     */\n    getFloat() {\n        return (this.getUint32() >>> 8) * FLOAT_MUL;\n    }\n    init(seed) {\n        if (!Number.isInteger(seed)) {\n            throw new TypeError('seed must be an integer');\n        }\n        this.state[0] = seed;\n        this.state[1] = 0;\n        this.state[2] = 0;\n        this.state[3] = 0;\n        for (let i = 1; i < LOOP; i++) {\n            this.state[i & 3] ^=\n                (i +\n                    multiply_uint32(1812433253, this.state[(i - 1) & 3] ^ ((this.state[(i - 1) & 3] >>> 30) >>> 0))) >>>\n                    0;\n        }\n        this.periodCertification();\n        for (let i = 0; i < LOOP; i++) {\n            this.nextState();\n        }\n    }\n    periodCertification() {\n        if (this.state[0] === 0 &&\n            this.state[1] === 0 &&\n            this.state[2] === 0 &&\n            this.state[3] === 0) {\n            this.state[0] = 88; // X\n            this.state[1] = 83; // S\n            this.state[2] = 65; // A\n            this.state[3] = 68; // D\n        }\n    }\n    nextState() {\n        let t = this.state[0];\n        t ^= t << sh1;\n        t ^= t >>> sh2;\n        t ^= this.state[3] << sh3;\n        this.state[0] = this.state[1];\n        this.state[1] = this.state[2];\n        this.state[2] = this.state[3];\n        this.state[3] = t;\n    }\n}\n","const PROB_TOLERANCE = 0.00000001;\nfunction randomChoice(values, options = {}, random = Math.random) {\n    const { size = 1, replace = false, probabilities } = options;\n    let valuesArr;\n    let cumSum;\n    if (typeof values === 'number') {\n        valuesArr = getArray(values);\n    }\n    else {\n        valuesArr = values.slice();\n    }\n    if (probabilities) {\n        if (!replace) {\n            throw new Error('choice with probabilities and no replacement is not implemented');\n        }\n        // check input is sane\n        if (probabilities.length !== valuesArr.length) {\n            throw new Error('the length of probabilities option should be equal to the number of choices');\n        }\n        cumSum = [probabilities[0]];\n        for (let i = 1; i < probabilities.length; i++) {\n            cumSum[i] = cumSum[i - 1] + probabilities[i];\n        }\n        if (Math.abs(1 - cumSum[cumSum.length - 1]) > PROB_TOLERANCE) {\n            throw new Error(`probabilities should sum to 1, but instead sums to ${cumSum[cumSum.length - 1]}`);\n        }\n    }\n    if (replace === false && size > valuesArr.length) {\n        throw new Error('size option is too large');\n    }\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        const index = randomIndex(valuesArr.length, random, cumSum);\n        result.push(valuesArr[index]);\n        if (!replace) {\n            valuesArr.splice(index, 1);\n        }\n    }\n    return result;\n}\nfunction getArray(n) {\n    const arr = [];\n    for (let i = 0; i < n; i++) {\n        arr.push(i);\n    }\n    return arr;\n}\nfunction randomIndex(n, random, cumSum) {\n    const rand = random();\n    if (!cumSum) {\n        return Math.floor(rand * n);\n    }\n    else {\n        let idx = 0;\n        while (rand > cumSum[idx]) {\n            idx++;\n        }\n        return idx;\n    }\n}\nexport default randomChoice;\n","// tslint:disable-next-line\nimport XSAdd from 'ml-xsadd';\nimport choice from './choice';\n/**\n * @classdesc Random class\n */\nexport default class Random {\n    /**\n     * @param [seedOrRandom=Math.random] - Control the random number generator used by the Random class instance. Pass a random number generator function with a uniform distribution over the half-open interval [0, 1[. If seed will pass it to ml-xsadd to create a seeded random number generator. If undefined will use Math.random.\n     */\n    constructor(seedOrRandom = Math.random) {\n        if (typeof seedOrRandom === 'number') {\n            const xsadd = new XSAdd(seedOrRandom);\n            this.randomGenerator = xsadd.random;\n        }\n        else {\n            this.randomGenerator = seedOrRandom;\n        }\n    }\n    choice(values, options) {\n        if (typeof values === 'number') {\n            return choice(values, options, this.randomGenerator);\n        }\n        return choice(values, options, this.randomGenerator);\n    }\n    /**\n     * Draw a random number from a uniform distribution on [0,1)\n     * @return The random number\n     */\n    random() {\n        return this.randomGenerator();\n    }\n    /**\n     * Draw a random integer from a uniform distribution on [low, high). If only low is specified, the number is drawn on [0, low)\n     * @param low - The lower bound of the uniform distribution interval.\n     * @param high - The higher bound of the uniform distribution interval.\n     */\n    randInt(low, high) {\n        if (high === undefined) {\n            high = low;\n            low = 0;\n        }\n        return low + Math.floor(this.randomGenerator() * (high - low));\n    }\n    /**\n     * Draw several random number from a uniform distribution on [0, 1)\n     * @param size - The number of number to draw\n     * @return - The list of drawn numbers.\n     */\n    randomSample(size) {\n        const result = [];\n        for (let i = 0; i < size; i++) {\n            result.push(this.random());\n        }\n        return result;\n    }\n}\n","/**\n * Get the minimal number of iterations of the RANSAC algorithm\n * required to have the given probability of having found the best model.\n *\n * @param probability - Desired probability (between 0 and 1).\n * @param outliersFraction - The estimated fraction of the data that is outliers (from 0 to 1).\n * @param sampleSize - The sample size for the RANSAC algoritm (number of values used for each random test).\n * @returns The minimal number of iterations.\n */\nexport function getNbIterations(probability, outliersFraction, sampleSize) {\n    const value = Math.log10(1 - probability) /\n        Math.log10(1 - (1 - outliersFraction) ** sampleSize);\n    return Math.ceil(value);\n}\n//# sourceMappingURL=getNbIterations.js.map","import arrayMedian from 'ml-array-median';\nimport Random from 'ml-random';\nimport { getNbIterations } from './utils/getNbIterations';\n/**\n * RANdom SAmple Consensus algorithm: find the best model matching the data and ignoring outliers.\n *\n * @see https://en.wikipedia.org/wiki/Random_sample_consensus\n * @param source - The source data.\n * @param destination - The destination data.\n * @param options - RANSAC options.\n * @returns The model parameters and the corresponding inliers.\n */\nexport function ransac(source, destination, options) {\n    let minNbInliers = 0;\n    if (options.minNbInliers) {\n        minNbInliers = getNbValues(options.minNbInliers, source.length);\n    }\n    else {\n        minNbInliers = source.length;\n    }\n    const { sampleSize = 2, threshold = 1, fitFunction, distanceFunction, modelFunction, seed = undefined, } = options;\n    if (source.length !== destination.length) {\n        throw new Error('source and destination data should have the same length');\n    }\n    let maxNbIterations;\n    if ('outliersFraction' in options) {\n        const { stopProbabilty = 0.99 } = options;\n        maxNbIterations = getNbIterations(stopProbabilty, options.outliersFraction, sampleSize);\n    }\n    else {\n        maxNbIterations = options.maxNbIterations ? options.maxNbIterations : 100;\n    }\n    let iteration = 0;\n    let bestNbInliers = 0;\n    let bestInliers = [];\n    let bestModelParameters = [];\n    let bestError = 0;\n    let seeds = [];\n    if (seed !== undefined) {\n        seeds = new Random(seed).choice(maxNbIterations, {\n            size: maxNbIterations,\n        });\n    }\n    while (iteration < maxNbIterations) {\n        iteration++;\n        let indices;\n        if (seed !== undefined) {\n            indices = new Random(seeds[iteration]).choice(source.length, {\n                size: sampleSize,\n            });\n        }\n        else {\n            indices = new Random().choice(source.length, {\n                size: sampleSize,\n            });\n        }\n        const srcSubset = [];\n        const dstSubset = [];\n        for (let i of indices) {\n            srcSubset.push(source[i]);\n            dstSubset.push(destination[i]);\n        }\n        const modelParameters = fitFunction(srcSubset, dstSubset);\n        const model = modelFunction(modelParameters);\n        let predictedDestination = [];\n        for (let value of source) {\n            predictedDestination.push(model(value));\n        }\n        let nbInliers = 0;\n        let inliers = [];\n        let distances = [];\n        let error = 0;\n        for (let i = 0; i < destination.length; i++) {\n            if (indices.includes(i)) {\n                nbInliers++;\n                inliers.push(i);\n                continue;\n            }\n            const distance = distanceFunction(destination[i], predictedDestination[i]);\n            distances.push(distance);\n            if (distance < threshold) {\n                nbInliers++;\n                inliers.push(i);\n            }\n        }\n        error = arrayMedian(distances);\n        if (nbInliers > bestNbInliers) {\n            bestNbInliers = nbInliers;\n            bestInliers = inliers; // potential bug with pointers?\n            bestModelParameters = modelParameters;\n            bestError = error;\n            if (nbInliers >= minNbInliers) {\n                return { modelParameters, inliers, nbIterations: iteration, error };\n            }\n        }\n    }\n    return {\n        modelParameters: bestModelParameters,\n        inliers: bestInliers,\n        nbIterations: maxNbIterations,\n        error: bestError,\n    };\n}\nfunction getNbValues(value, size) {\n    if (Number.isInteger(value)) {\n        return value;\n    }\n    else {\n        return Math.ceil(value * size);\n    }\n}\n//# sourceMappingURL=index.js.map","/**\n * Compute the squared distance from each keypoint to the other ones.\n * @param keypoints - Keypoints to process.\n * @returns Distance matrix.\n */\nexport function getDistanceMatrix(keypoints) {\n    const size = keypoints.length;\n    const matrix = new Array(size);\n    for (let i = 0; i < size; i++) {\n        matrix[i] = new Float64Array(size).fill(0);\n    }\n    for (let i = 0; i < size; i++) {\n        const point1 = keypoints[i].origin;\n        for (let j = i; j < size; j++) {\n            if (i === j) {\n                matrix[i][j] = 0;\n            }\n            const point2 = keypoints[j].origin;\n            const squaredDistance = (point1.row - point2.row) ** 2 + (point1.column - point2.column) ** 2;\n            matrix[i][j] = squaredDistance;\n            matrix[j][i] = squaredDistance;\n        }\n    }\n    return matrix;\n}\n//# sourceMappingURL=getDistanceMatrix.js.map","import { getDistanceMatrix } from './getDistanceMatrix.js';\n/**\n * Find all keypoints within radius from the current keypoint.\n * @param keypoints - Keypoints to process.\n * @param radius - Radius in which the surrounding keypoints should be.\n * @returns Array of keypoints within radius for each of the keypoints.\n */\nexport function getKeypointsInRadius(keypoints, radius) {\n    const size = keypoints.length;\n    const matrix = getDistanceMatrix(keypoints);\n    const squaredRadius = radius ** 2;\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        const currentIndices = [];\n        for (let j = 0; j < size; j++) {\n            if (i === j)\n                continue;\n            if (matrix[i][j] <= squaredRadius) {\n                currentIndices.push(j);\n            }\n        }\n        result.push(currentIndices);\n    }\n    return result;\n}\n//# sourceMappingURL=getKeypointsInRadius.js.map","import { getKeypointsInRadius } from './utils/getKeypointsInRadius.js';\n/**\n * Return the best keypoints within the given radius in pixels.\n * @param keypoints - Keypoints to process.\n * @param radius - Minimum distance in pixels between two keypoints.\n * @returns The filtered keypoints.\n */\nexport function getBestKeypointsInRadius(keypoints, radius = 5) {\n    const size = keypoints.length;\n    const keypointsInRadius = getKeypointsInRadius(keypoints, radius);\n    const toIgnore = new Uint8Array(size).fill(0);\n    for (let i = 0; i < size; i++) {\n        const keypoint = keypoints[i];\n        for (const secondKeypointIndex of keypointsInRadius[i]) {\n            const secondKeypoint = keypoints[secondKeypointIndex];\n            if (keypoint.score < secondKeypoint.score) {\n                toIgnore[i] = 1;\n                continue;\n            }\n        }\n    }\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        if (!toIgnore[i]) {\n            result.push(keypoints[i]);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=getBestKeypointsInRadius.js.map","/**\n * Calculates a new point that is the difference p1 - p2.\n * @param p1 - First point.\n * @param p2 - Second Point.\n * @returns Difference between the two points.\n */\nexport function difference(p1, p2) {\n    return { column: p1.column - p2.column, row: p1.row - p2.row };\n}\n/**\n * Calculates a new point that is the sum p1 + p2.\n * @param p1 - First point.\n * @param p2 - Second Point.\n * @returns Sum of the two points.\n */\nexport function sum(p1, p2) {\n    return { column: p1.column + p2.column, row: p1.row + p2.row };\n}\n/**\n * Normalize a point (more precisely the vector from the origin to the point).\n * @param point - Point to normalize.\n * @returns - Normalized point.\n */\nexport function normalize(point) {\n    const length = Math.hypot(point.column, point.row);\n    return { column: point.column / length, row: point.row / length };\n}\n/**\n * Rotate an array of points by an angle in radians.\n * The rotation is clockwise and the reference is (0,0).\n * @param radians - Angle in radians.\n * @param points - Source points.\n * @returns The points after rotation.\n */\nexport function rotate(radians, points) {\n    const results = [];\n    const cos = Math.cos(radians);\n    const sin = Math.sin(radians);\n    for (const point of points) {\n        results.push({\n            column: cos * point.column - sin * point.row,\n            row: sin * point.column + cos * point.row,\n        });\n    }\n    return results;\n}\n/**\n * Dot product of 2 points assuming vectors starting from (0,0).\n * @param p1 - First point.\n * @param p2 - Second point.\n * @returns Dot product between the two vectors.\n */\nexport function dot(p1, p2) {\n    return p1.column * p2.column + p1.row * p2.row;\n}\n/**\n * Round the coordinates of the point.\n * @param point - The point.\n * @returns Rounded coordinates of the point.\n */\nexport function round(point) {\n    return { column: Math.round(point.column), row: Math.round(point.row) };\n}\n/**\n * Sort an array of points by column then row.\n * @param points - Array of points to sort.\n * @returns Sorted points.\n */\nexport function sortByColumnRow(points) {\n    const sortedPoints = points.slice();\n    sortedPoints.sort((point1, point2) => {\n        if (point1.column < point2.column)\n            return -1;\n        if (point1.column > point2.column)\n            return 1;\n        return point1.row - point2.row;\n    });\n    return sortedPoints;\n}\n//# sourceMappingURL=points.js.map","import { difference, normalize } from '../../utils/geometry/points.js';\n/**\n * The angle in radians of a vector relatively to the x axis.\n * The angle is positive in the clockwise direction.\n * This is an optimized version because it assumes that one of\n * the points is on the line y = 0.\n * @param p1 - First point.\n * @param p2 - Second point.\n * @returns Rotation angle in radians to make the line horizontal. -π <= angle <= π.\n */\nexport function getAngle(p1, p2) {\n    const diff = difference(p2, p1);\n    const vector = normalize(diff);\n    const angle = Math.acos(vector.column);\n    if (vector.row < 0)\n        return -angle;\n    return angle;\n}\n/**\n * Compute the clockwise angle in radians between the x-axis and the segment p1-p2.\n * @param p1 - First point.\n * @param p2 - Second point.\n * @returns Clockwise angle between x-axis and the segment.\n */\nexport function getClockwiseAngle(p1, p2) {\n    const diff = difference(p2, p1);\n    const vector = normalize(diff);\n    const atan = -Math.atan(vector.row / vector.column);\n    if (vector.column < 0) {\n        if (vector.row < 0) {\n            return atan - Math.PI;\n        }\n        else {\n            return atan + Math.PI;\n        }\n    }\n    else {\n        return atan;\n    }\n}\n//# sourceMappingURL=getAngle.js.map","import { difference, dot, normalize } from './points.js';\n/**\n * Convert radians to degrees.\n * @param radians - Angle in radians.\n * @returns  Angle in degrees.\n */\nexport function toDegrees(radians) {\n    return (radians * 180) / Math.PI;\n}\n/**\n * Returns the angle between 3 points. The first one is the point where the angle is.\n * @param origin - Origin where the angle has to be measured.\n * @param p1 - First point.\n * @param p2 - Second point.\n * @returns The angle in radians.\n */\nexport function angle(origin, p1, p2) {\n    const v1 = normalize(difference(p1, origin));\n    const v2 = normalize(difference(p2, origin));\n    const dotProduct = dot(v1, v2);\n    // TODO this code is not correct because it may return the opposite angle\n    return Math.acos(dotProduct);\n}\n//# sourceMappingURL=angles.js.map","/**\n * Compute the radius of the circle of given size.\n * @param size - Size of the circle.\n * @returns The radius.\n */\nexport function getRadius(size) {\n    if (size % 2 !== 1 || size < 0) {\n        throw new RangeError('size must be positive and odd');\n    }\n    return (size - 1) / 2;\n}\n//# sourceMappingURL=getRadius.js.map","/**\n * Check that a point is not too close to the border of the image.\n * @param image - Image to process.\n * @param point - The interest point.\n * @param distance - The minimum distance to the border required.\n * @returns Whether the point is far enough from the border.\n */\nexport function checkBorderDistance(image, point, distance) {\n    return (point.column >= distance &&\n        point.row >= distance &&\n        image.width - point.column > distance &&\n        image.height - point.row > distance);\n}\n//# sourceMappingURL=checkBorderDistance.js.map","const t=Symbol.for(\"@ts-pattern/matcher\"),e=Symbol.for(\"@ts-pattern/isVariadic\"),n=\"@ts-pattern/anonymous-select-key\",r=t=>Boolean(t&&\"object\"==typeof t),i=e=>e&&!!e[t],o=(n,s,c)=>{if(i(n)){const e=n[t](),{matched:r,selections:i}=e.match(s);return r&&i&&Object.keys(i).forEach(t=>c(t,i[t])),r}if(r(n)){if(!r(s))return!1;if(Array.isArray(n)){if(!Array.isArray(s))return!1;let t=[],r=[],u=[];for(const o of n.keys()){const s=n[o];i(s)&&s[e]?u.push(s):u.length?r.push(s):t.push(s)}if(u.length){if(u.length>1)throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");if(s.length<t.length+r.length)return!1;const e=s.slice(0,t.length),n=0===r.length?[]:s.slice(-r.length),i=s.slice(t.length,0===r.length?Infinity:-r.length);return t.every((t,n)=>o(t,e[n],c))&&r.every((t,e)=>o(t,n[e],c))&&(0===u.length||o(u[0],i,c))}return n.length===s.length&&n.every((t,e)=>o(t,s[e],c))}return Reflect.ownKeys(n).every(e=>{const r=n[e];return(e in s||i(u=r)&&\"optional\"===u[t]().matcherType)&&o(r,s[e],c);var u})}return Object.is(s,n)},s=e=>{var n,o,u;return r(e)?i(e)?null!=(n=null==(o=(u=e[t]()).getSelectionKeys)?void 0:o.call(u))?n:[]:Array.isArray(e)?c(e,s):c(Object.values(e),s):[]},c=(t,e)=>t.reduce((t,n)=>t.concat(e(n)),[]);function u(...t){if(1===t.length){const[e]=t;return t=>o(e,t,()=>{})}if(2===t.length){const[e,n]=t;return o(e,n,()=>{})}throw new Error(`isMatching wasn't given the right number of arguments: expected 1 or 2, received ${t.length}.`)}function a(t){return Object.assign(t,{optional:()=>h(t),and:e=>d(t,e),or:e=>y(t,e),select:e=>void 0===e?v(t):v(e,t)})}function l(t){return Object.assign((t=>Object.assign(t,{[Symbol.iterator](){let n=0;const r=[{value:Object.assign(t,{[e]:!0}),done:!1},{done:!0,value:void 0}];return{next:()=>{var t;return null!=(t=r[n++])?t:r.at(-1)}}}}))(t),{optional:()=>l(h(t)),select:e=>l(void 0===e?v(t):v(e,t))})}function h(e){return a({[t]:()=>({match:t=>{let n={};const r=(t,e)=>{n[t]=e};return void 0===t?(s(e).forEach(t=>r(t,void 0)),{matched:!0,selections:n}):{matched:o(e,t,r),selections:n}},getSelectionKeys:()=>s(e),matcherType:\"optional\"})})}const f=(t,e)=>{for(const n of t)if(!e(n))return!1;return!0},g=(t,e)=>{for(const[n,r]of t.entries())if(!e(r,n))return!1;return!0},m=(t,e)=>{const n=Reflect.ownKeys(t);for(const r of n)if(!e(r,t[r]))return!1;return!0};function d(...e){return a({[t]:()=>({match:t=>{let n={};const r=(t,e)=>{n[t]=e};return{matched:e.every(e=>o(e,t,r)),selections:n}},getSelectionKeys:()=>c(e,s),matcherType:\"and\"})})}function y(...e){return a({[t]:()=>({match:t=>{let n={};const r=(t,e)=>{n[t]=e};return c(e,s).forEach(t=>r(t,void 0)),{matched:e.some(e=>o(e,t,r)),selections:n}},getSelectionKeys:()=>c(e,s),matcherType:\"or\"})})}function p(e){return{[t]:()=>({match:t=>({matched:Boolean(e(t))})})}}function v(...e){const r=\"string\"==typeof e[0]?e[0]:void 0,i=2===e.length?e[1]:\"string\"==typeof e[0]?void 0:e[0];return a({[t]:()=>({match:t=>{let e={[null!=r?r:n]:t};return{matched:void 0===i||o(i,t,(t,n)=>{e[t]=n}),selections:e}},getSelectionKeys:()=>[null!=r?r:n].concat(void 0===i?[]:s(i))})})}function b(t){return!0}function w(t){return\"number\"==typeof t}function S(t){return\"string\"==typeof t}function j(t){return\"bigint\"==typeof t}const K=a(p(b)),O=a(p(b)),E=K,x=t=>Object.assign(a(t),{startsWith:e=>{return x(d(t,(n=e,p(t=>S(t)&&t.startsWith(n)))));var n},endsWith:e=>{return x(d(t,(n=e,p(t=>S(t)&&t.endsWith(n)))));var n},minLength:e=>x(d(t,(t=>p(e=>S(e)&&e.length>=t))(e))),length:e=>x(d(t,(t=>p(e=>S(e)&&e.length===t))(e))),maxLength:e=>x(d(t,(t=>p(e=>S(e)&&e.length<=t))(e))),includes:e=>{return x(d(t,(n=e,p(t=>S(t)&&t.includes(n)))));var n},regex:e=>{return x(d(t,(n=e,p(t=>S(t)&&Boolean(t.match(n))))));var n}}),A=x(p(S)),N=t=>Object.assign(a(t),{between:(e,n)=>N(d(t,((t,e)=>p(n=>w(n)&&t<=n&&e>=n))(e,n))),lt:e=>N(d(t,(t=>p(e=>w(e)&&e<t))(e))),gt:e=>N(d(t,(t=>p(e=>w(e)&&e>t))(e))),lte:e=>N(d(t,(t=>p(e=>w(e)&&e<=t))(e))),gte:e=>N(d(t,(t=>p(e=>w(e)&&e>=t))(e))),int:()=>N(d(t,p(t=>w(t)&&Number.isInteger(t)))),finite:()=>N(d(t,p(t=>w(t)&&Number.isFinite(t)))),positive:()=>N(d(t,p(t=>w(t)&&t>0))),negative:()=>N(d(t,p(t=>w(t)&&t<0)))}),P=N(p(w)),k=t=>Object.assign(a(t),{between:(e,n)=>k(d(t,((t,e)=>p(n=>j(n)&&t<=n&&e>=n))(e,n))),lt:e=>k(d(t,(t=>p(e=>j(e)&&e<t))(e))),gt:e=>k(d(t,(t=>p(e=>j(e)&&e>t))(e))),lte:e=>k(d(t,(t=>p(e=>j(e)&&e<=t))(e))),gte:e=>k(d(t,(t=>p(e=>j(e)&&e>=t))(e))),positive:()=>k(d(t,p(t=>j(t)&&t>0))),negative:()=>k(d(t,p(t=>j(t)&&t<0)))}),T=k(p(j)),B=a(p(function(t){return\"boolean\"==typeof t})),_=a(p(function(t){return\"symbol\"==typeof t})),W=a(p(function(t){return null==t})),$=a(p(function(t){return null!=t}));var z={__proto__:null,matcher:t,optional:h,array:function(...e){return l({[t]:()=>({match:t=>{if(!Array.isArray(t))return{matched:!1};if(0===e.length)return{matched:!0};const n=e[0];let r={};if(0===t.length)return s(n).forEach(t=>{r[t]=[]}),{matched:!0,selections:r};const i=(t,e)=>{r[t]=(r[t]||[]).concat([e])};return{matched:t.every(t=>o(n,t,i)),selections:r}},getSelectionKeys:()=>0===e.length?[]:s(e[0])})})},set:function(...e){return a({[t]:()=>({match:t=>{if(!(t instanceof Set))return{matched:!1};let n={};if(0===t.size)return{matched:!0,selections:n};if(0===e.length)return{matched:!0};const r=(t,e)=>{n[t]=(n[t]||[]).concat([e])},i=e[0];return{matched:f(t,t=>o(i,t,r)),selections:n}},getSelectionKeys:()=>0===e.length?[]:s(e[0])})})},map:function(...e){return a({[t]:()=>({match:t=>{if(!(t instanceof Map))return{matched:!1};let n={};if(0===t.size)return{matched:!0,selections:n};const r=(t,e)=>{n[t]=(n[t]||[]).concat([e])};if(0===e.length)return{matched:!0};var i;if(1===e.length)throw new Error(`\\`P.map\\` wasn't given enough arguments. Expected (key, value), received ${null==(i=e[0])?void 0:i.toString()}`);const[s,c]=e;return{matched:g(t,(t,e)=>{const n=o(s,e,r),i=o(c,t,r);return n&&i}),selections:n}},getSelectionKeys:()=>0===e.length?[]:[...s(e[0]),...s(e[1])]})})},record:function(...e){return a({[t]:()=>({match:t=>{if(null===t||\"object\"!=typeof t||Array.isArray(t))return{matched:!1};var n;if(0===e.length)throw new Error(`\\`P.record\\` wasn't given enough arguments. Expected (value) or (key, value), received ${null==(n=e[0])?void 0:n.toString()}`);let r={};const i=(t,e)=>{r[t]=(r[t]||[]).concat([e])},[s,c]=1===e.length?[A,e[0]]:e;return{matched:m(t,(t,e)=>{const n=\"string\"!=typeof t||Number.isNaN(Number(t))?null:Number(t),r=null!==n&&o(s,n,i),u=o(s,t,i),a=o(c,e,i);return(u||r)&&a}),selections:r}},getSelectionKeys:()=>0===e.length?[]:[...s(e[0]),...s(e[1])]})})},intersection:d,union:y,not:function(e){return a({[t]:()=>({match:t=>({matched:!o(e,t,()=>{})}),getSelectionKeys:()=>[],matcherType:\"not\"})})},when:p,select:v,any:K,unknown:O,_:E,string:A,number:P,bigint:T,boolean:B,symbol:_,nullish:W,nonNullable:$,instanceOf:function(t){return a(p(function(t){return e=>e instanceof t}(t)))},shape:function(t){return a(p(u(t)))}};class I extends Error{constructor(t){let e;try{e=JSON.stringify(t)}catch(n){e=t}super(`Pattern matching error: no pattern matches value ${e}`),this.input=void 0,this.input=t}}const L={matched:!1,value:void 0};function M(t){return new R(t,L)}class R{constructor(t,e){this.input=void 0,this.state=void 0,this.input=t,this.state=e}with(...t){if(this.state.matched)return this;const e=t[t.length-1],r=[t[0]];let i;3===t.length&&\"function\"==typeof t[1]?i=t[1]:t.length>2&&r.push(...t.slice(1,t.length-1));let s=!1,c={};const u=(t,e)=>{s=!0,c[t]=e},a=!r.some(t=>o(t,this.input,u))||i&&!Boolean(i(this.input))?L:{matched:!0,value:e(s?n in c?c[n]:c:this.input,this.input)};return new R(this.input,a)}when(t,e){if(this.state.matched)return this;const n=Boolean(t(this.input));return new R(this.input,n?{matched:!0,value:e(this.input,this.input)}:L)}otherwise(t){return this.state.matched?this.state.value:t(this.input)}exhaustive(t=F){return this.state.matched?this.state.value:t(this.input)}run(){return this.exhaustive()}returnType(){return this}narrow(){return this}}function F(t){throw new I(t)}export{I as NonExhaustiveError,z as P,z as Pattern,u as isMatching,M as match};\n//# sourceMappingURL=index.js.map\n","(function(N,J){typeof exports==\"object\"&&typeof module<\"u\"?J(exports):typeof define==\"function\"&&define.amd?define([\"exports\"],J):(N=typeof globalThis<\"u\"?globalThis:N||self,J(N.bresenham={}))})(this,(function(N){\"use strict\";function J(f,a,o,t,e){const h=Math.abs(o-f),r=f<o?1:-1,l=-Math.abs(t-a),M=a<t?1:-1;let i=h+l,n;for(;;){if(e(f,a),n=2*i,n>=l){if(f===o)break;i+=l,f+=r}if(n<=h){if(a===t)break;i+=h,a+=M}}}function U(f,a,o,t,e){const h=f<o?1:-1,r=a<t?1:-1;let l,M=Math.abs(o-f),i=Math.abs(t-a),n=M*M+i*i,c=n===0?1:1/Math.sqrt(n);for(M*=c,i*=c,n=M-i;;){if(e(f,a,Math.abs(n-(M+i))>>16),c=n,l=f,2*c>=-M){if(f===o)break;c+i<16711680&&e(f,a+r,c+i>>16),n-=i,f+=h}if(2*c<=i){if(a===t)break;M-c<16711680&&e(l+h,a,M-c>>16),n+=M,a+=r}}}function w(f,a,o,t,e,h){let r=Math.abs(o-f),l=f<o?1:-1,M=Math.abs(t-a),i=a<t?1:-1,n=r-M,c,q,d,b=r+M==0?1:Math.sqrt(r*r+M*M);for(e=(e+1)/2;;){if(h(f,a,Math.max(0,255*(Math.abs(n-r+M)/b-e+1))),c=n,q=f,2*c>=-r){for(c+=M,d=a;c<b*e&&(t!=d||r>M);c+=r)h(f,d+=i,Math.max(0,255*(Math.abs(c)/b-e+1)));if(f==o)break;c=n,n-=M,f+=l}if(2*c<=M){for(c=r-c;c<b*e&&(o!=q||r<M);c+=M)h(q+=l,a,Math.max(0,255*(Math.abs(c)/b-e+1)));if(a==t)break;n+=r,a+=i}}}function I(f,a=\"assert error\"){if(!f)throw new Error(a)}function P(f,a,o,t,e,h,r,l){var M=f-2*o+e,i=a-2*t+h,n=f-o,c=a-t,q,d,b;I(r>=0,\"width is negative\"),n*(e-o)>0&&(c*(h-t)>0&&Math.abs(n*i)>Math.abs(c*M)&&(f=e,e=n+o,a=h,h=c+t),f==e||r==1?d=(f-o)/M:(b=Math.sqrt(4*r*r*(f-o)*(e-o)+(e-f)*(e-f)),o<f&&(b=-b),d=(2*r*(f-o)-f+e+b)/(2*(1-r)*(e-f))),b=1/(2*d*(1-d)*(r-1)+1),n=(d*d*(f-2*r*o+e)+2*d*(r*o-f)+f)*b,c=(d*d*(a-2*r*t+h)+2*d*(r*t-a)+a)*b,q=d*(r-1)+1,q*=q*b,r=((1-d)*(r-1)+1)*Math.sqrt(b),M=Math.floor(n+.5),i=Math.floor(c+.5),c=(n-f)*(t-a)/(o-f)+a,H(f,a,M,Math.floor(c+.5),M,i,q,l),c=(n-e)*(t-h)/(o-e)+h,t=Math.floor(c+.5),f=o=M,a=i),(a-t)*(h-t)>0&&(a==h||r==1?d=(a-t)/(a-2*t+h):(b=Math.sqrt(4*r*r*(a-t)*(h-t)+(h-a)*(h-a)),t<a&&(b=-b),d=(2*r*(a-t)-a+h+b)/(2*(1-r)*(h-a))),b=1/(2*d*(1-d)*(r-1)+1),n=(d*d*(f-2*r*o+e)+2*d*(r*o-f)+f)*b,c=(d*d*(a-2*r*t+h)+2*d*(r*t-a)+a)*b,q=d*(r-1)+1,q*=q*b,r=((1-d)*(r-1)+1)*Math.sqrt(b),M=Math.floor(n+.5),i=Math.floor(c+.5),n=(o-f)*(c-a)/(t-a)+f,H(f,a,Math.floor(n+.5),i,M,i,q,l),n=(o-e)*(c-h)/(t-h)+e,o=Math.floor(n+.5),f=M,a=t=i),H(f,a,o,t,e,h,r*r,l)}function H(f,a,o,t,e,h,r,l){var M=e-o,i=h-t,n=f-e,c=a-h,q=f-o,d=a-t,b=q*i+d*M,s=q*i-d*M,u;if(I(q*M<=0&&d*i<=0,\"sign of gradient must not change\"),s!=0&&r>0){if(M*M+i*i>q*q+d*d&&(e=f,f-=n,h=a,a-=c,s=-s),q=2*(4*r*M*q+n*n),d=2*(4*r*i*d+c*c),M=f<e?1:-1,i=a<h?1:-1,b=-2*M*i*(2*r*b+n*c),s*M*i<0&&(q=-q,d=-d,b=-b,s=-s),n=4*r*(o-f)*i*s+q/2+b,c=4*r*(a-t)*M*s+d/2+b,r<.5&&(c>b||n<b)){s=(r+1)/2,r=Math.sqrt(r),b=1/(r+1),M=Math.floor((f+2*r*o+e)*b/2+.5),i=Math.floor((a+2*r*t+h)*b/2+.5),n=Math.floor((r*o+f)*b+.5),c=Math.floor((t*r+a)*b+.5),H(f,a,n,c,M,i,s,l),n=Math.floor((r*o+e)*b+.5),c=Math.floor((t*r+h)*b+.5),H(M,i,n,c,e,h,s,l);return}u=n+c-b;do{if(l(f,a),f==e&&a==h)return;o=2*u>c?1:0,t=2*(u+d)<-c?1:0,(2*u<n||t)&&(a+=i,c+=b,u+=n+=q),(2*u>n||o)&&(f+=M,n+=b,u+=c+=d)}while(c<=b&&n>=b)}J(f,a,e,h,l)}function V(f,a,o,t,e,h,r,l){var M=e-o,i=h-t,n=f-e,c=a-h,q=f-o,d=a-t,b=q*i+d*M,s=q*i-d*M,u,z,j;if(I(q*M<=0&&d*i<=0),s!=0&&r>0){if(M*M+i*i>q*q+d*d&&(e=f,f-=n,h=a,a-=c,s=-s),q=2*(4*r*M*q+n*n),d=2*(4*r*i*d+c*c),M=f<e?1:-1,i=a<h?1:-1,b=-2*M*i*(2*r*b+n*c),s*M*i<0&&(q=-q,d=-d,s=-s,b=-b),n=4*r*(o-f)*i*s+q/2+b,c=4*r*(a-t)*M*s+d/2+b,r<.5&&c>n)return s=(r+1)/2,r=Math.sqrt(r),b=1/(r+1),M=Math.floor((f+2*r*o+e)*b/2+.5),i=Math.floor((a+2*r*t+h)*b/2+.5),n=Math.floor((r*o+f)*b+.5),c=Math.floor((t*r+a)*b+.5),V(f,a,n,c,M,i,s,l),n=Math.floor((r*o+e)*b+.5),c=Math.floor((t*r+h)*b+.5),V(M,i,n,c,e,h,s,l);u=n+c-b;do{if(s=Math.min(n-b,b-c),z=Math.max(n-b,b-c),z+=2*z*s*s/(4*z*z+s*s),o=255*Math.abs(u-n-c+b)/z,o<256&&l(f,a,o),j=2*u+c<0){if(a==h)return;n-u<z&&l(f+M,a,255*Math.abs(n-u)/z)}if(2*u+n>0){if(f==e)return;u-c<z&&l(f,a+i,255*Math.abs(u-c)/z),f+=M,n+=b,u+=c+=d}j&&(a+=i,c+=b,u+=n+=q)}while(c<n)}U(f,a,e,h,l)}function y(f,a,o,t,e){let h=-o,r=0,l=t*t,M=h*(2*l+h)+l;do e(f-h,a+r),e(f+h,a+r),e(f+h,a-r),e(f-h,a-r),l=2*M,l>=(h*2+1)*t*t&&(M+=(++h*2+1)*t*t),l<=(r*2+1)*o*o&&(M+=(++r*2+1)*o*o);while(h<=0);for(;r++<t;)e(f,a+r),e(f,a-r)}function x(f,a,o,t,e,h){let r=o*o,l=t*t;const M=Math.sin(e);let i=(r-l)*M;r=Math.sqrt(r-i*M),l=Math.sqrt(l+i*M),o=r+.5,t=l+.5,i=i*o*t/(r*l),Y(f-o,a-t,f+o,a+t,4*i*Math.cos(e),h)}function Y(f,a,o,t,e,h){let r=o-f,l=t-a,M=r*l;if(e===0)return Z(f,a,o,t,h);M!==0&&(M=(M-e)/(M+M)),I(M<=1&&M>=0,\"limit angle to |zd|<=xd*yd\"),r=Math.floor(r*M+.5),l=Math.floor(l*M+.5),H(f,a+l,f,a,f+r,a,1-M,h),H(f,a+l,f,t,o-r,t,M,h),H(o,t-l,o,t,o-r,t,1-M,h),H(o,t-l,o,a,f+r,a,M,h)}function Z(f,a,o,t,e){let h=Math.abs(o-f),r=Math.abs(t-a),l=r&1,M=4*(1-h)*r*r,i=4*(l+1)*h*h,n=M+i+l*h*h,c;f>o&&(f=o,o+=h),a>t&&(a=t),a+=(r+1)/2,t=a-l,h=8*h*h,l=8*r*r;do e(o,a),e(f,a),e(f,t),e(o,t),c=2*n,c<=i&&(a++,t--,n+=i+=h),(c>=M||2*n>i)&&(f++,o--,n+=M+=l);while(f<=o);for(;a-t<=r;)e(f-1,a),e(o+1,a++),e(f-1,t),e(o+1,t--)}function aa(f,a,o,t){var e=-o,h=0,r=2-2*o;do t(f-e,a+h),t(f-h,a-e),t(f+e,a-h),t(f+h,a+e),o=r,o<=h&&(r+=++h*2+1),(o>e||r>h)&&(r+=++e*2+1);while(e<0)}function fa(f,a,o,t){var e=-o,h=0,r,l,M,i=2-2*o;o=1-i;do r=255*Math.abs(i-2*(e+h)-2)/o,t(f-e,a+h,r),t(f-h,a-e,r),t(f+e,a-h,r),t(f+h,a+e,r),M=i,l=e,i+h>0&&(r=255*(i-2*e-1)/o,r<256&&(t(f-e,a+h+1,r),t(f-h-1,a-e,r),t(f+e,a-h-1,r),t(f+h+1,a+e,r)),i+=++e*2+1),M+l<=0&&(r=255*(2*h+3-M)/o,r<256&&(t(f-l-1,a+h,r),t(f-h,a-l-1,r),t(f+l+1,a-h,r),t(f+h,a+l+1,r)),i+=++h*2+1);while(e<0)}function ta(f,a,o,t,e,h,r){var l=f-o,M=a-t,i=f-2*o+e,n;l*(e-o)>0&&(M*(h-t)>0&&Math.abs((a-2*t+h)/i*l)>Math.abs(M)&&(f=e,e=l+o,a=h,h=M+t),i=(f-o)/i,n=(1-i)*((1-i)*a+2*i*t)+i*i*h,i=(f*e-o*o)*i/(f-o),l=Math.floor(i+.5),M=Math.floor(n+.5),n=(t-a)*(i-f)/(o-f)+a,L(f,a,l,Math.floor(n+.5),l,M,r),n=(t-h)*(i-e)/(o-e)+h,f=o=l,a=M,t=Math.floor(n+.5)),(a-t)*(h-t)>0&&(i=a-2*t+h,i=(a-t)/i,n=(1-i)*((1-i)*f+2*i*o)+i*i*e,i=(a*h-t*t)*i/(a-t),l=Math.floor(n+.5),M=Math.floor(i+.5),n=(o-f)*(i-a)/(t-a)+f,L(f,a,Math.floor(n+.5),M,l,M,r),n=(o-e)*(i-h)/(t-h)+e,f=l,o=Math.floor(n+.5),a=t=M),L(f,a,o,t,e,h,r)}function L(f,a,o,t,e,h,r){var l=e-o,M=h-t,i=f-o,n=a-t,c,q,d,b,s=i*M-n*l;if(I(i*l<=0&&n*M<=0,\"sign of gradient must not change\"),l*l+M*M>i*i+n*n&&(e=f,f=l+o,h=a,a=M+t,s=-s),s!=0){i+=l,i*=l=f<e?1:-1,n+=M,n*=M=a<h?1:-1,c=2*i*n,i*=i,n*=n,s*l*M<0&&(i=-i,n=-n,c=-c,s=-s),q=4*M*s*(o-f)+i-c,d=4*l*s*(a-t)+n-c,i+=i,n+=n,b=q+d+c;do{if(r(f,a),f==e&&a==h)return;t=+(2*b<q),2*b>d&&(f+=l,q-=c,b+=d+=n),t&&(a+=M,d-=c,b+=q+=i)}while(d<0&&q>0)}J(f,a,e,h,r)}function ia(f,a,o,t,e,h,r){var l=f-o,M=a-t,i=f-2*o+e,n;l*(e-o)>0&&(M*(h-t)>0&&Math.abs((a-2*t+h)/i*l)>Math.abs(M)&&(f=e,e=l+o,a=h,h=M+t),i=(f-o)/i,n=(1-i)*((1-i)*a+2*i*t)+i*i*h,i=(f*e-o*o)*i/(f-o),l=Math.floor(i+.5),M=Math.floor(n+.5),n=(t-a)*(i-f)/(o-f)+a,Q(f,a,l,Math.floor(n+.5),l,M,r),n=(t-h)*(i-e)/(o-e)+h,f=o=l,a=M,t=Math.floor(n+.5)),(a-t)*(h-t)>0&&(i=a-2*t+h,i=(a-t)/i,n=(1-i)*((1-i)*f+2*i*o)+i*i*e,i=(a*h-t*t)*i/(a-t),l=Math.floor(n+.5),M=Math.floor(i+.5),n=(o-f)*(i-a)/(t-a)+f,Q(f,a,Math.floor(n+.5),M,l,M,r),n=(o-e)*(i-h)/(t-h)+e,f=l,o=Math.floor(n+.5),a=t=M),Q(f,a,o,t,e,h,r)}function Q(f,a,o,t,e,h,r){var l=e-o,M=h-t,i=f-o,n=a-t,c,q,d,b,s,u=i*M-n*l;if(l*l+M*M>i*i+n*n&&(e=f,f=l+o,h=a,a=M+t,u=-u),u!=0){i+=l,i*=l=f<e?1:-1,n+=M,n*=M=a<h?1:-1,c=2*i*n,i*=i,n*=n,u*l*M<0&&(i=-i,n=-n,c=-c,u=-u),q=4*M*(o-f)*u+i-c,d=4*l*(a-t)*u+n-c,i+=i,n+=n,b=q+d+c;do{if(u=Math.min(q+c,-c-d),s=Math.max(q+c,-c-d),s+=2*s*u*u/(4*s*s+u*u),r(f,a,255*Math.abs(b-q-d-c)/s),f==e||a==h)break;o=f,u=q-b,t=+(2*b+d<0),2*b+q>0&&(b-d<s&&r(f,a+M,255*Math.abs(b-d)/s),f+=l,q-=c,b+=d+=n),t&&(u<s&&r(o+l,a,255*Math.abs(u)/s),a+=M,d-=c,b+=q+=i)}while(d<q)}U(f,a,e,h,r)}function _(f,a,o,t,e,h,r,l,M){var i,n,c,q=1;let d=f<r?1:-1,b=a<l?1:-1,s=-Math.abs(f+o-e-r),u=s-4*d*(o-e),z=d*(f-o-e+r),j=-Math.abs(a+t-h-l),B=j-4*b*(t-h),R=b*(a-t-h+l),p,S,W,T,G,E,O,v,g,k,F,D=.01;if(I((o-f)*(e-r)<D&&((r-f)*(o-e)<D||z*z<u*s+D),\"slope change\"),I((t-a)*(h-l)<D&&((l-a)*(t-h)<D||R*R<B*j+D),\"slope change\"),u==0&&B==0)return d=Math.floor((3*o-f+1)/2),b=Math.floor((3*t-a+1)/2),L(f,a,d,b,r,l,M);o=(o-f)*(o-f)+(t-a)*(t-a)+1,e=(e-r)*(e-r)+(h-l)*(h-l)+1;do{p=u*R-z*B,S=u*j-s*B,W=z*j-s*R,k=p*(p+S-3*W)+S*S,i=k>0?1:Math.sqrt(1+1024/o),p*=i,S*=i,W*=i,k*=i*i,E=9*(p+S+W)/8,T=8*(u-B),v=27*(8*p*(R*R-B*j)+k*(B+2*R+j))/64-B*B*(E-B),g=27*(8*p*(z*z-u*s)-k*(u+2*z+s))/64-u*u*(E+u),G=3*(3*p*(3*R*R-B*B-2*B*j)-B*(3*S*(B+R)+B*T))/4,O=3*(3*p*(3*z*z-u*u-2*u*s)-u*(3*S*(u+z)+u*T))/4,E=u*B*(6*p+6*S-3*W+T),S=B*B,T=u*u,E=3*(E+9*i*(T*R*j-z*s*S)-18*z*R*p)/8,k<0&&(v=-v,g=-g,G=-G,O=-O,E=-E,S=-S,T=-T),p=6*B*S,S=-6*u*S,W=6*B*T,T=-6*u*T,v+=E,k=v+g,g+=E;a:for(F=E,n=c=i;f!=r&&a!=l;){M(f,a);do{if(v>F||g<F)break a;t=2*k-g,2*k>=v&&(n--,k+=v+=G,g+=E+=S,O+=W,G+=p),t<=0&&(c--,k+=g+=O,v+=E+=W,G+=S,O+=T)}while(n>0&&c>0);2*n<=i&&(f+=d,n+=i),2*c<=i&&(a+=b,c+=i),F==E&&v<0&&g>0&&(F=D)}G=f,f=r,r=G,d=-d,z=-z,O=a,a=l,l=O,b=-b,R=-R,o=e}while(q--);J(f,a,r,l,M)}function $(f,a,o,t,e,h,r,l,M){let i,n,c,q=1,d=f<r?1:-1,b=a<l?1:-1,s=-Math.abs(f+o-e-r),u=s-4*d*(o-e),z=d*(f-o-e+r),j=-Math.abs(a+t-h-l),B=j-4*b*(t-h),R=b*(a-t-h+l),p,S,W,T,G,E,O,v,g,k,F,D,C,A;const K=.01;if(I((o-f)*(e-r)<K&&((r-f)*(o-e)<K||z*z<u*s+K)),I((t-a)*(h-l)<K&&((l-a)*(t-h)<K||R*R<B*j+K)),u===0&&B===0)return d=Math.floor((3*o-f+1)/2),b=Math.floor((3*t-a+1)/2),Q(f,a,d,b,r,l,M);o=(o-f)*(o-f)+(t-a)*(t-a)+1,e=(e-r)*(e-r)+(h-l)*(h-l)+1;do{p=u*R-z*B,S=u*j-s*B,W=z*j-s*R,A=4*p*W-S*S,k=p*(p+S-3*W)+S*S,i=k>0?1:Math.sqrt(1+1024/o),p*=i,S*=i,W*=i,k*=i*i,E=9*(p+S+W)/8,T=8*(u-B),v=27*(8*p*(R*R-B*j)+k*(B+2*R+j))/64-B*B*(E-B),g=27*(8*p*(z*z-u*s)-k*(u+2*z+s))/64-u*u*(E+u),G=3*(3*p*(3*R*R-B*B-2*B*j)-B*(3*S*(B+R)+B*T))/4,O=3*(3*p*(3*z*z-u*u-2*u*s)-u*(3*S*(u+z)+u*T))/4,E=u*B*(6*p+6*S-3*W+T),S=B*B,T=u*u,E=3*(E+9*i*(T*R*j-z*s*S)-18*z*R*p)/8,k<0&&(v=-v,g=-g,G=-G,O=-O,E=-E,S=-S,T=-T),p=6*B*S,S=-6*u*S,W=6*B*T,T=-6*u*T,v+=E,k=v+g,g+=E;let X=!1;a:for(n=c=i;f!==r&&a!==l;){t=Math.min(Math.abs(E-v),Math.abs(g-E)),C=Math.max(Math.abs(E-v),Math.abs(g-E)),C=i*(C+2*C*t*t/(4*C*C+t*t)),t=255*Math.abs(k-(i-n+1)*v-(i-c+1)*g+i*E)/C,t<256&&M(f,a,t),F=Math.abs(k-(i-n+1)*v+(c-1)*g),D=Math.abs(k+(n-1)*v-(i-c+1)*g),h=a;do{if(A>=-K&&(v+G>E||g+O<E)){X=!0;break a}if(t=2*k+v,2*k+g>0)n--,k+=v+=G,g+=E+=S,O+=W,G+=p;else if(t>0){X=!0;break a}t<=0&&(c--,k+=g+=O,v+=E+=W,G+=S,O+=T)}while(n>0&&c>0);2*c<=i&&(D<C&&M(f+d,a,255*D/C),a+=b,c+=i),2*n<=i&&(F<C&&M(f,h+b,255*F/C),f+=d,n+=i)}X&&(2*k<g&&2*c<=i+2&&(D<C&&M(f+d,a,255*D/C),a+=b),2*k>v&&2*n<=i+2&&(F<C&&M(f,h+b,255*F/C),f+=d),G=f,f=r,r=G,d=-d,z=-z,O=a,a=l,l=O,b=-b,R=-R,o=e);break}while(q--);U(Math.floor(f),Math.floor(a),Math.floor(r),Math.floor(l),M)}function m(f,a,o,t,e,h,r,l,M,i){let n=0,c=0,q=f+o-e-r,d=q-4*(o-e),b=f-o-e+r,s=b+4*(o+e),u=a+t-h-l,z=u-4*(t-h),j=a-t-h+l,B=j+4*(t+h);var R=f,p,S,W,T=a,G,E,O;let v=b*b-d*q,g;const k=[0,0,0,0,0];for(d==0?Math.abs(q)<2*Math.abs(b)&&(k[n++]=q/(2*b)):v>0&&(g=Math.sqrt(v),v=(b-g)/d,Math.abs(v)<1&&(k[n++]=v),v=(b+g)/d,Math.abs(v)<1&&(k[n++]=v)),v=j*j-z*u,z==0?Math.abs(u)<2*Math.abs(j)&&(k[n++]=u/(2*j)):v>0&&(g=Math.sqrt(v),v=(j-g)/z,Math.abs(v)<1&&(k[n++]=v),v=(j+g)/z,Math.abs(v)<1&&(k[n++]=v)),c=1;c<n;c++)(v=k[c-1])>k[c]&&(k[c-1]=k[c],k[c]=v,c=0);for(v=-1,k[n]=1,c=0;c<=n;c++)g=k[c],p=(v*(v*b-2*q)-g*(v*(v*d-2*b)+q)+s)/8-R,G=(v*(v*j-2*u)-g*(v*(v*z-2*j)+u)+B)/8-T,S=(g*(g*b-2*q)-v*(g*(g*d-2*b)+q)+s)/8-R,E=(g*(g*j-2*u)-v*(g*(g*z-2*j)+u)+B)/8-T,R-=W=(g*(g*(3*b-g*d)-3*q)+s)/8,T-=O=(g*(g*(3*j-g*z)-3*u)+B)/8,r=Math.floor(W+.5),l=Math.floor(O+.5),R!=0&&(p*=R=(f-r)/R,S*=R),T!=0&&(G*=T=(a-l)/T,E*=T),(f!=r||a!=l)&&M(f,a,f+p,a+G,f+S,a+E,r,l,i),f=r,a=l,R=W,T=O,v=g}function ra(f,a,o,t,e,h,r,l,M){m(f,a,o,t,e,h,r,l,_,M)}function oa(f,a,o,t,e,h,r,l,M){m(f,a,o,t,e,h,r,l,$,M)}N.circle=aa,N.circleAA=fa,N.cubicBezier=ra,N.cubicBezierAA=oa,N.cubicBezierSegment=_,N.cubicBezierSegmentAA=$,N.ellipse=y,N.ellipseRect=Z,N.line=J,N.lineAA=U,N.lineWidth=w,N.quadBezier=ta,N.quadBezierAA=ia,N.quadBezierSegment=L,N.quadBezierSegmentAA=Q,N.quadRationalBezier=P,N.quadRationalBezierSegment=H,N.quadRationalBezierSegmentAA=V,N.rotatedEllipse=x,N.rotatedEllipseRect=Y,Object.defineProperty(N,Symbol.toStringTag,{value:\"Module\"})}));\n","/**\n * Remove duplicate points from array.\n * @param points - Polygon points array.\n * @returns Cleaned polygon points array.\n */\nexport function deleteDuplicates(points) {\n    const finalPoints = [];\n    for (let i = 0; i < points.length; i++) {\n        if (points[i].column === points[(i + 1) % points.length].column &&\n            points[i].row === points[(i + 1) % points.length].row) {\n            continue;\n        }\n        else {\n            finalPoints.push(points[i]);\n        }\n    }\n    return finalPoints;\n}\n//# sourceMappingURL=deleteDuplicates.js.map","import { circle, line } from 'bresenham-zingl';\nimport { deleteDuplicates } from '../../draw/utils/deleteDuplicates.js';\nimport { sortByColumnRow } from './points.js';\n/**\n * Get the coordinates of the points on a circle. The reference is the center of the circle.\n * The first point is the right one and they are then sorted clockwise.\n * @param radius - Radius of the circle.\n * @returns The coordinates of the points on a circle of given diameter.\n */\nexport function getCirclePoints(radius) {\n    const circlePoints = [];\n    circle(radius, radius, radius, (column, row) => {\n        circlePoints.push({ row: row - radius, column: column - radius });\n    });\n    const firstQuarter = [];\n    const secondQuarter = [];\n    const thirdQuarter = [];\n    const fourthQuarter = [];\n    for (let i = 0; i < circlePoints.length; i = i + 4) {\n        firstQuarter.push(circlePoints[i % circlePoints.length]);\n        secondQuarter.push(circlePoints[(i + 1) % circlePoints.length]);\n        thirdQuarter.push(circlePoints[(i + 2) % circlePoints.length]);\n        fourthQuarter.push(circlePoints[(i + 3) % circlePoints.length]);\n    }\n    return firstQuarter.concat(secondQuarter, thirdQuarter, fourthQuarter);\n}\nconst zeroPoint = { row: 0, column: 0 };\n/**\n * Get the coordinates of the points in a circle of given radius. The points are sorted by column then row.\n * @param radius - Radius of the circle.\n * @param center - Center of the circle.\n * @returns The coordinates of the points in a circle of given radius.\n */\nexport function getFilledCirclePoints(radius, center = zeroPoint) {\n    const circlePoints = [];\n    if (radius === 0) {\n        return [center];\n    }\n    if (radius === 1) {\n        circlePoints.push(center);\n    }\n    circle(center.column, center.row, radius, (column, row) => {\n        circlePoints.push({ row, column });\n        if (column - 1 > center.column) {\n            circlePoints.push(...getLinePoints({ row, column: column - 1 }, { row, column: center.column }));\n        }\n        else if (column + 1 < center.column) {\n            circlePoints.push(...getLinePoints({ row, column: column + 1 }, { row, column: center.column }));\n        }\n    });\n    const sorted = sortByColumnRow(circlePoints);\n    return deleteDuplicates(sorted);\n}\n/**\n * Get the coordinates of the points on a line.\n * @param from - Starting point.\n * @param to - End point.\n * @returns The coordinates of the points on the line.\n */\nexport function getLinePoints(from, to) {\n    const linePoints = [];\n    line(from.column, from.row, to.column, to.row, (column, row) => {\n        linePoints.push({\n            row,\n            column,\n        });\n    });\n    return linePoints;\n}\n/**\n * Get the coordinates of the points that are on right, bottom, left and top at a given radius. The reference is the origin of the circle.\n * First point is the most on the right, then points are in clockwise order.\n * @param radius - Radius of the circle.\n * @returns The coordinates of the compass points.\n */\nexport function getCompassPoints(radius) {\n    const circlePoints = [];\n    circle(radius, radius, radius, (column, row) => {\n        circlePoints.push({ row: row - radius, column: column - radius });\n    });\n    return [\n        { row: 0, column: radius },\n        { row: radius, column: 0 },\n        { row: 0, column: -radius },\n        { row: -radius, column: 0 },\n    ];\n}\n//# sourceMappingURL=getCirclePoints.js.map","/**\n * Compute the current pixel index based on the value coordinates.\n * @param column - Column of the value.\n * @param row - Row of the value.\n * @param image - The image that is being processed.\n * @param channel - Value channel.\n * @returns The value index.\n */\nexport function getIndex(column, row, image, channel = 0) {\n    return (row * image.width + column) * image.channels + channel;\n}\n//# sourceMappingURL=getIndex.js.map","/**\n * Coordinates of the surrounding pixels relative to the current pixel.\n * First pixel is the one on the right, then they are in clockwise order.\n */\nexport const surroundingPixels = [\n    { row: 0, column: 1 },\n    { row: 1, column: 1 },\n    { row: 1, column: 0 },\n    { row: 1, column: -1 },\n    { row: 0, column: -1 },\n    { row: -1, column: -1 },\n    { row: -1, column: 0 },\n    { row: -1, column: 1 },\n];\n//# sourceMappingURL=surroundingPixels.js.map","const formatter = new Intl.ListFormat('en', { type: 'disjunction' });\n/**\n * This method checks if a process can be applied on the current image.\n * @param image - Image for which compatibility has to be checked.\n * @param options - Check processable options.\n */\nexport default function checkProcessable(image, options = {}) {\n    let { bitDepth, alpha, colorModel, components, channels } = options;\n    if (bitDepth) {\n        if (!Array.isArray(bitDepth)) {\n            bitDepth = [bitDepth];\n        }\n        if (!bitDepth.includes(image.bitDepth)) {\n            throw new RangeError(`image bitDepth must be ${format(bitDepth)} to apply this algorithm`);\n        }\n    }\n    if (alpha) {\n        if (!Array.isArray(alpha)) {\n            alpha = [alpha];\n        }\n        if (!alpha.includes(image.alpha)) {\n            throw new RangeError(`image alpha must be ${format(alpha)} to apply this algorithm`);\n        }\n    }\n    if (colorModel) {\n        if (!Array.isArray(colorModel)) {\n            colorModel = [colorModel];\n        }\n        if (!colorModel.includes(image.colorModel)) {\n            throw new RangeError(`image colorModel must be ${format(colorModel)} to apply this algorithm`);\n        }\n    }\n    if (components) {\n        if (!Array.isArray(components)) {\n            components = [components];\n        }\n        if (!components.includes(image.components)) {\n            const errorMessage = `image components must be ${format(components)} to apply this algorithm`;\n            if (components.length === 1 && components[0] === 1) {\n                throw new RangeError(`${errorMessage}. The image can be converted using \"image.grey()\"`);\n            }\n            else {\n                throw new RangeError(errorMessage);\n            }\n        }\n    }\n    if (channels) {\n        if (!Array.isArray(channels)) {\n            channels = [channels];\n        }\n        if (!channels.includes(image.channels)) {\n            throw new RangeError(`image channels must be ${format(channels)} to apply this algorithm`);\n        }\n    }\n}\n/**\n * Format array to a string.\n * @param array - Array to format.\n * @returns The formatted string.\n */\nexport function format(array) {\n    return formatter.format(array.map(String));\n}\n//# sourceMappingURL=checkProcessable.js.map","/**\n * Compute the score of a keypoint using the function described in the FAST article.\n * DOI: https://doi.org/10.1007/11744023_34.\n * @param image - Image to process.\n * @param origin - Keypoint coordinates.\n * @param threshold - FAST threshold.\n * @param circlePoints - Coordinates of the points on the circle.\n * @returns Score of the corner.\n */\nexport function getFastScore(image, origin, threshold, circlePoints) {\n    const currentIntensity = image.getValueByPoint(origin, 0);\n    let brighterSum = 0;\n    let darkerSum = 0;\n    for (const point of circlePoints) {\n        const pointIntensity = image.getValue(origin.column + point.column, origin.row + point.row, 0);\n        if (pointIntensity >= currentIntensity + threshold) {\n            brighterSum += Math.abs(pointIntensity - currentIntensity) - threshold; // circle point is lighter\n        }\n        else if (pointIntensity <= currentIntensity - threshold) {\n            darkerSum += Math.abs(currentIntensity - pointIntensity) - threshold; // circle point is darker\n        }\n    }\n    return Math.max(brighterSum, darkerSum);\n}\n//# sourceMappingURL=getFastScore.js.map","export const DISCRETE_LAPLACE_4 = [\n    [0, 1, 0],\n    [1, -4, 1],\n    [0, 1, 0],\n];\nexport const DISCRETE_LAPLACE_8 = [\n    [1, 1, 1],\n    [1, -8, 1],\n    [1, 1, 1],\n];\nexport const SOBEL_X = [\n    [-1, 0, 1],\n    [-2, 0, 2],\n    [-1, 0, 1],\n];\nexport const SOBEL_Y = [\n    [-1, -2, -1],\n    [0, 0, 0],\n    [1, 2, 1],\n];\nexport const SCHARR_X = [\n    [3, 0, -3],\n    [10, 0, -10],\n    [3, 0, -3],\n];\nexport const SCHARR_Y = [\n    [3, 10, 3],\n    [0, 0, 0],\n    [-3, -10, -3],\n];\nexport const PREWITT_X = [\n    [1, 0, -1],\n    [1, 0, -1],\n    [1, 0, -1],\n];\nexport const PREWITT_Y = [\n    [1, 1, 1],\n    [0, 0, 0],\n    [-1, -1, -1],\n];\nexport const ROBERTS_X = [\n    [0, 1],\n    [-1, 0],\n];\nexport const ROBERTS_Y = [\n    [1, 0],\n    [0, -1],\n];\nexport const SECOND_DERIVATIVE = [\n    [-1, -2, 0, 2, 1],\n    [-2, -4, 0, 4, 2],\n    [0, 0, 0, 0, 0],\n    [1, 2, 0, -2, -1],\n    [2, 4, 0, -4, -2],\n];\nexport const SECOND_DERIVATIVE_INV = [\n    [1, 2, 0, -2, -1],\n    [2, 4, 0, -4, -2],\n    [0, 0, 0, 0, 0],\n    [-2, -4, 0, 4, 2],\n    [-1, -2, 0, 2, 1],\n];\n//# sourceMappingURL=kernels.js.map","import { EigenvalueDecomposition, Matrix, WrapperMatrix1D } from 'ml-matrix';\nimport { SOBEL_X, SOBEL_Y } from '../../utils/constants/kernels.js';\n/**\n * Get the Harris score of a corner. The idea behind the algorithm is that a\n * slight shift of a window around a corner along x and y shoud result in\n * a very different image.\n *\n * We distinguish 3 cases:\n * - the score is highly negative: you have an edge\n * - the abolute value of the score is small: the region is flat\n * - the score is highly positive: you have a corner.\n * @see {@link https://en.wikipedia.org/wiki/Harris_corner_detector}\n * @param image - Image to which the corner belongs. It must be a greyscale image with only one channel.\n * @param origin - Center of the window, where the corner should be.\n * @param options - Get Harris score options.\n * @returns The Harris score.\n */\nexport function getHarrisScore(image, origin, options = {}) {\n    const { windowSize = 7, harrisConstant = 0.04 } = options;\n    if (!(windowSize % 2)) {\n        throw new TypeError('windowSize must be an odd integer');\n    }\n    const cropOrigin = {\n        row: origin.row - (windowSize - 1) / 2,\n        column: origin.column - (windowSize - 1) / 2,\n    };\n    const window = image.crop({\n        origin: cropOrigin,\n        width: windowSize,\n        height: windowSize,\n    });\n    const xDerivative = window.gradientFilter({ kernelX: SOBEL_X });\n    const yDerivative = window.gradientFilter({ kernelY: SOBEL_Y });\n    const xMatrix = new WrapperMatrix1D(xDerivative.getRawImage().data, {\n        rows: xDerivative.height,\n    });\n    const yMatrix = new WrapperMatrix1D(yDerivative.getRawImage().data, {\n        rows: yDerivative.height,\n    });\n    const xx = xMatrix.mmul(xMatrix);\n    const xy = yMatrix.mmul(xMatrix);\n    const yy = yMatrix.mmul(yMatrix);\n    const xxSum = xx.sum();\n    const xySum = xy.sum();\n    const yySum = yy.sum();\n    const structureTensor = new Matrix([\n        [xxSum, xySum],\n        [xySum, yySum],\n    ]);\n    const eigenValues = new EigenvalueDecomposition(structureTensor)\n        .realEigenvalues;\n    return (eigenValues[0] * eigenValues[1] -\n        harrisConstant * (eigenValues[0] + eigenValues[1]) ** 2);\n}\n//# sourceMappingURL=getHarrisScore.js.map","/**\n * Determine wether a pixel in an image is a corner according to the FAST algorithm.\n * @param origin - Pixel to process.\n * @param image - Image to process.\n * @param circlePoints - Coordinates of the points on the circle.\n * @param compassPoints - Compass points for quick test.\n * @param options - Is FAST keypoint options.\n * @returns Whether the current pixel is a corner or not.\n */\nexport function isFastKeypoint(origin, image, circlePoints, compassPoints, options = {}) {\n    const { nbContiguousPixels = 12, threshold = 20 } = options;\n    const currentIntensity = image.getValueByPoint(origin, 0);\n    let brighter = 0;\n    let darker = 0;\n    // quick test to exlude non corners\n    if (nbContiguousPixels >= 12) {\n        for (const point of compassPoints) {\n            const pointIntensity = image.getValue(origin.column + point.column, origin.row + point.row, 0);\n            if (currentIntensity - pointIntensity > threshold) {\n                darker++;\n            }\n            else if (pointIntensity - currentIntensity > threshold) {\n                brighter++;\n            }\n        }\n        if (darker < 3 && brighter < 3)\n            return false;\n    }\n    // determine whether points on circle are darker or brighter\n    const comparisonArray = [];\n    for (const point of circlePoints) {\n        const pointIntensity = image.getValue(origin.column + point.column, origin.row + point.row, 0);\n        if (currentIntensity + threshold <= pointIntensity) {\n            comparisonArray.push(-1); // circle point is lighter\n        }\n        else if (pointIntensity <= currentIntensity - threshold) {\n            comparisonArray.push(1); // circle point is darker\n        }\n        else {\n            comparisonArray.push(0); // circle point is similar\n        }\n    }\n    // compute number of repeating and touching values\n    let currentLength = 1;\n    const counterArray = [];\n    for (let i = 0; i < comparisonArray.length; i++) {\n        const currentValue = comparisonArray[i];\n        const nextValue = comparisonArray[(i + 1) % comparisonArray.length];\n        if (currentValue === nextValue) {\n            if (i === comparisonArray.length - 1) {\n                if (counterArray.length === 0) {\n                    counterArray.push(currentLength);\n                }\n                else {\n                    counterArray[0] += currentLength;\n                }\n            }\n            else {\n                currentLength++;\n            }\n        }\n        else {\n            counterArray.push(currentLength);\n            currentLength = 1;\n        }\n    }\n    if (Math.max(...counterArray) >= nbContiguousPixels) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n//# sourceMappingURL=isFastKeypoint.js.map","import { match } from 'ts-pattern';\nimport { getCirclePoints, getCompassPoints, } from '../../utils/geometry/getCirclePoints.js';\nimport { getIndex } from '../../utils/getIndex.js';\nimport { surroundingPixels } from '../../utils/surroundingPixels.js';\nimport checkProcessable from '../../utils/validators/checkProcessable.js';\nimport { getFastScore } from './getFastScore.js';\nimport { getHarrisScore } from './getHarrisScore.js';\nimport { isFastKeypoint } from './isFastKeypoint.js';\n/**\n * Find the features in a GREY image according to the FAST (Features from Accelerated Segment Test) algorithm.\n * Based on the paper Machine Learning for High-Speed Corner Detection.\n * DOI: https://doi.org/10.1007/11744023_34.\n * @param image - The image to process.\n * @param options - Get FAST keypoints options.\n * @returns The FAST keypoints.\n */\nexport function getFastKeypoints(image, options = {}) {\n    const { fastRadius = 3, scoreAlgorithm = 'FAST', harrisScoreOptions, } = options;\n    const circlePoints = getCirclePoints(fastRadius);\n    const compassPoints = getCompassPoints(fastRadius);\n    const { maxNbFeatures = 500, nbContiguousPixels = (3 / 4) * circlePoints.length, threshold = 20, nonMaxSuppression = true, } = options;\n    checkProcessable(image, {\n        channels: [1],\n        alpha: false,\n    });\n    const getScore = match(scoreAlgorithm)\n        .with('HARRIS', () => {\n        return (image, corner) => getHarrisScore(image, corner, harrisScoreOptions);\n    })\n        .with('FAST', () => {\n        return (image, corner) => getFastScore(image, corner, threshold, circlePoints);\n    })\n        .exhaustive();\n    const allKeypoints = [];\n    const scoreArray = new Float64Array(image.size).fill(Number.NEGATIVE_INFINITY);\n    for (let row = 0; row < image.height; row++) {\n        for (let column = 0; column < image.width; column++) {\n            const corner = { row, column };\n            if (isFastKeypoint(corner, image, circlePoints, compassPoints, {\n                nbContiguousPixels,\n                threshold,\n            })) {\n                const score = getScore(image, corner);\n                scoreArray[getIndex(corner.column, corner.row, image, 0)] = score;\n                allKeypoints.push({ origin: corner, score });\n            }\n        }\n    }\n    let keypoints = [];\n    if (!nonMaxSuppression) {\n        keypoints = allKeypoints;\n    }\n    else {\n        // Non-Maximal Suppression\n        for (const keypoint of allKeypoints) {\n            const currentScore = scoreArray[getIndex(keypoint.origin.column, keypoint.origin.row, image, 0)];\n            for (let i = 0; i < surroundingPixels.length; i++) {\n                const neighbour = surroundingPixels[i];\n                const neighbourScore = scoreArray[getIndex(keypoint.origin.column + neighbour.column, keypoint.origin.row + neighbour.row, image, 0)];\n                if (neighbourScore > currentScore)\n                    break;\n                if (i === surroundingPixels.length - 1) {\n                    keypoints.push(keypoint);\n                }\n            }\n        }\n    }\n    keypoints.sort((a, b) => b.score - a.score);\n    return keypoints.slice(0, maxNbFeatures);\n}\n//# sourceMappingURL=getFastKeypoints.js.map","import { getFilledCirclePoints } from '../../utils/geometry/getCirclePoints.js';\nimport { checkBorderDistance } from '../utils/checkBorderDistance.js';\n/**\n * Compute the pq order intensity moment of the circular patch with given radius in the image,\n * relatively to the origin defined in the options.\n * Original article: {@link https://doi.org/10.1006/cviu.1998.0719}.\n * @see {@link https://en.wikipedia.org/wiki/Image_moment}\n * @param image - Image to process.\n * @param p - Order along x.\n * @param q - Order along y.\n * @param options - Get intensity moment options.\n * @returns The intensity moment of order pq of the circular window relative to the center.\n */\nexport function getPatchIntensityMoment(image, p, q, options = {}) {\n    const { center: origin = image.getCoordinates('center'), radius = 3 } = options;\n    if (!checkBorderDistance(image, origin, radius)) {\n        throw new RangeError(`desired patch is too close to image border`);\n    }\n    const moment = new Array(image.channels).fill(0);\n    const relativeCirclePoints = getFilledCirclePoints(radius);\n    for (const point of relativeCirclePoints) {\n        for (let channel = 0; channel < image.channels; channel++) {\n            const intensity = image.getValue(point.column + origin.column, point.row + origin.row, channel);\n            moment[channel] += point.column ** p * point.row ** q * intensity;\n        }\n    }\n    return moment;\n}\n//# sourceMappingURL=getPatchIntensityMoment.js.map","import { getPatchIntensityMoment } from './getPatchIntensityMoment.js';\n/**\n * Compute the intensity centroid of the circular patch in an image for each channel relatively to the center of the image.\n * Original article: {@link https://doi.org/10.1006/cviu.1998.0719}.\n * @see {@link https://en.wikipedia.org/wiki/Image_moment}\n * @param image - Image to process.\n * @param options - Patch intensity centroid options.\n * @returns The intensity centroid of each channel of the image.\n */\nexport function getPatchIntensityCentroid(image, options = {}) {\n    const moment10 = getPatchIntensityMoment(image, 1, 0, options);\n    const moment01 = getPatchIntensityMoment(image, 0, 1, options);\n    const moment00 = getPatchIntensityMoment(image, 0, 0, options);\n    const centroid = [];\n    for (let channel = 0; channel < image.channels; channel++) {\n        if (moment00[channel] === 0) {\n            centroid.push({\n                column: 0,\n                row: 0,\n            });\n        }\n        else {\n            centroid.push({\n                column: moment10[channel] / moment00[channel],\n                row: moment01[channel] / moment00[channel],\n            });\n        }\n    }\n    return centroid;\n}\n//# sourceMappingURL=getPatchIntensityCentroid.js.map","import { getClockwiseAngle } from '../../maskAnalysis/utils/getAngle.js';\nimport { toDegrees } from '../../utils/geometry/angles.js';\nimport { getRadius } from '../../utils/getRadius.js';\nimport { checkBorderDistance } from '../utils/checkBorderDistance.js';\nimport { getFastKeypoints } from './getFastKeypoints.js';\nimport { getPatchIntensityCentroid } from './getPatchIntensityCentroid.js';\n/**\n * Find the oriented FAST features in a GREY image.\n * How to add orientation to FAST is described in: http://www.gwylab.com/download/ORB_2012.pdf\n * Basically, the intensity centroid of the window around the corner is computed and the\n * orientation is given by the vector from the center to the intensity centroid.\n * @param image - The image to process.\n * @param options - Get oriented FAST keypoints options.\n * @returns The oriented FAST keypoints.\n */\nexport function getOrientedFastKeypoints(image, options = {}) {\n    const { centroidPatchDiameter: windowSize = 7 } = options;\n    const fastKeypoints = getFastKeypoints(image, options);\n    const radius = getRadius(windowSize);\n    // handle edge cases: remove keypoints too close to border\n    const keypoints = [];\n    for (const keypoint of fastKeypoints) {\n        if (checkBorderDistance(image, keypoint.origin, radius)) {\n            keypoints.push(keypoint);\n        }\n    }\n    const orientedFastKeypoints = [];\n    for (const keypoint of keypoints) {\n        const centroid = getPatchIntensityCentroid(image, {\n            center: keypoint.origin,\n            radius,\n        })[0];\n        const angle = toDegrees(getClockwiseAngle({ column: 0, row: 0 }, centroid));\n        orientedFastKeypoints.push({ ...keypoint, angle });\n    }\n    return orientedFastKeypoints;\n}\n//# sourceMappingURL=getOrientedFastKeypoints.js.map","import { sum } from '../../utils/geometry/points.js';\n/**\n * Compare the intensity of two pixels of a GREY image.\n * @param image - Source image of the pixels.\n * @param p1 - First point.\n * @param p2 - Second point.\n * @param options - Options.\n * @returns Wether p1 is darker that p2.\n */\nexport function compareIntensity(image, p1, p2, options = {}) {\n    const { origin = image.getCoordinates('center') } = options;\n    const absoluteP1 = sum(p1, origin);\n    const absoluteP2 = sum(p2, origin);\n    const intensity1 = image.getValueByPoint(absoluteP1, 0);\n    const intensity2 = image.getValueByPoint(absoluteP2, 0);\n    return intensity1 < intensity2;\n}\n//# sourceMappingURL=compareIntensity.js.map","import { isAnyArray } from 'is-any-array';\n/**\n * Calculates the median of an array.\n * @param input - Array containing values\n * @param options\n * @returns - median\n */\nexport function xMedian(input, options = {}) {\n    if (!isAnyArray(input)) {\n        throw new TypeError('input must be an array');\n    }\n    if (input.length === 0) {\n        throw new TypeError('input must not be empty');\n    }\n    const { exact = false } = options || {};\n    const array = input.slice();\n    const middleIndex = calcMiddle(0, array.length - 1);\n    const median = quickSelect(array, middleIndex);\n    if (array.length % 2 === 1 || !exact) {\n        return median;\n    }\n    const medianNext = quickSelect(array, middleIndex + 1);\n    return (median + medianNext) / 2;\n}\nfunction quickSelect(array, middleIndex) {\n    let low = 0;\n    let high = array.length - 1;\n    let middle = 0;\n    let currentLow = 0;\n    let currentHigh = 0;\n    while (true) {\n        if (high <= low) {\n            return array[middleIndex];\n        }\n        if (high === low + 1) {\n            if (array[low] > array[high]) {\n                swap(array, low, high);\n            }\n            return array[middleIndex];\n        }\n        // Find median of low, middle and high items; swap into position low\n        middle = calcMiddle(low, high);\n        if (array[middle] > array[high])\n            swap(array, middle, high);\n        if (array[low] > array[high])\n            swap(array, low, high);\n        if (array[middle] > array[low])\n            swap(array, middle, low);\n        // Swap low item (now in position middle) into position (low+1)\n        swap(array, middle, low + 1);\n        // Nibble from each end towards middle, swapping items when stuck\n        currentLow = low + 1;\n        currentHigh = high;\n        while (true) {\n            do\n                currentLow++;\n            while (array[low] > array[currentLow]);\n            do\n                currentHigh--;\n            while (array[currentHigh] > array[low]);\n            if (currentHigh < currentLow) {\n                break;\n            }\n            swap(array, currentLow, currentHigh);\n        }\n        // Swap middle item (in position low) back into correct position\n        swap(array, low, currentHigh);\n        // Re-set active partition\n        if (currentHigh <= middleIndex) {\n            low = currentLow;\n        }\n        if (currentHigh >= middleIndex) {\n            high = currentHigh - 1;\n        }\n    }\n}\nfunction swap(array, i, j) {\n    const temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n}\nfunction calcMiddle(i, j) {\n    return Math.floor((i + j) / 2);\n}\n//# sourceMappingURL=xMedian.js.map","import { isAnyArray } from 'is-any-array';\n/**\n * Checks if the input is a non-empty array of numbers.\n * Only checks the first element.\n * @param input - Array to check.\n * @param options - Additional checks.\n */\nexport function xCheck(input, options = {}) {\n    const { minLength } = options;\n    if (!isAnyArray(input)) {\n        throw new TypeError('input must be an array');\n    }\n    if (input.length === 0) {\n        throw new TypeError('input must not be empty');\n    }\n    if (typeof input[0] !== 'number') {\n        throw new TypeError('input must contain numbers');\n    }\n    if (minLength && input.length < minLength) {\n        throw new Error(`input must have a length of at least ${minLength}`);\n    }\n}\n//# sourceMappingURL=xCheck.js.map","/**\n * Returns the closest index of a `target`\n * @param array - array of numbers\n * @param target - target\n * @param options\n * @returns - closest index\n */\nexport function xFindClosestIndex(array, target, options = {}) {\n    const { sorted = true } = options;\n    if (sorted) {\n        let low = 0;\n        let high = array.length - 1;\n        let middle = 0;\n        while (high - low > 1) {\n            middle = low + ((high - low) >> 1);\n            if (array[middle] < target) {\n                low = middle;\n            }\n            else if (array[middle] > target) {\n                high = middle;\n            }\n            else {\n                return middle;\n            }\n        }\n        if (low < array.length - 1) {\n            if (Math.abs(target - array[low]) < Math.abs(array[low + 1] - target)) {\n                return low;\n            }\n            else {\n                return low + 1;\n            }\n        }\n        else {\n            return low;\n        }\n    }\n    else {\n        let index = 0;\n        let diff = Number.POSITIVE_INFINITY;\n        for (let i = 0; i < array.length; i++) {\n            const currentDiff = Math.abs(array[i] - target);\n            if (currentDiff < diff) {\n                diff = currentDiff;\n                index = i;\n            }\n        }\n        return index;\n    }\n}\n//# sourceMappingURL=xFindClosestIndex.js.map","import { xFindClosestIndex } from \"./xFindClosestIndex.js\";\n/**\n * Returns an object with {fromIndex, toIndex} for a specific from / to\n * @param x - array of numbers\n * @param options - Options\n */\nexport function xGetFromToIndex(x, options = {}) {\n    let { fromIndex, toIndex } = options;\n    const { from, to } = options;\n    if (fromIndex === undefined) {\n        if (from !== undefined) {\n            fromIndex = xFindClosestIndex(x, from);\n        }\n        else {\n            fromIndex = 0;\n        }\n    }\n    if (toIndex === undefined) {\n        if (to !== undefined) {\n            toIndex = xFindClosestIndex(x, to);\n        }\n        else {\n            toIndex = x.length - 1;\n        }\n    }\n    if (fromIndex < 0)\n        fromIndex = 0;\n    if (toIndex < 0)\n        toIndex = 0;\n    if (fromIndex >= x.length)\n        fromIndex = x.length - 1;\n    if (toIndex >= x.length)\n        toIndex = x.length - 1;\n    if (fromIndex > toIndex)\n        [fromIndex, toIndex] = [toIndex, fromIndex];\n    return { fromIndex, toIndex };\n}\n//# sourceMappingURL=xGetFromToIndex.js.map","import { xCheck } from \"./xCheck.js\";\nimport { xGetFromToIndex } from \"./xGetFromToIndex.js\";\n/**\n * Computes the mean value of an array of values.\n * @param array - array of numbers\n * @param options - options\n */\nexport function xMean(array, options = {}) {\n    xCheck(array);\n    const { fromIndex, toIndex } = xGetFromToIndex(array, options);\n    let sumValue = array[fromIndex];\n    for (let i = fromIndex + 1; i <= toIndex; i++) {\n        sumValue += array[i];\n    }\n    return sumValue / (toIndex - fromIndex + 1);\n}\n//# sourceMappingURL=xMean.js.map","import { isAnyArray } from 'is-any-array';\nimport { xMean } from \"./xMean.js\";\n/**\n * Finds the variance of the data\n * @param values - the values of the array\n * @param options - options\n * @returns variance\n */\nexport function xVariance(values, options = {}) {\n    if (!isAnyArray(values)) {\n        throw new TypeError('input must be an array');\n    }\n    const { unbiased = true, mean = xMean(values) } = options;\n    let sqrError = 0;\n    for (const value of values) {\n        const x = value - mean;\n        sqrError += x * x;\n    }\n    if (unbiased) {\n        return sqrError / (values.length - 1);\n    }\n    else {\n        return sqrError / values.length;\n    }\n}\n//# sourceMappingURL=xVariance.js.map","'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n","const LOOP = 8;\nconst FLOAT_MUL = 1 / 16777216;\nconst sh1 = 15;\nconst sh2 = 18;\nconst sh3 = 11;\nfunction multiplyUint32(n, m) {\n    n >>>= 0;\n    m >>>= 0;\n    const nlo = n & 0xffff;\n    const nhi = n - nlo;\n    return (((nhi * m) >>> 0) + nlo * m) >>> 0;\n}\nexport class XSadd {\n    random;\n    state;\n    /**\n     * create an instance of XSadd with the specified seed\n     * @param [seed=Date.now()]\n     */\n    constructor(seed = Date.now()) {\n        this.state = new Uint32Array(4);\n        this.init(seed);\n        this.random = this.getFloat.bind(this);\n    }\n    /**\n     * Returns a 32-bit integer r (0 <= r < 2^32)\n     */\n    getUint32() {\n        this.nextState();\n        return (this.state[3] + this.state[2]) >>> 0;\n    }\n    /**\n     * Returns a floating point number r (0.0 <= r < 1.0)\n     */\n    getFloat() {\n        return (this.getUint32() >>> 8) * FLOAT_MUL;\n    }\n    init(seed) {\n        if (!Number.isInteger(seed)) {\n            throw new TypeError(\"seed must be an integer\");\n        }\n        this.state[0] = seed;\n        this.state[1] = 0;\n        this.state[2] = 0;\n        this.state[3] = 0;\n        for (let i = 1; i < LOOP; i++) {\n            this.state[i & 3] ^=\n                (i +\n                    multiplyUint32(1812433253, this.state[(i - 1) & 3] ^ ((this.state[(i - 1) & 3] >>> 30) >>> 0))) >>>\n                    0;\n        }\n        this.periodCertification();\n        for (let i = 0; i < LOOP; i++) {\n            this.nextState();\n        }\n    }\n    periodCertification() {\n        if (this.state[0] === 0 &&\n            this.state[1] === 0 &&\n            this.state[2] === 0 &&\n            this.state[3] === 0) {\n            this.state[0] = 88; // X\n            this.state[1] = 83; // S\n            this.state[2] = 65; // A\n            this.state[3] = 68; // D\n        }\n    }\n    nextState() {\n        let t = this.state[0];\n        t ^= t << sh1;\n        t ^= t >>> sh2;\n        t ^= this.state[3] << sh3;\n        this.state[0] = this.state[1];\n        this.state[1] = this.state[2];\n        this.state[2] = this.state[3];\n        this.state[3] = t;\n    }\n}\n//# sourceMappingURL=XSadd.js.map","import { XSadd } from 'ml-xsadd';\n/**\n * Create a random array of numbers of a specific length.\n * @param options\n * @returns - array of random floats normally distributed\n */\nexport function createRandomArray(options = {}) {\n    const { mean = 0, standardDeviation = 1, length = 1000, range = 1, seed, distribution = 'normal', } = options;\n    const generator = new XSadd(seed);\n    const returnArray = new Float64Array(length);\n    switch (distribution) {\n        case 'normal': {\n            const gaussianGenerator = new GaussianGenerator(mean, standardDeviation, generator);\n            for (let i = 0; i < length; i++) {\n                returnArray[i] = gaussianGenerator.generateGaussian();\n            }\n            break;\n        }\n        case 'uniform': {\n            for (let i = 0; i < length; i++) {\n                returnArray[i] = (generator.random() - 0.5) * range + mean;\n            }\n            break;\n        }\n        default: {\n            throw new Error(`unknown distribution: ${String(distribution)}`);\n        }\n    }\n    return returnArray;\n}\nclass GaussianGenerator {\n    #spare = 0;\n    #hasSpare = false;\n    #mean;\n    #standardDeviation;\n    #generator;\n    constructor(mean, standardDeviation, generator) {\n        this.#mean = mean;\n        this.#standardDeviation = standardDeviation;\n        this.#generator = generator;\n    }\n    generateGaussian() {\n        let val, u, v, s;\n        if (this.#hasSpare) {\n            this.#hasSpare = false;\n            val = this.#spare * this.#standardDeviation + this.#mean;\n        }\n        else {\n            do {\n                u = this.#generator.random() * 2 - 1;\n                v = this.#generator.random() * 2 - 1;\n                s = u * u + v * v;\n            } while (s >= 1 || s === 0);\n            s = Math.sqrt((-2 * Math.log(s)) / s);\n            this.#spare = v * s;\n            this.#hasSpare = true;\n            val = this.#mean + this.#standardDeviation * u * s;\n        }\n        return val;\n    }\n}\n//# sourceMappingURL=createRandomArray.js.map","import { xMean } from \"../x/index.js\";\n/**\n * Finds the covariance of the points.\n * @param data\n * @param options\n * @returns the covariance\n */\nexport function xyCovariance(data, options = {}) {\n    const { x, y } = data;\n    const { unbiased = true } = options;\n    const meanX = xMean(x);\n    const meanY = xMean(y);\n    let error = 0;\n    for (let i = 0; i < x.length; i++) {\n        error += (x[i] - meanX) * (y[i] - meanY);\n    }\n    if (unbiased) {\n        return error / (x.length - 1);\n    }\n    else {\n        return error / x.length;\n    }\n}\n//# sourceMappingURL=xyCovariance.js.map","/**\n * Asserts that value is truthy.\n * @param value - Value to check.\n * @param message - Optional error message to throw.\n */\nexport function assert(value, message) {\n    if (!value) {\n        throw new Error(message || 'unreachable');\n    }\n}\n/**\n * Makes sure that all cases are handled\n * @param x - cases of value to check\n */\nexport function assertUnreachable(x) {\n    throw new Error(`unreachable: ${String(x)}`);\n}\n//# sourceMappingURL=assert.js.map","import { assert } from './validators/assert.js';\n/**\n * Get the clamp function for an image (depends on the image bit depth).\n * @param image - The image for which the clamp function is needed.\n * @returns The clamp function.\n */\nexport function getClamp(image) {\n    if (image.maxValue === 255) {\n        return clamp255;\n    }\n    else {\n        assert(image.maxValue === 65535);\n        return clamp65535;\n    }\n}\n/**\n * Clamp value for 8-bit images.\n * @param value - Value to clamp.\n * @returns The clamped value.\n */\nfunction clamp255(value) {\n    return Math.min(Math.max(value, 0), 255);\n}\n/**\n * Clamp value for 16-bit images.\n * @param value - Value to clamp.\n * @returns The clamped value.\n */\nfunction clamp65535(value) {\n    return Math.min(Math.max(value, 0), 65535);\n}\n/**\n * Get a function that clamps a value to a given range.\n * @param min - Lower threshold.\n * @param max - Upper threshold.\n * @returns The clamping function.\n */\nexport function getClampFromTo(min, max) {\n    return function clamp(value) {\n        return Math.max(Math.min(value, max), min);\n    };\n}\n//# sourceMappingURL=clamp.js.map","import { createRandomArray } from 'ml-spectra-processing';\nimport { getClampFromTo } from '../../utils/clamp.js';\n/**\n * Get the coordinates of random points inside of the given dimensions, spread with a\n * gaussian distribution around the center of the dimensions.\n * The reference point with coordinates (0,0) is the center of the patch.\n * @param width - Width in which the points should be.\n * @param height - Height in which the points should be.\n * @param options - Get gaussian points options.\n * @returns An array of random points with a gaussian distribution.\n */\nexport function getGaussianPoints(width, height, options = {}) {\n    const { nbPoints = 1024, xSeed = 0, ySeed = 1, sigma } = options;\n    const xCoordinates = getGaussianValues(width, xSeed, nbPoints, sigma);\n    const yCoordinates = getGaussianValues(height, ySeed, nbPoints, sigma);\n    const points = [];\n    for (let i = 0; i < nbPoints; i++) {\n        points.push({ column: xCoordinates[i], row: yCoordinates[i] });\n    }\n    return points;\n}\n/**\n * Generate an array of values\n * that follow a gaussian distribution with a mean value of zero.\n * @param size - Specifies the width of the gaussian distribution.\n * @param seed - Seed for the random generator.\n * @param nbValues - Number of values wanted.\n * @param sigma - The standard deviation. The default value is the optimal SD for BRIEF.\n * @returns Array of values with gaussian distribution.\n */\nexport function getGaussianValues(size, seed, nbValues, sigma = size / 5) {\n    const width = (size - 1) / 2;\n    const array = createRandomArray({\n        distribution: 'normal',\n        seed,\n        length: nbValues,\n        standardDeviation: sigma,\n        mean: 0,\n    });\n    const clamp = getClampFromTo(-width, width);\n    return array.map((value) => {\n        const rounded = Math.round(value);\n        return clamp(rounded);\n    });\n}\n//# sourceMappingURL=getGaussianPoints.js.map","/**\n * Crop the source image to given dimensions around the origin.\n * @param image - Source image.\n * @param origin - Center point for the crop.\n * @param patchSize - Size of the returned image.\n * @returns The square image around the origin extracted from the source image.\n */\nexport function extractSquareImage(image, origin, patchSize) {\n    const cropOffset = (patchSize - 1) / 2;\n    const cropOrigin = {\n        column: origin.column - cropOffset,\n        row: origin.row - cropOffset,\n    };\n    return image.crop({\n        origin: cropOrigin,\n        width: patchSize,\n        height: patchSize,\n    });\n}\n//# sourceMappingURL=extractSquareImage.js.map","import { getRadius } from '../../../utils/getRadius.js';\nimport { checkBorderDistance } from '../../utils/checkBorderDistance.js';\nimport { extractSquareImage } from '../../utils/extractSquareImage.js';\n/**\n * Get the patch around the keypoint with given size.\n * @param image - Image from which to extract the patch.\n * @param keypoint - Keypoint around which to extract the patch.\n * @param options - Get keypoint patch options.\n * @returns The patch around the keypoint.\n */\nexport function getKeypointPatch(image, keypoint, options = {}) {\n    const { patchSize = 31 } = options;\n    // crop smallest square surrounding the tilted patch of the keypoint\n    // we have to handle the fact that this square can have even dimensions\n    const radAngle = (keypoint.angle * Math.PI) / 180;\n    const rawWidth = Math.floor(patchSize * (Math.abs(Math.cos(radAngle)) + Math.abs(Math.sin(radAngle))));\n    const cropWidth = rawWidth % 2 ? rawWidth : rawWidth + 1;\n    // we are not allowing keypoints that are too close to the border of the image\n    const borderDistance = getRadius(cropWidth);\n    if (!checkBorderDistance(image, keypoint.origin, borderDistance)) {\n        throw new RangeError('keypoint is too close to border for given patch size');\n    }\n    const cropped = extractSquareImage(image, keypoint.origin, cropWidth);\n    const rotated = cropped.transformRotate(-keypoint.angle, {\n        center: 'center',\n        interpolationType: 'nearest',\n    });\n    const cropOrigin = rotated.getCoordinates('center');\n    const result = extractSquareImage(rotated, cropOrigin, patchSize);\n    return result;\n}\n//# sourceMappingURL=getKeypointPatch.js.map","import checkProcessable from '../../utils/validators/checkProcessable.js';\nimport { compareIntensity } from '../utils/compareIntensity.js';\nimport { getGaussianPoints } from '../utils/getGaussianPoints.js';\nimport { getKeypointPatch } from './utils/getKeypointPatch.js';\n/**\n * Generate the rBRIEF descriptors for the desired keypoints of an image.\n * The rBRIEF descriptors are presented in these articles:\n * - ORB article: DOI: 10.1109/ICCV.2011.6126544\n * - rBRIEF article: DOI: 10.1007/978-3-642-15561-1_56.\n * @param image - Source image of the keypoints.\n * @param keypoints - Keypoints for which the descriptors are wanted.\n * @param options - Get rotated BRIEF descriptors options.\n * @returns The descriptors for the given keypoints.\n */\nexport function getBriefDescriptors(image, keypoints, options = {}) {\n    const { patchSize = 31, descriptorLength = 256, smoothingOptions = {\n        sigma: Math.sqrt(2),\n        size: Math.min(image.height, image.width, 9),\n    }, pointsDistributionOptions, } = options;\n    checkProcessable(image, {\n        alpha: false,\n        colorModel: 'GREY',\n    });\n    if (!(patchSize % 2)) {\n        throw new TypeError('patchSize must be an odd integer');\n    }\n    if (Math.min(image.width, image.height) < patchSize) {\n        throw new RangeError(`image is too small for patchSize = ${patchSize}`);\n    }\n    const gaussianPoints = getGaussianPoints(patchSize, patchSize, {\n        ...pointsDistributionOptions,\n        nbPoints: descriptorLength * 2,\n    });\n    const smoothed = image.gaussianBlur(smoothingOptions);\n    const descriptors = [];\n    const filteredKeypoints = [];\n    for (const keypoint of keypoints) {\n        let patch;\n        try {\n            patch = getKeypointPatch(smoothed, keypoint, { patchSize });\n        }\n        catch {\n            continue;\n        }\n        if (patch === null)\n            continue;\n        const descriptor = new Uint8Array(descriptorLength);\n        for (let i = 0; i < descriptorLength; i++) {\n            const p1 = gaussianPoints[i];\n            const p2 = gaussianPoints[i + descriptorLength];\n            descriptor[i] = Number(compareIntensity(patch, p1, p2));\n        }\n        descriptors.push(descriptor);\n        filteredKeypoints.push(keypoint);\n    }\n    return { keypoints: filteredKeypoints, descriptors };\n}\n//# sourceMappingURL=getBriefDescriptors.js.map","import { getBestKeypointsInRadius } from '../keypoints/getBestKeypointsInRadius.js';\nimport { getOrientedFastKeypoints } from '../keypoints/getOrientedFastKeypoints.js';\nimport { getBriefDescriptors } from './getBriefDescriptors.js';\n/**\n * Get the keypoints and corresponding descriptors for an image.\n * @param image - Image to process.\n * @param options - Get brief options.\n * @returns The Brief (keypoints and corresponding descriptors).\n */\nexport function getBrief(image, options = {}) {\n    const { centroidPatchDiameter = 15, bestKptRadius = 10, minScore } = options;\n    const allSourceKeypoints = getOrientedFastKeypoints(image, {\n        centroidPatchDiameter,\n    });\n    const sourceKeypoints = getBestKeypointsInRadius(allSourceKeypoints, bestKptRadius);\n    const brief = getBriefDescriptors(image, sourceKeypoints);\n    if (minScore) {\n        for (let i = 0; i < brief.keypoints.length; i++) {\n            if (brief.keypoints[i].score < minScore) {\n                return {\n                    keypoints: brief.keypoints.slice(0, i - 1),\n                    descriptors: brief.descriptors.slice(0, i - 1),\n                };\n            }\n        }\n    }\n    return brief;\n}\n//# sourceMappingURL=getBrief.js.map","/**\n * Compute the pq order intensity moment of the image\n * relatively to the origin defined in the options.\n * Original article: {@link https://doi.org/10.1006/cviu.1998.0719}.\n * @see {@link https://en.wikipedia.org/wiki/Image_moment}\n * @param image - Image to process. Should have an odd number of rows and columns.\n * @param p - Order along x.\n * @param q - Order along y.\n * @param options - Get intensity moment options.\n * @returns The intensity moment of order pq.\n */\nexport function getIntensityMoment(image, p, q, options = {}) {\n    const { origin = image.getCoordinates('center') } = options;\n    const moment = new Array(image.channels).fill(0);\n    for (let row = 0; row < image.height; row++) {\n        for (let column = 0; column < image.width; column++) {\n            const xDistance = column - origin.column;\n            const yDistance = row - origin.row;\n            for (let channel = 0; channel < image.channels; channel++) {\n                const intensity = image.getValue(column, row, channel);\n                moment[channel] += xDistance ** p * yDistance ** q * intensity;\n            }\n        }\n    }\n    return moment;\n}\n//# sourceMappingURL=getIntensityMoment.js.map","import { getIntensityMoment } from './getIntensityMoment.js';\n/**\n * Compute the intensity centroid of an image for each channel relatively to the center of the image.\n * Original article: {@link https://doi.org/10.1006/cviu.1998.0719}.\n * @see {@link https://en.wikipedia.org/wiki/Image_moment}\n * @param image - Image to process.\n * @returns The intensity centroid of each channel of the image.\n */\nexport function getIntensityCentroid(image) {\n    const moment10 = getIntensityMoment(image, 1, 0);\n    const moment01 = getIntensityMoment(image, 0, 1);\n    const moment00 = getIntensityMoment(image, 0, 0);\n    const centroid = [];\n    for (let channel = 0; channel < image.channels; channel++) {\n        if (moment00[channel] === 0) {\n            centroid.push({\n                column: 0,\n                row: 0,\n            });\n        }\n        else {\n            centroid.push({\n                column: moment10[channel] / moment00[channel],\n                row: moment01[channel] / moment00[channel],\n            });\n        }\n    }\n    return centroid;\n}\n//# sourceMappingURL=getIntensityCentroid.js.map","/**\n * Compute the Hamming distance between two bit strings.\n * @see {@link https://en.wikipedia.org/wiki/Hamming_distance}\n * @param descriptor1 - First bit string.\n * @param descriptor2 - Second bit string.\n * @returns The Hamming distance.\n */\nexport function getHammingDistance(descriptor1, descriptor2) {\n    let sum = 0;\n    for (let i = 0; i < descriptor1.length; i++) {\n        sum += descriptor1[i] ^ descriptor2[i];\n    }\n    return sum;\n}\n//# sourceMappingURL=getHammingDistance.js.map","import { getHammingDistance } from './getHammingDistance.js';\n/**\n * Find the best match for each of the source descriptors using brute force matching.\n * @param source - Source descriptors.\n * @param destination - Destination descriptors.\n * @param options - Brute force amtch options.\n * @returns The best match for each source descriptor.\n */\nexport function bruteForceOneMatch(source, destination, options = {}) {\n    const { sort = !!options.nbBestMatches, nbBestMatches = source.length } = options;\n    const matches = [];\n    for (let sourceIndex = 0; sourceIndex < source.length; sourceIndex++) {\n        let minDistance = Number.POSITIVE_INFINITY;\n        let index = 0;\n        for (let destinationIndex = 0; destinationIndex < destination.length; destinationIndex++) {\n            const distance = getHammingDistance(source[sourceIndex], destination[destinationIndex]);\n            if (distance < minDistance) {\n                minDistance = distance;\n                index = destinationIndex;\n            }\n        }\n        matches.push({\n            sourceIndex,\n            destinationIndex: index,\n            distance: minDistance,\n        });\n    }\n    if (sort) {\n        matches.sort((a, b) => a.distance - b.distance);\n    }\n    return matches.slice(0, nbBestMatches);\n}\n//# sourceMappingURL=bruteForceMatch.js.map","/**\n * Sort array of matches by source index and then destination index.\n * @param matches - Array of matches to sort.\n * @returns Sorted copy of the array of matches.\n */\nexport function sortBySourceDest(matches) {\n    const sorted = matches.slice();\n    sorted.sort((match1, match2) => {\n        if (match1.sourceIndex < match2.sourceIndex)\n            return -1;\n        if (match1.sourceIndex > match2.sourceIndex)\n            return 1;\n        return match1.destinationIndex - match2.destinationIndex;\n    });\n    return sorted;\n}\n/**\n * Sort array of matches by destination index and then source index.\n * @param matches - Array of matches to sort.\n * @returns Sorted copy of the array of matches.\n */\nexport function sortByDestSource(matches) {\n    const sorted = matches.slice();\n    sorted.sort((match1, match2) => {\n        if (match1.destinationIndex < match2.destinationIndex)\n            return -1;\n        if (match1.destinationIndex > match2.destinationIndex)\n            return 1;\n        return match1.sourceIndex - match2.sourceIndex;\n    });\n    return sorted;\n}\n//# sourceMappingURL=sortBySourceDest.js.map","import { sortByDestSource, sortBySourceDest, } from '../utils/sortBySourceDest.js';\nimport { bruteForceOneMatch } from './bruteForceMatch.js';\n/**\n * Get the crosscheck matches from the source and destination descriptors.\n * @param source - Source descriptors.\n * @param destination - Destination descriptors.\n * @returns The array of crossckeck matches.\n */\nexport function getCrosscheckMatches(source, destination) {\n    const srcMatches = bruteForceOneMatch(source, destination);\n    const dstMatches = bruteForceOneMatch(destination, source);\n    return crosscheck(srcMatches, dstMatches);\n}\n/**\n * Return the indices of pairs the keypoints that are mutually the best match.\n * This means that if B is the best match for A, A should be the best match for B.\n * The distance of the resulting matches is the maximum distance between the two.\n * @param srcDstMatches - Best matches computed from source do destination.\n * @param dstSrcMatches - Best matches computed from destination to source.\n * @returns The pairs of keypoints that are mutually the best match.\n */\nexport function crosscheck(srcDstMatches, dstSrcMatches) {\n    const result = [];\n    const sortedSrcDst = sortBySourceDest(srcDstMatches);\n    const sortedDstSrc = sortByDestSource(dstSrcMatches);\n    let pointer1 = 0;\n    let pointer2 = 0;\n    while (pointer1 < sortedSrcDst.length && pointer2 < sortedDstSrc.length) {\n        const match1 = sortedSrcDst[pointer1];\n        const match2 = sortedDstSrc[pointer2];\n        if (match1.sourceIndex > match2.destinationIndex) {\n            pointer2++;\n        }\n        else if (match1.sourceIndex < match2.destinationIndex) {\n            pointer1++;\n        }\n        else if (match1.destinationIndex > match2.sourceIndex) {\n            pointer2++;\n        }\n        else if (match1.destinationIndex < match2.sourceIndex) {\n            pointer1++;\n        }\n        else {\n            result.push({\n                distance: Math.max(match1.distance, match2.distance),\n                sourceIndex: match1.sourceIndex,\n                destinationIndex: match1.destinationIndex,\n            });\n            pointer1++;\n            pointer2++;\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=getCrosscheckMatches.js.map","/**\n * Validate an array of channels.\n * @param channels - Array of channels.\n * @param image - The image being processed.\n */\nexport function validateChannels(channels, image) {\n    for (const channel of channels) {\n        validateChannel(channel, image);\n    }\n}\n/**\n * Validates that a channel index passed by the user is within range and is an integer.\n * @param channel - Channel index to validate.\n * @param image - The image being processed.\n */\nexport function validateChannel(channel, image) {\n    if (!Number.isInteger(channel) || channel >= image.channels || channel < 0) {\n        throw new RangeError(`invalid channel: ${channel}. It must be a positive integer smaller than ${image.channels}`);\n    }\n}\n/**\n * Validates that array of svalues passed by the user are positive and within range.\n * @param values - Array of values to validate.\n * @param image - Image from which the values come.\n */\nexport function validateValues(values, image) {\n    for (const value of values) {\n        validateValue(value, image);\n    }\n}\n/**\n * Validates that a value passed by the user is positive and within range.\n * @param value - Value to validate.\n * @param image - Image from which the value comes.\n */\nexport function validateValue(value, image) {\n    if (value > image.maxValue || value < 0) {\n        throw new RangeError(`invalid value: ${value}. It must be a positive value smaller than ${image.maxValue + 1}`);\n    }\n}\n/**\n * Validate that two images are compatible for comparison functions.\n * @param image - First image.\n * @param other - Second image.\n */\nexport function validateForComparison(image, other) {\n    if (image.width !== other.width || image.height !== other.height) {\n        throw new RangeError('both images must have the same size');\n    }\n    if (image.alpha !== other.alpha || image.bitDepth !== other.bitDepth) {\n        throw new RangeError('both images must have the same alpha and bitDepth');\n    }\n    if (image.channels !== other.channels) {\n        throw new RangeError('both images must have the same number of channels');\n    }\n}\n/**\n * Checks if the given color is valid.\n * @param color - Color to check.\n * @param image - Image.\n */\nexport function validateColor(color, image) {\n    validateChannel(color.length - 1, image);\n    validateValues(color, image);\n}\n//# sourceMappingURL=validators.js.map","import { getOutputImage } from '../utils/getOutputImage.js';\nimport { validateChannels } from '../utils/validators/validators.js';\n/**\n *\n * Divides image pixels by a certain value.\n * @param image - image to which division will be applied.\n * @param value - Value by which each pixel will be divided.\n * @param options - Divide options\n * @returns image.\n */\nexport function divide(image, value, options = {}) {\n    const { channels = new Array(image.channels).fill(0).map((value, index) => index), } = options;\n    validateChannels(channels, image);\n    if (value === 0) {\n        throw new TypeError(`Cannot divide by 0`);\n    }\n    const newImage = getOutputImage(image, options, { clone: true });\n    if (channels.length === 0) {\n        return newImage;\n    }\n    for (const channel of channels) {\n        for (let row = 0; row < newImage.height; row++) {\n            for (let column = 0; column < newImage.width; column++) {\n                const newIntensity = newImage.getValue(column, row, channel) / value;\n                newImage.setClampedValue(column, row, channel, newIntensity);\n            }\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=divide.js.map","/**\n * Compute the Root Mean Square Error (RMSE) between two images. It is just the square root of the MSE.\n * @see {@link https://en.wikipedia.org/wiki/Root-mean-square_deviation}\n * @param image - First image.\n * @param otherImage - Second image.\n * @returns RMSE of the two images.\n */\nexport function computeRmse(image, otherImage) {\n    const globalMse = computeMse(image, otherImage);\n    return Math.sqrt(globalMse);\n}\n/**\n * Compute the Mean Square Error (MSE) between two images.\n * The input images can have any number of channels.\n * @param image - First image.\n * @param otherImage - Second image.\n * @returns MSE of the two images.\n */\nexport function computeMse(image, otherImage) {\n    const difference = image.subtract(otherImage, { absolute: true });\n    let sum = 0;\n    for (let i = 0; i < image.size; i++) {\n        for (let channel = 0; channel < image.channels; channel++) {\n            const value = difference.getValueByIndex(i, channel);\n            sum += value ** 2;\n        }\n    }\n    return sum / (image.size * image.channels);\n}\n//# sourceMappingURL=computeRmse.js.map","import { computeRmse } from './computeRmse.js';\n/**\n * Compute the Peak signal-to-noise ratio (PSNR) between two images.\n * The larger the PSNR, the more similar the images.\n * @see {@link https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio}\n * @param image - First image.\n * @param otherImage - Second image.\n * @returns PSNR of the two images in decibels.\n */\nexport function computePsnr(image, otherImage) {\n    const rmsePixel = computeRmse(image, otherImage);\n    return 20 * Math.log10(image.maxValue / (rmsePixel + Number.MIN_VALUE));\n}\n//# sourceMappingURL=computePsnr.js.map","import { match } from 'ts-pattern';\n/**\n * Get the default color for a given color model.\n * The color is black for images and 1 for masks.\n * @param image - The used image.\n * @returns Default color.\n */\nexport function getDefaultColor(image) {\n    return match(image.colorModel)\n        .with('GREY', () => [0])\n        .with('GREYA', () => [0, image.maxValue])\n        .with('RGB', () => [0, 0, 0])\n        .with('RGBA', () => [0, 0, 0, image.maxValue])\n        .with('BINARY', () => [1])\n        .exhaustive();\n}\n//# sourceMappingURL=getDefaultColor.js.map","import { Image } from '../Image.js';\nimport { getDefaultColor } from './getDefaultColor.js';\nimport { assert } from './validators/assert.js';\n/**\n * Blend the given pixel with the pixel at the specified location in the image.\n * @param image - The image with which to blend.\n * @param column - Column of the target pixel.\n * @param row - Row of the target pixel.\n * @param color - Color with which to blend the image pixel. @default `'Opaque black'`.\n */\nexport function setBlendedPixel(image, column, row, color) {\n    color = color ?? getDefaultColor(image);\n    if (!image.alpha) {\n        image.setPixel(column, row, color);\n    }\n    else {\n        assert(image instanceof Image);\n        const sourceAlpha = color.at(-1);\n        if (sourceAlpha === image.maxValue) {\n            image.setPixel(column, row, color);\n            return;\n        }\n        const targetAlpha = image.getValue(column, row, image.channels - 1);\n        const newAlpha = sourceAlpha + targetAlpha * (1 - sourceAlpha / image.maxValue);\n        image.setValue(column, row, image.channels - 1, newAlpha);\n        for (let component = 0; component < image.components; component++) {\n            const sourceComponent = color[component];\n            const targetComponent = image.getValue(column, row, component);\n            const newComponent = (sourceComponent * sourceAlpha +\n                targetComponent * targetAlpha * (1 - sourceAlpha / image.maxValue)) /\n                newAlpha;\n            image.setValue(column, row, component, newComponent);\n        }\n    }\n}\n//# sourceMappingURL=setBlendedPixel.js.map","import { setBlendedPixel } from './setBlendedPixel.js';\n/**\n * Blend the given pixel with the pixel at the specified location in the image if the pixel is in image's bounds.\n * @param image - The image with which to blend.\n * @param column - Column of the target pixel.\n * @param row - Row of the target pixel.\n * @param color - Color with which to blend the image pixel. @default `'Opaque black'`.\n */\nexport function setBlendedVisiblePixel(image, column, row, color) {\n    if (column >= 0 && column < image.width && row >= 0 && row < image.height) {\n        setBlendedPixel(image, column, row, color);\n    }\n}\n//# sourceMappingURL=setBlendedVisiblePixel.js.map","/**\n * Round a point to the nearest integer.\n * @param point - Point to round.\n * @returns The rounded point.\n */\nexport function roundPoint(point) {\n    return {\n        row: Math.round(point.row),\n        column: Math.round(point.column),\n    };\n}\n//# sourceMappingURL=roundPoint.js.map","import { circle } from 'bresenham-zingl';\nimport { getDefaultColor } from '../utils/getDefaultColor.js';\nimport { getOutputImage } from '../utils/getOutputImage.js';\nimport { setBlendedVisiblePixel } from '../utils/setBlendedVisiblePixel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { validateColor } from '../utils/validators/validators.js';\nimport { roundPoint } from './utils/roundPoint.js';\n/**\n * Draw a circle defined by center and radius.\n * @param image - Image to process.\n * @param center - Circle center point.\n * @param radius - Circle radius.\n * @param options - Draw circle options.\n * @returns The original drawn image.\n */\nexport function drawCircleOnImage(image, center, radius, options = {}) {\n    const newImage = getOutputImage(image, options, { clone: true });\n    const { strokeColor = getDefaultColor(newImage), fillColor } = options;\n    validateColor(strokeColor, newImage);\n    checkProcessable(newImage, {\n        bitDepth: [8, 16],\n    });\n    if (radius < 0) {\n        throw new RangeError('circle radius must be positive');\n    }\n    center = roundPoint(center);\n    radius = Math.round(radius);\n    if (radius === 0) {\n        setBlendedVisiblePixel(newImage, center.column, center.row, strokeColor);\n        return newImage;\n    }\n    if (!fillColor) {\n        circle(center.column, center.row, radius, (column, row) => {\n            setBlendedVisiblePixel(newImage, column, row, strokeColor);\n        });\n    }\n    else {\n        if (radius === 1) {\n            setBlendedVisiblePixel(newImage, center.column, center.row, fillColor);\n        }\n        //Starting points for the top and bottom row of the circle.\n        let prevRow = center.row + radius;\n        let index = 0;\n        circle(center.column, center.row, radius, (column, row) => {\n            setBlendedVisiblePixel(newImage, column, row, strokeColor);\n            // Filling the first line of the circle.\n            if (index === 0) {\n                newImage.drawLine({ row, column: column - 1 }, {\n                    row,\n                    column: center.column - (column - center.column - 1),\n                }, { strokeColor: fillColor, out: newImage });\n            }\n            // The algorithm used is Bresenham's circle algorithm (@link https://www.geeksforgeeks.org/bresenhams-circle-drawing-algorithm/) to find points that constitute the circle outline. However, in this algorithm The circle is divided in 4 parts instead of 8: top, right, bottom and left.\n            // The algorithm draws a point per quadrant until the circle is complete.\n            // We use bottom (index % 4 === 1, quadrant 2) point of the outline to fill the circle with color.\n            // Filling half of the circle.\n            if (index % 4 === 1 && prevRow !== row) {\n                // For quadrant 2, column < center.column\n                newImage.drawLine({ row, column: column + 1 }, {\n                    row,\n                    column: center.column - (column - center.column + 1),\n                }, { strokeColor: fillColor, out: newImage });\n                prevRow = row;\n                // Filling top half of the circle.\n                newImage.drawLine({ row: center.row - (row - center.row), column: column + 1 }, {\n                    row: center.row - (row - center.row),\n                    column: center.column - (column - center.column + 1),\n                }, { strokeColor: fillColor, out: newImage });\n            }\n            index++;\n        });\n    }\n    return newImage;\n}\n//# sourceMappingURL=drawCircleOnImage.js.map","import { line } from 'bresenham-zingl';\nimport { getDefaultColor } from '../utils/getDefaultColor.js';\nimport { getOutputImage } from '../utils/getOutputImage.js';\nimport { setBlendedVisiblePixel } from '../utils/setBlendedVisiblePixel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { validateColor } from '../utils/validators/validators.js';\n/**\n * Draw a line defined by two points onto an image.\n * @param image - Image to process.\n * @param from - Line starting point.\n * @param to - Line ending point.\n * @param options - Draw Line options.\n * @returns The mask with the line drawing.\n */\nexport function drawLineOnImage(image, from, to, options = {}) {\n    const newImage = getOutputImage(image, options, { clone: true });\n    const { strokeColor = getDefaultColor(newImage), origin = { column: 0, row: 0 }, } = options;\n    validateColor(strokeColor, newImage);\n    checkProcessable(newImage, {\n        bitDepth: [8, 16],\n    });\n    line(Math.round(origin.column + from.column), Math.round(origin.row + from.row), Math.round(origin.column + to.column), Math.round(origin.row + to.row), (column, row) => {\n        setBlendedVisiblePixel(newImage, column, row, strokeColor);\n    });\n    return newImage;\n}\n//# sourceMappingURL=drawLineOnImage.js.map","import { line } from 'bresenham-zingl';\nimport { maskToOutputMask } from '../utils/getOutputImage.js';\n/**\n * Draw a line defined by two points onto a mask.\n * @param mask - Mask to process.\n * @param from - Line starting point.\n * @param to - Line ending point.\n * @param options - Draw Line options.\n * @returns The mask with the line drawing.\n */\nexport function drawLineOnMask(mask, from, to, options = {}) {\n    const { origin = { column: 0, row: 0 } } = options;\n    const newMask = maskToOutputMask(mask, options, { clone: true });\n    line(Math.round(origin.column + from.column), Math.round(origin.row + from.row), Math.round(origin.column + to.column), Math.round(origin.row + to.row), (column, row) => {\n        newMask.setVisiblePixel(column, row, [1]);\n    });\n    return newMask;\n}\n//# sourceMappingURL=drawLineOnMask.js.map","import { getDefaultColor } from '../utils/getDefaultColor.js';\nimport { getOutputImage } from '../utils/getOutputImage.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { validateColor } from '../utils/validators/validators.js';\n/**\n * Draw a polyline defined by an array of points on an image.\n * @param image - Image to process.\n * @param points - Polyline array of points.\n * @param options - Draw polyline options.\n * @returns The image with the polyline drawing.\n */\nexport function drawPolylineOnImage(image, points, options = {}) {\n    const { strokeColor: color = getDefaultColor(image), origin = { column: 0, row: 0 }, } = options;\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n    });\n    const newImage = getOutputImage(image, options, { clone: true });\n    validateColor(color, newImage);\n    for (let i = 0; i < points.length - 1; i++) {\n        const from = points[i];\n        const to = points[i + 1];\n        newImage.drawLine(from, to, { out: newImage, strokeColor: color, origin });\n    }\n    return newImage;\n}\n//# sourceMappingURL=drawPolylineOnImage.js.map","import { maskToOutputMask } from '../utils/getOutputImage.js';\n/**\n * Draw a polyline defined by an array of points on an image.\n * @param mask - Mask to process.\n * @param points - Polyline array of points.\n * @param options - Draw polyline options.\n * @returns The mask with the polyline drawing.\n */\nexport function drawPolylineOnMask(mask, points, options = {}) {\n    const newImage = maskToOutputMask(mask, options, { clone: true });\n    for (let i = 0; i < points.length - 1; i++) {\n        const from = points[i];\n        const to = points[i + 1];\n        newImage.drawLine(from, to, { out: newImage, origin: options.origin });\n    }\n    return newImage;\n}\n//# sourceMappingURL=drawPolylineOnMask.js.map","\"use strict\"\n\nmodule.exports = twoProduct\n\nvar SPLITTER = +(Math.pow(2, 27) + 1.0)\n\nfunction twoProduct(a, b, result) {\n  var x = a * b\n\n  var c = SPLITTER * a\n  var abig = c - a\n  var ahi = c - abig\n  var alo = a - ahi\n\n  var d = SPLITTER * b\n  var bbig = d - b\n  var bhi = d - bbig\n  var blo = b - bhi\n\n  var err1 = x - (ahi * bhi)\n  var err2 = err1 - (alo * bhi)\n  var err3 = err2 - (ahi * blo)\n\n  var y = alo * blo - err3\n\n  if(result) {\n    result[0] = y\n    result[1] = x\n    return result\n  }\n\n  return [ y, x ]\n}","\"use strict\"\n\nmodule.exports = linearExpansionSum\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction linearExpansionSum(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}","\"use strict\"\n\nmodule.exports = fastTwoSum\n\nfunction fastTwoSum(a, b, result) {\n\tvar x = a + b\n\tvar bv = x - a\n\tvar av = x - bv\n\tvar br = b - bv\n\tvar ar = a - av\n\tif(result) {\n\t\tresult[0] = ar + br\n\t\tresult[1] = x\n\t\treturn result\n\t}\n\treturn [ar+br, x]\n}","\"use strict\"\n\nvar twoProduct = require(\"two-product\")\nvar twoSum = require(\"two-sum\")\n\nmodule.exports = scaleLinearExpansion\n\nfunction scaleLinearExpansion(e, scale) {\n  var n = e.length\n  if(n === 1) {\n    var ts = twoProduct(e[0], scale)\n    if(ts[0]) {\n      return ts\n    }\n    return [ ts[1] ]\n  }\n  var g = new Array(2 * n)\n  var q = [0.1, 0.1]\n  var t = [0.1, 0.1]\n  var count = 0\n  twoProduct(e[0], scale, q)\n  if(q[0]) {\n    g[count++] = q[0]\n  }\n  for(var i=1; i<n; ++i) {\n    twoProduct(e[i], scale, t)\n    var pq = q[1]\n    twoSum(pq, t[0], q)\n    if(q[0]) {\n      g[count++] = q[0]\n    }\n    var a = t[1]\n    var b = q[1]\n    var x = a + b\n    var bv = x - a\n    var y = b - bv\n    q[1] = x\n    if(y) {\n      g[count++] = y\n    }\n  }\n  if(q[1]) {\n    g[count++] = q[1]\n  }\n  if(count === 0) {\n    g[count++] = 0.0\n  }\n  g.length = count\n  return g\n}","\"use strict\"\n\nmodule.exports = robustSubtract\n\n//Easy case: Add two scalars\nfunction scalarScalar(a, b) {\n  var x = a + b\n  var bv = x - a\n  var av = x - bv\n  var br = b - bv\n  var ar = a - av\n  var y = ar + br\n  if(y) {\n    return [y, x]\n  }\n  return [x]\n}\n\nfunction robustSubtract(e, f) {\n  var ne = e.length|0\n  var nf = f.length|0\n  if(ne === 1 && nf === 1) {\n    return scalarScalar(e[0], -f[0])\n  }\n  var n = ne + nf\n  var g = new Array(n)\n  var count = 0\n  var eptr = 0\n  var fptr = 0\n  var abs = Math.abs\n  var ei = e[eptr]\n  var ea = abs(ei)\n  var fi = -f[fptr]\n  var fa = abs(fi)\n  var a, b\n  if(ea < fa) {\n    b = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    b = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  if((eptr < ne && ea < fa) || (fptr >= nf)) {\n    a = ei\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n      ea = abs(ei)\n    }\n  } else {\n    a = fi\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n      fa = abs(fi)\n    }\n  }\n  var x = a + b\n  var bv = x - a\n  var y = b - bv\n  var q0 = y\n  var q1 = x\n  var _x, _bv, _av, _br, _ar\n  while(eptr < ne && fptr < nf) {\n    if(ea < fa) {\n      a = ei\n      eptr += 1\n      if(eptr < ne) {\n        ei = e[eptr]\n        ea = abs(ei)\n      }\n    } else {\n      a = fi\n      fptr += 1\n      if(fptr < nf) {\n        fi = -f[fptr]\n        fa = abs(fi)\n      }\n    }\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n  }\n  while(eptr < ne) {\n    a = ei\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    }\n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    eptr += 1\n    if(eptr < ne) {\n      ei = e[eptr]\n    }\n  }\n  while(fptr < nf) {\n    a = fi\n    b = q0\n    x = a + b\n    bv = x - a\n    y = b - bv\n    if(y) {\n      g[count++] = y\n    } \n    _x = q1 + x\n    _bv = _x - q1\n    _av = _x - _bv\n    _br = x - _bv\n    _ar = q1 - _av\n    q0 = _ar + _br\n    q1 = _x\n    fptr += 1\n    if(fptr < nf) {\n      fi = -f[fptr]\n    }\n  }\n  if(q0) {\n    g[count++] = q0\n  }\n  if(q1) {\n    g[count++] = q1\n  }\n  if(!count) {\n    g[count++] = 0.0  \n  }\n  g.length = count\n  return g\n}","\"use strict\"\n\nvar twoProduct = require(\"two-product\")\nvar robustSum = require(\"robust-sum\")\nvar robustScale = require(\"robust-scale\")\nvar robustSubtract = require(\"robust-subtract\")\n\nvar NUM_EXPAND = 5\n\nvar EPSILON     = 1.1102230246251565e-16\nvar ERRBOUND3   = (3.0 + 16.0 * EPSILON) * EPSILON\nvar ERRBOUND4   = (7.0 + 56.0 * EPSILON) * EPSILON\n\nfunction orientation_3(sum, prod, scale, sub) {\n  return function orientation3Exact(m0, m1, m2) {\n    var p = sum(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])))\n    var n = sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0]))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation_4(sum, prod, scale, sub) {\n  return function orientation4Exact(m0, m1, m2, m3) {\n    var p = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))))\n    var n = sum(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation_5(sum, prod, scale, sub) {\n  return function orientation5Exact(m0, m1, m2, m3, m4) {\n    var p = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m1[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), -m2[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m3[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), -m4[3]), sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m3[2]), scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m1[3])))), sum(sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m3[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), -m4[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m3[2]))), m0[3]))), sum(scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m1[3]), sum(scale(sum(scale(sum(prod(m1[1], m3[0]), prod(-m3[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m3[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m3[3])))))\n    var n = sum(sum(sum(scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m2[2]), sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), -m3[2]), scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m3[1], m4[0]), prod(-m4[1], m3[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m3[2]), scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), m4[2]))), -m2[3])), sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), m3[3]), scale(sum(scale(sum(prod(m2[1], m3[0]), prod(-m3[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m3[0]), prod(-m3[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m3[2]))), -m4[3]))), sum(sum(scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m1[2]), sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), -m2[2]), scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m4[2]))), m0[3]), scale(sum(scale(sum(prod(m2[1], m4[0]), prod(-m4[1], m2[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m2[2]), scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), m4[2]))), -m1[3])), sum(scale(sum(scale(sum(prod(m1[1], m4[0]), prod(-m4[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m4[0]), prod(-m4[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m4[2]))), m2[3]), scale(sum(scale(sum(prod(m1[1], m2[0]), prod(-m2[1], m1[0])), m0[2]), sum(scale(sum(prod(m0[1], m2[0]), prod(-m2[1], m0[0])), -m1[2]), scale(sum(prod(m0[1], m1[0]), prod(-m1[1], m0[0])), m2[2]))), -m4[3]))))\n    var d = sub(p, n)\n    return d[d.length - 1]\n  }\n}\n\nfunction orientation(n) {\n  var fn =\n    n === 3 ? orientation_3 :\n    n === 4 ? orientation_4 : orientation_5\n\n  return fn(robustSum, twoProduct, robustScale, robustSubtract)\n}\n\nvar orientation3Exact = orientation(3)\nvar orientation4Exact = orientation(4)\n\nvar CACHED = [\n  function orientation0() { return 0 },\n  function orientation1() { return 0 },\n  function orientation2(a, b) {\n    return b[0] - a[0]\n  },\n  function orientation3(a, b, c) {\n    var l = (a[1] - c[1]) * (b[0] - c[0])\n    var r = (a[0] - c[0]) * (b[1] - c[1])\n    var det = l - r\n    var s\n    if(l > 0) {\n      if(r <= 0) {\n        return det\n      } else {\n        s = l + r\n      }\n    } else if(l < 0) {\n      if(r >= 0) {\n        return det\n      } else {\n        s = -(l + r)\n      }\n    } else {\n      return det\n    }\n    var tol = ERRBOUND3 * s\n    if(det >= tol || det <= -tol) {\n      return det\n    }\n    return orientation3Exact(a, b, c)\n  },\n  function orientation4(a,b,c,d) {\n    var adx = a[0] - d[0]\n    var bdx = b[0] - d[0]\n    var cdx = c[0] - d[0]\n    var ady = a[1] - d[1]\n    var bdy = b[1] - d[1]\n    var cdy = c[1] - d[1]\n    var adz = a[2] - d[2]\n    var bdz = b[2] - d[2]\n    var cdz = c[2] - d[2]\n    var bdxcdy = bdx * cdy\n    var cdxbdy = cdx * bdy\n    var cdxady = cdx * ady\n    var adxcdy = adx * cdy\n    var adxbdy = adx * bdy\n    var bdxady = bdx * ady\n    var det = adz * (bdxcdy - cdxbdy)\n            + bdz * (cdxady - adxcdy)\n            + cdz * (adxbdy - bdxady)\n    var permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz)\n                  + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz)\n                  + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz)\n    var tol = ERRBOUND4 * permanent\n    if ((det > tol) || (-det > tol)) {\n      return det\n    }\n    return orientation4Exact(a,b,c,d)\n  }\n]\n\nfunction slowOrient(args) {\n  var proc = CACHED[args.length]\n  if(!proc) {\n    proc = CACHED[args.length] = orientation(args.length)\n  }\n  return proc.apply(undefined, args)\n}\n\nfunction proc (slow, o0, o1, o2, o3, o4, o5) {\n  return function getOrientation(a0, a1, a2, a3, a4) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return 0;\n      case 2:\n        return o2(a0, a1)\n      case 3:\n        return o3(a0, a1, a2)\n      case 4:\n        return o4(a0, a1, a2, a3)\n      case 5:\n        return o5(a0, a1, a2, a3, a4)\n    }\n\n    var s = new Array(arguments.length)\n    for (var i = 0; i < arguments.length; ++i) {\n      s[i] = arguments[i]\n    }\n    return slow(s)\n  }\n}\n\nfunction generateOrientationProc() {\n  while(CACHED.length <= NUM_EXPAND) {\n    CACHED.push(orientation(CACHED.length))\n  }\n  module.exports = proc.apply(undefined, [slowOrient].concat(CACHED))\n  for(var i=0; i<=NUM_EXPAND; ++i) {\n    module.exports[i] = CACHED[i]\n  }\n}\n\ngenerateOrientationProc()","module.exports = robustPointInPolygon\n\nvar orient = require('robust-orientation')\n\nfunction robustPointInPolygon(vs, point) {\n  var x = point[0]\n  var y = point[1]\n  var n = vs.length\n  var inside = 1\n  var lim = n\n  for(var i = 0, j = n-1; i<lim; j=i++) {\n    var a = vs[i]\n    var b = vs[j]\n    var yi = a[1]\n    var yj = b[1]\n    if(yj < yi) {\n      if(yj < y && y < yi) {\n        var s = orient(a, b, point)\n        if(s === 0) {\n          return 0\n        } else {\n          inside ^= (0 < s)|0\n        }\n      } else if(y === yi) {\n        var c = vs[(i+1)%n]\n        var yk = c[1]\n        if(yi < yk) {\n          var s = orient(a, b, point)\n          if(s === 0) {\n            return 0\n          } else {\n            inside ^= (0 < s)|0\n          }\n        }\n      }\n    } else if(yi < yj) {\n      if(yi < y && y < yj) {\n        var s = orient(a, b, point)\n        if(s === 0) {\n          return 0\n        } else {\n          inside ^= (s < 0)|0\n        }\n      } else if(y === yi) {\n        var c = vs[(i+1)%n]\n        var yk = c[1]\n        if(yk < yi) {\n          var s = orient(a, b, point)\n          if(s === 0) {\n            return 0\n          } else {\n            inside ^= (s < 0)|0\n          }\n        }\n      }\n    } else if(y === yi) {\n      var x0 = Math.min(a[0], b[0])\n      var x1 = Math.max(a[0], b[0])\n      if(i === 0) {\n        while(j>0) {\n          var k = (j+n-1)%n\n          var p = vs[k]\n          if(p[1] !== y) {\n            break\n          }\n          var px = p[0]\n          x0 = Math.min(x0, px)\n          x1 = Math.max(x1, px)\n          j = k\n        }\n        if(j === 0) {\n          if(x0 <= x && x <= x1) {\n            return 0\n          }\n          return 1 \n        }\n        lim = j+1\n      }\n      var y0 = vs[(j+n-1)%n][1]\n      while(i+1<lim) {\n        var p = vs[i+1]\n        if(p[1] !== y) {\n          break\n        }\n        var px = p[0]\n        x0 = Math.min(x0, px)\n        x1 = Math.max(x1, px)\n        i += 1\n      }\n      if(x0 <= x && x <= x1) {\n        return 0\n      }\n      var y1 = vs[(i+1)%n][1]\n      if(x < x0 && (y0 < y !== y1 < y)) {\n        inside ^= 1\n      }\n    }\n  }\n  return 2 * inside - 1\n}","/**\n * Convert object points into array points.\n * @param points - Array of points as objects.\n * @returns Array of points as arrays.\n */\nexport function arrayPointsToObjects(points) {\n    const result = [];\n    for (const point of points) {\n        result.push([point.column, point.row]);\n    }\n    return result;\n}\n//# sourceMappingURL=arrayPointsToObjects.js.map","import robustPointInPolygon from 'robust-point-in-polygon';\nimport { arrayPointsToObjects } from '../utils/arrayPointsToObjects.js';\nimport { getOutputImage } from '../utils/getOutputImage.js';\nimport { setBlendedVisiblePixel } from '../utils/setBlendedVisiblePixel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { validateColor } from '../utils/validators/validators.js';\nimport { deleteDuplicates } from './utils/deleteDuplicates.js';\n/**\n * Draw a polygon defined by an array of points onto an image.\n * @param image - Image to process.\n * @param points - Polygon vertices.\n * @param options - Draw Line options.\n * @returns The image with the polygon drawing.\n */\nexport function drawPolygonOnImage(image, points, options = {}) {\n    const { fillColor, origin = { column: 0, row: 0 }, ...otherOptions } = options;\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n    });\n    const newImage = getOutputImage(image, options, { clone: true });\n    if (fillColor === undefined) {\n        return newImage.drawPolyline([...points, points[0]], {\n            origin,\n            ...otherOptions,\n        });\n    }\n    else {\n        validateColor(fillColor, newImage);\n        const filteredPoints = deleteDuplicates(points);\n        const arrayPoints = arrayPointsToObjects(filteredPoints);\n        for (let row = 0; row < newImage.height; row++) {\n            for (let column = 0; column < newImage.width; column++) {\n                if (robustPointInPolygon(arrayPoints, [column, row]) === -1) {\n                    setBlendedVisiblePixel(newImage, Math.round(origin.column) + column, Math.round(origin.row) + row, fillColor);\n                }\n            }\n        }\n    }\n    return newImage.drawPolyline([...points, points[0]], {\n        origin,\n        ...otherOptions,\n    });\n}\n//# sourceMappingURL=drawPolygonOnImage.js.map","import robustPointInPolygon from 'robust-point-in-polygon';\nimport { arrayPointsToObjects } from '../utils/arrayPointsToObjects.js';\nimport { maskToOutputMask } from '../utils/getOutputImage.js';\nimport { deleteDuplicates } from './utils/deleteDuplicates.js';\n/**\n * Draw a polygon defined by an array of points on a mask.\n * @param mask - Mask to process.\n * @param points - Polygon vertices.\n * @param options - Draw Line options.\n * @returns The mask with the polygon drawing.\n */\nexport function drawPolygonOnMask(mask, points, options = {}) {\n    const { filled = false, origin = { column: 0, row: 0 }, ...otherOptions } = options;\n    const newMask = maskToOutputMask(mask, options, { clone: true });\n    if (!filled) {\n        return newMask.drawPolyline([...points, points[0]], {\n            origin,\n            ...otherOptions,\n        });\n    }\n    const filteredPoints = deleteDuplicates(points);\n    const arrayPoints = arrayPointsToObjects(filteredPoints);\n    for (let row = 0; row < newMask.height; row++) {\n        for (let column = 0; column < newMask.width; column++) {\n            if (robustPointInPolygon(arrayPoints, [column, row]) === -1) {\n                newMask.setBit(Math.round(origin.column) + column, Math.round(origin.row) + row, 1);\n            }\n        }\n    }\n    return newMask.drawPolyline([...points, points[0]], {\n        origin,\n        ...otherOptions,\n    });\n}\n//# sourceMappingURL=drawPolygonOnMask.js.map","import { Image } from '../Image.js';\nimport { getDefaultColor } from '../utils/getDefaultColor.js';\nimport { getOutputImage, maskToOutputMask } from '../utils/getOutputImage.js';\nimport { setBlendedVisiblePixel } from '../utils/setBlendedVisiblePixel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { validateColor } from \"../utils/validators/validators.js\";\n/**\n * Draw a rectangle defined by position of the top-left corner, width and height.\n * @param image - Image to process.\n * @param options - Draw rectangle options.\n * @returns The image with the rectangle drawing.\n */\nexport function drawRectangle(image, options = {}) {\n    const { width: rectangleWidth = image.width, height: rectangleHeight = image.height, origin = { column: 0, row: 0 }, strokeColor = getDefaultColor(image), fillColor, } = options;\n    const width = Math.round(rectangleWidth);\n    const height = Math.round(rectangleHeight);\n    const column = Math.round(origin.column);\n    const row = Math.round(origin.row);\n    let newImage;\n    if (image instanceof Image) {\n        checkProcessable(image, {\n            bitDepth: [8, 16],\n        });\n        validateColor(strokeColor, image);\n        if (fillColor) {\n            validateColor(fillColor, image);\n        }\n        newImage = getOutputImage(image, options, { clone: true });\n    }\n    else {\n        newImage = maskToOutputMask(image, options, { clone: true });\n    }\n    for (let currentColumn = column; currentColumn < column + width; currentColumn++) {\n        setBlendedVisiblePixel(newImage, currentColumn, row, strokeColor);\n        setBlendedVisiblePixel(newImage, currentColumn, row + height - 1, strokeColor);\n    }\n    for (let currentRow = row + 1; currentRow < row + height - 1; currentRow++) {\n        setBlendedVisiblePixel(newImage, column, currentRow, strokeColor);\n        setBlendedVisiblePixel(newImage, column + width - 1, currentRow, strokeColor);\n    }\n    if (fillColor) {\n        for (let currentRow = row + 1; currentRow < row + height - 1; currentRow++) {\n            for (let currentColumn = column + 1; currentColumn < column + width - 1; currentColumn++) {\n                setBlendedVisiblePixel(newImage, currentColumn, currentRow, fillColor);\n            }\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=drawRectangle.js.map","import { Image } from '../Image.js';\nimport { getDefaultColor } from '../utils/getDefaultColor.js';\nimport { getOutputImage, maskToOutputMask } from '../utils/getOutputImage.js';\nimport { setBlendedVisiblePixel } from '../utils/setBlendedVisiblePixel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { validateColor } from '../utils/validators/validators.js';\n/**\n * Draw a set of points on an image or a mask.\n * @param image - The image on which to draw the points.\n * @param points - Array of points.\n * @param options - Draw points on Image options.\n * @returns New mask.\n */\nexport function drawPoints(image, points, options = {}) {\n    const { color = getDefaultColor(image), origin = { row: 0, column: 0 } } = options;\n    let newImage;\n    if (image instanceof Image) {\n        newImage = getOutputImage(image, options, { clone: true });\n        validateColor(color, newImage);\n    }\n    else {\n        newImage = maskToOutputMask(image, options, { clone: true });\n    }\n    checkProcessable(newImage, {\n        bitDepth: [1, 8, 16],\n    });\n    for (const point of points) {\n        setBlendedVisiblePixel(newImage, Math.round(origin.column + point.column), Math.round(origin.row + point.row), color);\n    }\n    return newImage;\n}\n//# sourceMappingURL=drawPoints.js.map","import { getDefaultColor } from '../utils/getDefaultColor.js';\nimport { getOutputImage } from '../utils/getOutputImage.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { validateColor } from '../utils/validators/validators.js';\n/**\n * Draw a marker on the image.\n * @param image - Image to process.\n * @param point - Marker center point.\n * @param options - Draw marker options.\n * @returns The image with the marker drawing.\n */\nexport function drawMarker(image, point, options) {\n    const newImage = getOutputImage(image, options, { clone: true });\n    const { strokeColor = getDefaultColor(newImage), fillColor, shape = 'cross', size: markerSize = 1, } = options;\n    const size = Math.round(markerSize);\n    validateColor(strokeColor, newImage);\n    if (fillColor) {\n        validateColor(fillColor, newImage);\n    }\n    checkProcessable(newImage, {\n        bitDepth: [8, 16],\n    });\n    if (shape === 'circle') {\n        newImage.drawCircle(point, size, {\n            strokeColor,\n            fillColor,\n            out: newImage,\n        });\n    }\n    if (shape === 'triangle') {\n        const points = [\n            { row: point.row - size, column: point.column },\n            { row: point.row, column: point.column + size },\n            { row: point.row, column: point.column - size },\n        ];\n        newImage.drawPolygon(points, {\n            strokeColor,\n            fillColor,\n            out: newImage,\n        });\n    }\n    if (shape === 'cross') {\n        newImage.drawLine({ row: point.row - size, column: point.column }, { row: point.row + size, column: point.column }, { strokeColor, out: newImage });\n        newImage.drawLine({ row: point.row, column: point.column - size }, { row: point.row, column: point.column + size }, { strokeColor, out: newImage });\n    }\n    if (shape === 'square') {\n        const origin = {\n            row: point.row - (size - 1) / 2,\n            column: point.column - (size - 1) / 2,\n        };\n        newImage.drawRectangle({\n            origin,\n            width: size,\n            height: size,\n            strokeColor,\n            fillColor,\n            out: newImage,\n        });\n    }\n    return newImage;\n}\n//# sourceMappingURL=drawMarker.js.map","import { getOutputImage } from '../utils/getOutputImage.js';\nimport { drawMarker } from './drawMarker.js';\n/**\n * Draw markers on the image.\n * @param image - Image to process.\n * @param points - Markers center points.\n * @param options - Draw marker options.\n * @returns The image with the markers drawing.\n */\nexport function drawMarkers(image, points, options = {}) {\n    const newImage = getOutputImage(image, options, { clone: true });\n    for (const point of points) {\n        drawMarker(newImage, point, { ...options, out: newImage });\n    }\n    return newImage;\n}\n//# sourceMappingURL=drawMarkers.js.map","import { maskToOutputMask } from '../utils/getOutputImage.js';\n/**\n * Perform an AND operation on two masks.\n * @param mask - First mask.\n * @param otherMask - Second mask.\n * @param options - And options.\n * @returns AND of the two masks.\n */\nexport function and(mask, otherMask, options) {\n    const newMask = maskToOutputMask(mask, options);\n    if (mask.width !== otherMask.width || mask.height !== otherMask.height) {\n        throw new RangeError('both masks must have the same size');\n    }\n    for (let i = 0; i < newMask.size; i++) {\n        if (mask.getBitByIndex(i) && otherMask.getBitByIndex(i)) {\n            newMask.setBitByIndex(i, 1);\n        }\n        else {\n            newMask.setBitByIndex(i, 0);\n        }\n    }\n    return newMask;\n}\n//# sourceMappingURL=and.js.map","export function checkSize(size) {\n  if (!Number.isInteger(size) || size < 1) {\n    throw new TypeError(`size must be a positive integer. Got ${size}`);\n  }\n}\n\nexport function checkKernel(kernel) {\n  if (kernel.length === 0 || kernel.length % 2 !== 1) {\n    throw new RangeError(\n      `kernel must have an odd positive length. Got ${kernel.length}`\n    );\n  }\n}\n\nexport function checkBorderType(borderType) {\n  if (borderType !== 'CONSTANT' && borderType !== 'CUT') {\n    throw new RangeError(`unexpected border type: ${borderType}`);\n  }\n}\n\nexport function checkInputLength(actual, expected) {\n  if (actual !== expected) {\n    throw new RangeError(\n      `input length (${actual}) does not match setup size (${expected})`\n    );\n  }\n}\n\nexport function createArray(len) {\n  const array = [];\n  for (var i = 0; i < len; i++) {\n    array.push(0);\n  }\n  return array;\n}\n","import {\n  checkSize,\n  checkKernel,\n  checkBorderType,\n  checkInputLength,\n  createArray\n} from './utils';\n\nexport class DirectConvolution {\n  constructor(size, kernel, borderType = 'CONSTANT') {\n    checkSize(size);\n    checkKernel(kernel);\n    checkBorderType(borderType);\n\n    this.size = size;\n    this.kernelOffset = (kernel.length - 1) / 2;\n    this.outputSize =\n      borderType === 'CONSTANT' ? size : size - 2 * this.kernelOffset;\n    this.output = createArray(this.outputSize);\n    this.kernel = kernel;\n    this.kernelSize = kernel.length;\n    this.borderType = borderType;\n  }\n\n  convolve(input) {\n    checkInputLength(input.length, this.size);\n    this.output.fill(0);\n    if (this.borderType === 'CONSTANT') {\n      this._convolutionBorder0(input);\n    } else {\n      this._convolutionBorderCut(input);\n    }\n    return this.output;\n  }\n\n  _convolutionBorder0(input) {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.kernelSize; j++) {\n        this.output[i] +=\n          interpolateInput(input, i - this.kernelOffset + j) * this.kernel[j];\n      }\n    }\n  }\n\n  _convolutionBorderCut(input) {\n    for (let i = this.kernelOffset; i < this.size - this.kernelOffset; i++) {\n      const index = i - this.kernelOffset;\n      for (let j = 0; j < this.kernelSize; j++) {\n        this.output[index] += input[index + j] * this.kernel[j];\n      }\n    }\n  }\n}\n\nexport function directConvolution(input, kernel, borderType) {\n  return new DirectConvolution(input.length, kernel, borderType).convolve(\n    input\n  );\n}\n\nfunction interpolateInput(input, idx) {\n  if (idx < 0) return 0;\n  else if (idx >= input.length) return 0;\n  return input[idx];\n}\n","export * from './directConvolution';\nexport * from './fftConvolution';\n\nexport const BorderType = {\n  CONSTANT: 'CONSTANT',\n  CUT: 'CUT'\n};\n","import { match } from 'ts-pattern';\nexport const BorderType = {\n    CONSTANT: 'constant',\n    REPLICATE: 'replicate',\n    REFLECT: 'reflect',\n    WRAP: 'wrap',\n    REFLECT_101: 'reflect101',\n};\n/**\n * Pick the border interpolation algorithm.\n * The different algorithms are illustrated here:\n * @see {@link https://vovkos.github.io/doxyrest-showcase/opencv/sphinx_rtd_theme/enum_cv_BorderTypes.html}\n * @param type - The border type.\n * @param value - A pixel value if BorderType.CONSTANT is used.\n * @returns The border interpolation function.\n */\nexport function getBorderInterpolation(type, value) {\n    return match(type)\n        .with('constant', () => getInterpolateConstant(value))\n        .with('replicate', () => interpolateReplicate)\n        .with('reflect', () => interpolateReflect)\n        .with('reflect101', () => interpolateReflect101)\n        .with('wrap', () => interpolateWrap)\n        .exhaustive();\n}\nfunction checkRange(point, length) {\n    if (point <= 0 - length || point >= length + length - 1) {\n        throw new RangeError('border must be smaller than the original image');\n    }\n}\nfunction getInterpolateConstant(value) {\n    return function interpolateConstant(column, row, channel, image) {\n        const newColumn = interpolateConstantPoint(column, image.width);\n        const newRow = interpolateConstantPoint(row, image.height);\n        if (newColumn === -1 || newRow === -1) {\n            return value;\n        }\n        return image.getValue(newColumn, newRow, channel);\n    };\n}\n/**\n * Interpolate using a constant point.\n * @param point - The point to interpolate.\n * @param length  - The length of the image.\n * @returns The interpolated point.\n */\nexport function interpolateConstantPoint(point, length) {\n    if (point >= 0 && point < length) {\n        return point;\n    }\n    return -1;\n}\nfunction interpolateReplicate(column, row, channel, image) {\n    return image.getValue(interpolateReplicatePoint(column, image.width), interpolateReplicatePoint(row, image.height), channel);\n}\n/**\n * Interpolate by replicating the border.\n * @param point - The point to interpolate.\n * @param length - The length of the image.\n * @returns The interpolated point.\n */\nexport function interpolateReplicatePoint(point, length) {\n    if (point >= 0 && point < length) {\n        return point;\n    }\n    checkRange(point, length);\n    if (point < 0) {\n        return 0;\n    }\n    else {\n        return length - 1;\n    }\n}\nfunction interpolateReflect(column, row, channel, image) {\n    return image.getValue(interpolateReflectPoint(column, image.width), interpolateReflectPoint(row, image.height), channel);\n}\n/**\n * Interpolate by reflecting the border.\n * @param point - The point to interpolate.\n * @param length - The length of the image.\n * @returns The interpolated point.\n */\nexport function interpolateReflectPoint(point, length) {\n    if (point >= 0 && point < length) {\n        return point;\n    }\n    checkRange(point, length);\n    if (point < 0) {\n        return -1 - point;\n    }\n    else {\n        return length + length - 1 - point;\n    }\n}\nfunction interpolateWrap(column, row, channel, image) {\n    return image.getValue(interpolateWrapPoint(column, image.width), interpolateWrapPoint(row, image.height), channel);\n}\n/**\n * Interpolate by wrapping the border.\n * @param point - The point to interpolate.\n * @param length - The length of the image.\n * @returns The interpolated point.\n */\nexport function interpolateWrapPoint(point, length) {\n    if (point >= 0 && point < length) {\n        return point;\n    }\n    checkRange(point, length);\n    if (point < 0) {\n        return length + point;\n    }\n    else {\n        return point - length;\n    }\n}\nfunction interpolateReflect101(column, row, channel, image) {\n    return image.getValue(interpolateReflect101Point(column, image.width), interpolateReflect101Point(row, image.height), channel);\n}\n/**\n * Interpolate by reflecting the border.\n * @param point - The point to interpolate.\n * @param length - The length of the image.\n * @returns The interpolated point.\n */\nexport function interpolateReflect101Point(point, length) {\n    if (point >= 0 && point < length) {\n        return point;\n    }\n    checkRange(point, length);\n    if (point < 0) {\n        return 0 - point;\n    }\n    else {\n        return length + length - 2 - point;\n    }\n}\n//# sourceMappingURL=interpolateBorder.js.map","import { Image } from '../Image.js';\nimport { getBorderInterpolation } from '../utils/interpolateBorder.js';\n/**\n * Extend the borders of an image according to the given border type.\n * @param image - Image to extend.\n * @param options - Options.\n * @returns A copy of the image with extended borders.\n */\nexport function extendBorders(image, options) {\n    const { horizontal, vertical, borderType = 'reflect101', borderValue = 0, } = options;\n    const interpolateBorder = getBorderInterpolation(borderType, borderValue);\n    const newImage = Image.createFrom(image, {\n        width: image.width + 2 * horizontal,\n        height: image.height + 2 * vertical,\n    });\n    image.copyTo(newImage, {\n        origin: {\n            column: horizontal,\n            row: vertical,\n        },\n        out: newImage,\n    });\n    // Top strip\n    for (let row = 0; row < vertical; row++) {\n        for (let col = 0; col < newImage.width; col++) {\n            for (let channel = 0; channel < image.channels; channel++) {\n                const newValue = interpolateBorder(col - horizontal, row - vertical, channel, image);\n                newImage.setValue(col, row, channel, newValue);\n            }\n        }\n    }\n    // Bottom strip\n    for (let row = newImage.height - vertical; row < newImage.height; row++) {\n        for (let col = 0; col < newImage.width; col++) {\n            for (let channel = 0; channel < image.channels; channel++) {\n                const newValue = interpolateBorder(col - horizontal, row - vertical, channel, image);\n                newImage.setValue(col, row, channel, newValue);\n            }\n        }\n    }\n    // Left strip\n    for (let row = vertical; row < newImage.height - vertical; row++) {\n        for (let col = 0; col < horizontal; col++) {\n            for (let channel = 0; channel < image.channels; channel++) {\n                const newValue = interpolateBorder(col - horizontal, row - vertical, channel, image);\n                newImage.setValue(col, row, channel, newValue);\n            }\n        }\n    }\n    // Right strip\n    for (let row = vertical; row < newImage.height - vertical; row++) {\n        for (let col = newImage.width - horizontal; col < newImage.width; col++) {\n            for (let channel = 0; channel < image.channels; channel++) {\n                const newValue = interpolateBorder(col - horizontal, row - vertical, channel, image);\n                newImage.setValue(col, row, channel, newValue);\n            }\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=extendBorders.js.map","/**\n * Round a pixel value.\n * @param value - Value of the pixel.\n * @returns The rounded value.\n */\nexport function round(value) {\n    const integer = Math.trunc(value);\n    const decimal = value - integer;\n    if (decimal < 0.5) {\n        return integer;\n    }\n    else if (decimal > 0.5) {\n        return integer + 1;\n    }\n    else {\n        return integer % 2 === 0 ? integer : integer + 1;\n    }\n}\n//# sourceMappingURL=round.js.map","import { BorderType as ConvolutionBorderType, DirectConvolution, } from 'ml-convolution';\nimport { Image } from '../Image.js';\nimport { extendBorders } from '../operations/extendBorders.js';\nimport { getClamp } from '../utils/clamp.js';\nimport { getIndex } from '../utils/getIndex.js';\nimport { getOutputImage } from '../utils/getOutputImage.js';\nimport { getBorderInterpolation } from '../utils/interpolateBorder.js';\nimport { round } from '../utils/round.js';\n/**\n * Apply a direct convolution on an image using the specified kernel. The convolution corresponds of a weighted average of the surrounding pixels, the weights being defined in the kernel.\n * @param image - The image to process.\n * @param kernel - Kernel to use for the convolution. Should be a 2D matrix with odd number of rows and columns.\n * @param options - Convolution options.\n * @returns The convoluted image.\n */\nexport function directConvolution(image, kernel, options = {}) {\n    const { borderType = 'reflect101', borderValue = 0 } = options;\n    const convolutedData = rawDirectConvolution(image, kernel, {\n        borderType,\n        borderValue,\n    });\n    const newImage = getOutputImage(image, options);\n    const clamp = getClamp(newImage);\n    for (let i = 0; i < image.size; i++) {\n        for (let channel = 0; channel < image.channels; channel++) {\n            const dataIndex = i * image.channels + channel;\n            const newValue = round(clamp(convolutedData[dataIndex]));\n            newImage.setValueByIndex(i, channel, newValue);\n        }\n    }\n    return newImage;\n}\n/**\n * Compute direct convolution of an image and return an array with the raw values.\n * @param image - Image to process.\n * @param kernel - 2D kernel used for the convolution.\n * @param options - Convolution options.\n * @returns Array with the raw convoluted values.\n */\nexport function rawDirectConvolution(image, kernel, options = {}) {\n    const { borderType = 'reflect101', borderValue = 0 } = options;\n    const interpolateBorder = getBorderInterpolation(borderType, borderValue);\n    const result = new Float64Array(image.size * image.channels);\n    for (let channel = 0; channel < image.channels; channel++) {\n        for (let row = 0; row < image.height; row++) {\n            for (let column = 0; column < image.width; column++) {\n                const index = getIndex(column, row, image, channel);\n                result[index] = computeConvolutionValue(column, row, channel, image, kernel, interpolateBorder, { returnRawValue: true });\n            }\n        }\n    }\n    return result;\n}\n/**\n * Compute the separable convolution of an image.\n * @param image - Image to convolute.\n * @param kernelX - Kernel along x axis.\n * @param kernelY - Kernel along y axis.\n * @param options - Convolution options.\n * @returns The convoluted image.\n */\nexport function separableConvolution(image, kernelX, kernelY, options = {}) {\n    const { normalize, borderType = 'reflect101', borderValue = 0 } = options;\n    if (normalize) {\n        [kernelX, kernelY] = normalizeSeparatedKernel(kernelX, kernelY);\n    }\n    const doubleKernelOffsetX = kernelX.length - 1;\n    const kernelOffsetX = doubleKernelOffsetX / 2;\n    const doubleKernelOffsetY = kernelY.length - 1;\n    const kernelOffsetY = doubleKernelOffsetY / 2;\n    const extendedImage = extendBorders(image, {\n        horizontal: kernelOffsetX,\n        vertical: kernelOffsetY,\n        borderType,\n        borderValue,\n    });\n    const newImage = Image.createFrom(image);\n    const clamp = getClamp(newImage);\n    const rowConvolution = new DirectConvolution(extendedImage.width, kernelX, ConvolutionBorderType.CUT);\n    const columnConvolution = new DirectConvolution(extendedImage.height, kernelY, ConvolutionBorderType.CUT);\n    const rowData = new Float64Array(extendedImage.width);\n    const columnData = new Float64Array(extendedImage.height);\n    const convolvedData = new Float64Array(\n    // Use `image.width` because convolution with BorderType.CUT reduces the size of the convolved data.\n    image.width * extendedImage.height);\n    for (let channel = 0; channel < extendedImage.channels; channel++) {\n        for (let row = 0; row < extendedImage.height; row++) {\n            for (let column = 0; column < extendedImage.width; column++) {\n                rowData[column] = extendedImage.getValue(column, row, channel);\n            }\n            const convolvedRow = rowConvolution.convolve(rowData);\n            for (let column = 0; column < image.width; column++) {\n                convolvedData[row * image.width + column] = convolvedRow[column];\n            }\n        }\n        for (let column = 0; column < image.width; column++) {\n            for (let row = 0; row < extendedImage.height; row++) {\n                columnData[row] = convolvedData[row * image.width + column];\n            }\n            const convolvedColumn = columnConvolution.convolve(columnData);\n            for (let row = 0; row < image.height; row++) {\n                newImage.setValue(column, row, channel, round(clamp(convolvedColumn[row])));\n            }\n        }\n    }\n    return newImage;\n}\n/**\n * Compute the convolution of a value of a pixel in an image.\n * @param column - Column of the pixel.\n * @param row - Row of the pixel.\n * @param channel - Channel to process.\n * @param image - Image to process.\n * @param kernel - Kernel for the convolutions.\n * @param interpolateBorder - Function to interpolate the border pixels.\n * @param options - Compute convolution value options.\n * @returns The convoluted value.\n */\nexport function computeConvolutionValue(column, row, channel, image, kernel, interpolateBorder, options = {}) {\n    let { clamp } = options;\n    const { returnRawValue = false } = options;\n    if (returnRawValue) {\n        clamp = undefined;\n    }\n    let val = 0;\n    const kernelWidth = kernel[0].length;\n    const kernelHeight = kernel.length;\n    const kernelOffsetX = (kernelWidth - 1) / 2;\n    const kernelOffsetY = (kernelHeight - 1) / 2;\n    for (let kY = 0; kY < kernelHeight; kY++) {\n        for (let kX = 0; kX < kernelWidth; kX++) {\n            const kernelValue = kernel[kY][kX];\n            val +=\n                kernelValue *\n                    interpolateBorder(column + kX - kernelOffsetX, row + kY - kernelOffsetY, channel, image);\n        }\n    }\n    if (!clamp) {\n        return val;\n    }\n    else {\n        return round(clamp(val));\n    }\n}\n/**\n * Normalize a separated kernel.\n * @param kernelX - Horizontal component of the separated kernel.\n * @param kernelY - Vertical component of the separated kernel.\n * @returns The normalized kernel.\n */\nfunction normalizeSeparatedKernel(kernelX, kernelY) {\n    const sumKernelX = kernelX.reduce((prev, current) => prev + current, 0);\n    const sumKernelY = kernelY.reduce((prev, current) => prev + current, 0);\n    const prod = sumKernelX * sumKernelY;\n    if (prod < 0) {\n        throw new RangeError('this separated kernel cannot be normalized');\n    }\n    const factor = 1 / Math.sqrt(Math.abs(prod));\n    return [kernelX.map((v) => v * factor), kernelY.map((v) => v * factor)];\n}\n//# sourceMappingURL=convolution.js.map","import { separableConvolution } from './convolution.js';\n/**\n * Blur an image. The pixel in the center becomes an average of the surrounding ones.\n * @param image - Image to blur.\n * @param options - Blur options.\n * @returns The blurred image.\n */\nexport function blur(image, options) {\n    const { width, height } = options;\n    if (width < 1 || width % 2 === 0) {\n        throw new RangeError(`Invalid property \"width\". Must be an odd number greater than 0. Received ${width}.`);\n    }\n    if (height < 1 || height % 2 === 0) {\n        throw new RangeError(`Invalid property \"height\". Must be an odd number greater than 0. Received ${height}.`);\n    }\n    const kernelX = new Array(width).fill(1);\n    const kernelY = new Array(height).fill(1);\n    return separableConvolution(image, kernelX, kernelY, {\n        normalize: true,\n        ...options,\n    });\n}\n//# sourceMappingURL=blur.js.map","import { match } from 'ts-pattern';\nimport { PREWITT_X, PREWITT_Y, SCHARR_X, SCHARR_Y, SOBEL_X, SOBEL_Y, } from '../utils/constants/kernels.js';\nexport const DerivativeFilter = {\n    SOBEL: 'sobel',\n    SCHARR: 'scharr',\n    PREWITT: 'prewitt',\n    // todo: handle even sized kernels to implement Roberts' filter\n    // for 2x2 matrices, the current pixel corresponds to the top-left\n    //  ROBERTS = 'roberts',\n};\n/**\n * Apply a derivative filter to an image.\n * @param image - Image to process.\n * @param options - Derivative filter options.\n * @returns The processed image.\n */\nexport function derivativeFilter(image, options = {}) {\n    const { filter = 'sobel' } = options;\n    const kernels = match(filter)\n        .with('sobel', () => ({ kernelX: SOBEL_X, kernelY: SOBEL_Y }))\n        .with('scharr', () => ({ kernelX: SCHARR_X, kernelY: SCHARR_Y }))\n        .with('prewitt', () => ({ kernelX: PREWITT_X, kernelY: PREWITT_Y }))\n        .exhaustive();\n    return image.gradientFilter({ ...kernels, ...options });\n}\n//# sourceMappingURL=derivativeFilter.js.map","export const ImageColorModel = {\n    GREY: 'GREY',\n    GREYA: 'GREYA',\n    RGB: 'RGB',\n    RGBA: 'RGBA',\n    BINARY: 'BINARY',\n};\nexport const colorModels = {\n    GREY: {\n        components: 1,\n        alpha: false,\n        channels: 1,\n    },\n    GREYA: {\n        components: 1,\n        alpha: true,\n        channels: 2,\n    },\n    RGB: {\n        components: 3,\n        alpha: false,\n        channels: 3,\n    },\n    RGBA: {\n        components: 3,\n        alpha: true,\n        channels: 4,\n    },\n    BINARY: {\n        components: 1,\n        alpha: false,\n        channels: 1,\n    },\n};\n//# sourceMappingURL=colorModels.js.map","import { ImageColorModel } from '../utils/constants/colorModels.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Increase the contrast of an image by spanning each channel on the range [0, image.maxValue].\n * This algorithm is based on the level algorithm.\n * @param image - The image to enhance.\n * @param options - Increase contrast options.\n * @returns The enhanced image.\n */\nexport function increaseContrast(image, options = {}) {\n    const { uniform = false } = options;\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n    });\n    const minMax = image.minMax();\n    let min = minMax.min;\n    let max = minMax.max;\n    if (uniform) {\n        let maxDiffIndex = -1;\n        let previousDiff = -1;\n        for (let i = 0; i < minMax.max.length; i++) {\n            const difference = minMax.max[i] - minMax.min[i];\n            if (difference > previousDiff) {\n                maxDiffIndex = i;\n                previousDiff = difference;\n            }\n        }\n        min = minMax.min[maxDiffIndex];\n        max = minMax.max[maxDiffIndex];\n    }\n    let channels = new Array(image.components)\n        .fill(0)\n        .map((value, index) => index);\n    if (image.colorModel === ImageColorModel.GREYA) {\n        channels = [0];\n    }\n    else if (image.colorModel === ImageColorModel.RGBA) {\n        channels = [0, 1, 2];\n    }\n    return image.level({\n        inputMin: min,\n        inputMax: max,\n        outputMin: 0,\n        outputMax: image.maxValue,\n        channels,\n        ...options,\n    });\n}\n//# sourceMappingURL=increaseContrast.js.map","import { getRadius } from '../utils/getRadius.js';\nimport { separableConvolution } from './convolution.js';\n/**\n * Apply a gaussian filter to an image.\n * @param image - Image to blur.\n * @param options - Gaussian blur options.\n * @returns The blurred image.\n */\nexport function gaussianBlur(image, options) {\n    if ('sigma' in options) {\n        const { sigma, size = getSize(sigma), borderType } = options;\n        const radius = getRadius(size);\n        const kernel = getKernel(radius, sigma);\n        return separableConvolution(image, kernel, kernel, {\n            borderType,\n        });\n    }\n    else if ('sigmaX' in options && 'sigmaY' in options) {\n        const { sigmaX, sigmaY, sizeX = getSize(sigmaX), sizeY = getSize(sigmaY), borderType, } = options;\n        const radiusX = getRadius(sizeX);\n        const radiusY = getRadius(sizeY);\n        const kernelX = getKernel(radiusX, sigmaX);\n        const kernelY = getKernel(radiusY, sigmaY);\n        return separableConvolution(image, kernelX, kernelY, {\n            borderType,\n        });\n    }\n    else {\n        throw new TypeError('you must either define sigma or sigmaX and sigmaY in the options argument');\n    }\n}\nfunction getKernel(radius, sigma) {\n    const n = radius * 2 + 1;\n    const kernel = new Array(n);\n    // TODO: check if sigma can really be 0 or undefined.\n    const sigmaX = sigma || ((n - 1) * 0.5 - 1) * 0.3 + 0.8;\n    const scale2X = -0.5 / (sigmaX * sigmaX);\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        const x = i - radius;\n        const t = Math.exp(scale2X * x * x);\n        kernel[i] = t;\n        sum += t;\n    }\n    for (let i = 0; i < n; i++) {\n        kernel[i] /= sum;\n    }\n    return kernel;\n}\nfunction getSize(sigma) {\n    return 2 * Math.ceil(2 * sigma) + 1;\n}\n//# sourceMappingURL=gaussianBlur.js.map","import { Image } from '../Image.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Apply a gradient filter to an image.\n * @param image - The image to process.\n * @param options - Gradient filter options.\n * @returns The gradient image.\n */\nexport function gradientFilter(image, options) {\n    const { borderType = 'replicate', borderValue = 0 } = options;\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n        colorModel: 'GREY',\n    });\n    if ('kernelX' in options && 'kernelY' in options) {\n        const { kernelX, kernelY } = options;\n        const gradientX = image.rawDirectConvolution(kernelX, {\n            borderType,\n            borderValue,\n        });\n        const gradientY = image.rawDirectConvolution(kernelY, {\n            borderType,\n            borderValue,\n        });\n        const gradient = new Image(image.width, image.height, {\n            colorModel: 'GREY',\n        });\n        for (let i = 0; i < image.size; i++) {\n            gradient.setValueByIndex(i, 0, Math.hypot(gradientX[i], gradientY[i]));\n        }\n        return gradient;\n    }\n    else if ('kernelX' in options) {\n        return image.directConvolution(options.kernelX, {\n            borderType,\n            borderValue,\n        });\n    }\n    else if ('kernelY' in options) {\n        return image.directConvolution(options.kernelY, {\n            borderType,\n            borderValue,\n        });\n    }\n    else {\n        throw new TypeError(`kernelX and KernelY are not defined`);\n    }\n}\n//# sourceMappingURL=gradientFilter.js.map","import { getOutputImage } from '../utils/getOutputImage.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { validateChannels } from '../utils/validators/validators.js';\n/**\n * Calculate a new image that is the hypotenuse between the current image and the otherImage.\n * @param image - First image to process.\n * @param otherImage - Second image.\n * @param options - Hypotenuse options.\n * @returns Hypotenuse of the two images.\n */\nexport function hypotenuse(image, otherImage, options = {}) {\n    const { channels = new Array(image.components).fill(0).map((value, index) => index), } = options;\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n    });\n    if (image.width !== otherImage.width || image.height !== otherImage.height) {\n        throw new RangeError('both images must have the same size');\n    }\n    if (image.alpha !== otherImage.alpha ||\n        image.bitDepth !== otherImage.bitDepth) {\n        throw new RangeError('both images must have the same alpha and bitDepth');\n    }\n    if (image.channels !== otherImage.channels) {\n        throw new RangeError('both images must have the same number of channels');\n    }\n    validateChannels(channels, image);\n    const newImage = getOutputImage(image, {}, { clone: true });\n    for (const channel of channels) {\n        for (let i = 0; i < image.size; i++) {\n            const value = Math.hypot(image.getValueByIndex(i, channel), otherImage.getValueByIndex(i, channel));\n            newImage.setValueByIndex(i, channel, Math.min(value, newImage.maxValue));\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=hypotenuse.js.map","import { Image } from '../Image.js';\nimport { getOutputImage, maskToOutputImage } from '../utils/getOutputImage.js';\n/**\n * Convert image to a different color model.\n * @param image - Image to convert.\n * @param colorModel - New color model.\n * @param options - Convert color options.\n * @returns The converted image.\n */\nexport function convertColor(image, colorModel, options = {}) {\n    const canConvert = new Map([\n        ['GREY', ['GREYA', 'RGB', 'RGBA']],\n        ['GREYA', ['GREY', 'RGB', 'RGBA']],\n        ['RGB', ['GREY', 'GREYA', 'RGBA']],\n        ['RGBA', ['GREY', 'GREYA', 'RGB']],\n        ['BINARY', ['GREY', 'RGB', 'RGBA']],\n    ]);\n    if (image.colorModel === colorModel && colorModel !== 'BINARY') {\n        return getOutputImage(image, { out: options.out }, { clone: true });\n    }\n    const canConvertTo = canConvert.get(image.colorModel);\n    if (!canConvertTo?.includes(colorModel)) {\n        throw new RangeError(`conversion from ${image.colorModel} to ${colorModel} not implemented`);\n    }\n    if (image instanceof Image) {\n        const output = getOutputImage(image, options, {\n            newParameters: { colorModel },\n        });\n        if (image.colorModel === 'GREY' || image.colorModel === 'GREYA') {\n            convertGreyToAny(image, output);\n        }\n        if (image.colorModel === 'RGB' || image.colorModel === 'RGBA') {\n            if (colorModel === 'RGB' || colorModel === 'RGBA') {\n                convertRgbToRgb(image, output);\n            }\n            else {\n                // GREYA or GREY\n                convertRgbToGrey(image, output);\n            }\n        }\n        if (!image.alpha && output.alpha) {\n            output.fillAlpha(output.maxValue);\n        }\n        if (image.alpha && output.alpha) {\n            copyAlpha(image, output);\n        }\n        return output;\n    }\n    else if (colorModel === 'GREY') {\n        const output = maskToOutputImage(image, options);\n        convertBinaryToGrey(image, output);\n        return output;\n    }\n    else {\n        const img = new Image(image.width, image.height, {\n            colorModel,\n        });\n        convertBinaryToRgb(image, img);\n        return img;\n    }\n}\n/**\n * Copy alpha channel of source to dest.\n * @param source - Source image.\n * @param dest - Destination image.\n */\nexport function copyAlpha(source, dest) {\n    if (source.size !== dest.size) {\n        throw new RangeError('source and destination have different sizes');\n    }\n    if (!source.alpha) {\n        throw new RangeError('source image does not have alpha');\n    }\n    if (!dest.alpha) {\n        throw new RangeError('destination does not have alpha');\n    }\n    for (let i = 0; i < dest.size; i++) {\n        dest.setValueByIndex(i, dest.channels - 1, source.getValueByIndex(i, source.channels - 1));\n    }\n}\n/**\n * Convert grey image to other color model.\n * @param image - Image to convert.\n * @param newImage - Converted image.\n */\nfunction convertGreyToAny(image, newImage) {\n    for (let i = 0; i < image.size; i++) {\n        for (let j = 0; j < newImage.components; j++) {\n            newImage.setValueByIndex(i, j, image.getValueByIndex(i, 0));\n        }\n    }\n}\n/**\n * Convert RGB image to RGB. Allows to use convert with an RGB target whatever the image color model is.\n * @param image - Image to convert.\n * @param newImage - Converted image.\n */\nfunction convertRgbToRgb(image, newImage) {\n    for (let i = 0; i < image.size; i++) {\n        for (let j = 0; j < 3; j++) {\n            newImage.setValueByIndex(i, j, image.getValueByIndex(i, j));\n        }\n    }\n}\n/**\n * Convert RGB image to GREY.\n * @param image - Image to convert.\n * @param newImage - Converted image.\n */\nfunction convertRgbToGrey(image, newImage) {\n    for (let i = 0; i < image.size; i++) {\n        const r = image.getValueByIndex(i, 0);\n        const g = image.getValueByIndex(i, 1);\n        const b = image.getValueByIndex(i, 2);\n        newImage.setValueByIndex(i, 0, Math.round(0.299 * r + 0.587 * g + 0.114 * b));\n    }\n}\n/**\n * Convert Mask to GREY.\n * @param mask - Mask to convert.\n * @param newImage - Converted image.\n */\nexport function convertBinaryToGrey(mask, newImage) {\n    for (let i = 0; i < mask.size; i++) {\n        newImage.setValueByIndex(i, 0, mask.getBitByIndex(i) ? newImage.maxValue : 0);\n    }\n}\n/**\n * Convert mask to RGB or RGBA.\n * @param mask - Mask to convert.\n * @param newImage - Converted image.\n */\nexport function convertBinaryToRgb(mask, newImage) {\n    const black = new Array(newImage.components).fill(0);\n    const white = new Array(newImage.components).fill(newImage.maxValue);\n    if (newImage.alpha) {\n        black.push(newImage.maxValue);\n        white.push(newImage.maxValue);\n    }\n    for (let i = 0; i < mask.size; i++) {\n        newImage.setPixelByIndex(i, mask.getBitByIndex(i) ? white : black);\n    }\n}\n//# sourceMappingURL=convertColor.js.map","import { getOutputImage } from '../utils/getOutputImage.js';\n/**\n * Convert the bit depth of an image.\n * @param image - Image to convert.\n * @param newBitDepth - Bit depth to convert to.\n * @param options - Convert bit depth options.\n * @returns Converted image.\n */\nexport function convertBitDepth(image, newBitDepth, options = {}) {\n    if (image.bitDepth === newBitDepth) {\n        return getOutputImage(image, options, { clone: true });\n    }\n    if (newBitDepth !== 8 && newBitDepth !== 16) {\n        throw new RangeError(`This image bit depth is not supported: ${newBitDepth}`);\n    }\n    // Get the output image first - this handles the out option\n    const newImage = getOutputImage(image, options, {\n        clone: false,\n        newParameters: {\n            bitDepth: newBitDepth,\n            colorModel: image.colorModel,\n        },\n    });\n    return newBitDepth === 8\n        ? convertToUint8(image, newImage)\n        : convertToUint16(image, newImage);\n}\n/**\n * Convert bit depth to 16 bits.\n * @param image - Image to convert.\n * @param targetImage - Target image to write to.\n * @returns Converted image.\n */\nfunction convertToUint16(image, targetImage) {\n    for (let i = 0; i < image.size; i++) {\n        for (let j = 0; j < targetImage.channels; j++) {\n            targetImage.setValueByIndex(i, j, image.getValueByIndex(i, j) << 8);\n        }\n    }\n    return targetImage;\n}\n/**\n * Convert bit depth to 8 bits.\n * @param image - Image to convert.\n * @param targetImage - Target image to write to.\n * @returns Converted image.\n */\nfunction convertToUint8(image, targetImage) {\n    for (let i = 0; i < image.size; i++) {\n        for (let j = 0; j < targetImage.channels; j++) {\n            targetImage.setValueByIndex(i, j, image.getValueByIndex(i, j) >> 8);\n        }\n    }\n    return targetImage;\n}\n//# sourceMappingURL=convertBitDepth.js.map","/**\n * Check that the coordinates of a point are integers.\n * @param point - Point to check.\n * @param name - Specify name of the point to include in the error message.\n */\nexport function checkPointIsInteger(point, name = 'Point') {\n    if (!Number.isInteger(point.row) || !Number.isInteger(point.column)) {\n        throw new TypeError(`${name} row and column must be integers`);\n    }\n}\n//# sourceMappingURL=checkPointIsInteger.js.map","import { Image } from '../Image.js';\nimport { assert } from '../utils/validators/assert.js';\nimport { checkPointIsInteger } from '../utils/validators/checkPointIsInteger.js';\n/**\n * Extract the pixels of an image, as specified in a mask.\n * @param image - The image to process.\n * @param mask - The mask defining which pixels to keep.\n * @param options - Extract options.\n * @returns The extracted image.\n */\nexport function extract(image, mask, options = {}) {\n    const { origin = { row: 0, column: 0 } } = options;\n    const { row, column } = origin;\n    assert(row < image.height &&\n        column < image.width &&\n        row + mask.width > 0 &&\n        column + mask.height > 0, 'extract: image and mask have no overlap');\n    checkPointIsInteger(origin, 'Origin');\n    const resultWidth = Math.min(image.width, mask.width + column) - Math.max(0, column);\n    const resultHeight = Math.min(image.height, mask.height + row) - Math.max(0, row);\n    let newImage = new Image(resultWidth, resultHeight, {\n        colorModel: image.colorModel,\n        origin,\n    });\n    if (newImage.alpha) {\n        newImage = newImage.fillAlpha(0);\n    }\n    const imageStartRow = Math.max(0, row);\n    const imageStartColumn = Math.max(0, column);\n    const maskStartRow = row < 0 ? -row : 0;\n    const maskStartColumn = column < 0 ? -column : 0;\n    for (let resultRow = 0; resultRow < resultHeight; resultRow++) {\n        for (let resultColumn = 0; resultColumn < resultWidth; resultColumn++) {\n            if (mask.getBit(maskStartColumn + resultColumn, maskStartRow + resultRow)) {\n                newImage.setPixel(resultColumn, resultRow, image.getPixel(imageStartColumn + resultColumn, imageStartRow + resultRow));\n            }\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=extract.js.map","import { Image } from '../Image.js';\n/**\n * Inverse of split. Merges multiple single-channel images into one.\n * @param images - An array of single-channel images.\n * @returns The merged image.\n */\nexport function merge(images) {\n    const channels = images.length;\n    let colorModel;\n    switch (channels) {\n        case 2: {\n            colorModel = 'GREYA';\n            break;\n        }\n        case 3: {\n            colorModel = 'RGB';\n            break;\n        }\n        case 4: {\n            colorModel = 'RGBA';\n            break;\n        }\n        default: {\n            throw new RangeError(`merge expects an array of two to four images. Received ${channels}`);\n        }\n    }\n    const first = images[0];\n    if (first.channels !== 1) {\n        throw new RangeError(`each image must have one channel. Received ${first.channels}`);\n    }\n    for (let i = 1; i < channels; i++) {\n        const img = images[i];\n        if (img.channels !== 1) {\n            throw new RangeError(`each image must have one channel. Received ${img.channels}`);\n        }\n        if (img.width !== first.width ||\n            img.height !== first.height ||\n            img.bitDepth !== first.bitDepth) {\n            throw new RangeError('all images must have the same width, height and bitDepth');\n        }\n    }\n    const newImage = Image.createFrom(first, { colorModel });\n    for (let c = 0; c < channels; c++) {\n        const img = images[c];\n        for (let i = 0; i < newImage.size; i++) {\n            newImage.setValueByIndex(i, c, img.getValueByIndex(i, 0));\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=merge.js.map","import { Image } from '../Image.js';\n/**\n * Create an array of single-channel images based on a multi-channel image.\n * @param image - The image with many channels.\n * @returns Array of single-channel images.\n */\nexport function split(image) {\n    const result = [];\n    for (let c = 0; c < image.channels; c++) {\n        const channel = Image.createFrom(image, {\n            colorModel: 'GREY',\n        });\n        for (let i = 0; i < channel.size; i++) {\n            channel.setValueByIndex(i, 0, image.getValueByIndex(i, c));\n        }\n        result.push(channel);\n    }\n    return result;\n}\n//# sourceMappingURL=split.js.map","/*\n * * see http://rsb.info.nih.gov/ij/developer/source/ij/process/AutoThresholder.java.html.\n * Huang: Implements Huang's fuzzy thresholding method: Huang, L-K & Wang, M-J J (1995),\n * \"Image thresholding by minimizing the measure of fuzziness\", Pattern Recognition 28(1): 41-51\n */\n/**\n * Return a threshold for a histogram using Huang algorithm.\n * @param histogram - Image histogram.\n * @returns The threshold.\n */\nexport default function huang(histogram) {\n    /* Determine the first non-zero bin */\n    let firstBin = 0;\n    for (let ih = 0; ih < histogram.length; ih++) {\n        if (histogram[ih] !== 0) {\n            firstBin = ih;\n            break;\n        }\n    }\n    /* Determine the last non-zero bin */\n    let lastBin = histogram.length - 1;\n    for (let ih = histogram.length - 1; ih >= firstBin; ih--) {\n        if (histogram[ih] !== 0) {\n            lastBin = ih;\n            break;\n        }\n    }\n    const term = 1 / (lastBin - firstBin);\n    const mu0 = new Array(histogram.length);\n    let sumPix = 0;\n    let numPix = 0;\n    for (let ih = firstBin; ih < histogram.length; ih++) {\n        sumPix += ih * histogram[ih];\n        numPix += histogram[ih];\n        mu0[ih] = sumPix / numPix;\n    }\n    const mu1 = new Array(histogram.length);\n    sumPix = 0;\n    numPix = 0;\n    for (let ih = lastBin; ih > 0; ih--) {\n        sumPix += ih * histogram[ih];\n        numPix += histogram[ih];\n        mu1[ih - 1] = sumPix / numPix;\n    }\n    /* Determine the threshold that minimizes the fuzzy entropy*/\n    let threshold = -1;\n    let minEnt = Number.MAX_VALUE;\n    for (let it = 0; it < histogram.length; it++) {\n        let ent = 0;\n        let muX;\n        for (let ih = 0; ih <= it; ih++) {\n            /* Equation (4) in Ref. 1 */\n            muX = 1 / (1 + term * Math.abs(ih - mu0[it]));\n            if (!(muX < 1e-6 || muX > 0.999999)) {\n                /* Equation (6) & (8) in Ref. 1 */\n                ent +=\n                    histogram[ih] *\n                        (-muX * Math.log(muX) - (1 - muX) * Math.log(1 - muX));\n            }\n        }\n        for (let ih = it + 1; ih < histogram.length; ih++) {\n            /* Equation (4) in Ref. 1 */\n            muX = 1 / (1 + term * Math.abs(ih - mu1[it]));\n            if (!(muX < 1e-6 || muX > 0.999999)) {\n                /* Equation (6) & (8) in Ref. 1 */\n                ent +=\n                    histogram[ih] *\n                        (-muX * Math.log(muX) - (1 - muX) * Math.log(1 - muX));\n            }\n        }\n        if (ent < minEnt) {\n            minEnt = ent;\n            threshold = it;\n        }\n    }\n    return threshold;\n}\n//# sourceMappingURL=huang.js.map","/*\n *\n * see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n * Intermodes: This assumes a bimodal histogram. Implements the thresholding Prewitt, JMS & Mendelsohn, ML (1966),\n * \"The analysis of cell images\", Annals of the NewYork Academy of Sciences 128: 1035-1053\n *\n */\nimport { assert } from '../../utils/validators/assert.js';\n/**\n * Return a threshold for a histogram using Intermodes algorithm.\n * @param histogram - Image histogram.\n * @returns The threshold.\n */\nexport default function intermodes(histogram) {\n    const iHisto = histogram.slice();\n    let iter = 0;\n    while (!bimodalTest(iHisto)) {\n        // smooth with a 3 point running mean filter\n        let previous = 0;\n        let current = 0;\n        let next = iHisto[0];\n        for (let i = 0; i < histogram.length - 1; i++) {\n            previous = current;\n            current = next;\n            next = iHisto[i + 1];\n            iHisto[i] = (previous + current + next) / 3;\n        }\n        iHisto[histogram.length - 1] = (current + next) / 3;\n        iter++;\n        assert(iter < 1000, 'Intermodes threshold not found after 1000 iterations');\n    }\n    // The threshold is the mean between the two peaks.\n    let tt = 0;\n    for (let i = 1; i < histogram.length - 1; i++) {\n        if (iHisto[i - 1] < iHisto[i] && iHisto[i + 1] < iHisto[i]) {\n            tt += i;\n        }\n    }\n    return Math.floor(tt / 2);\n}\nfunction bimodalTest(iHisto) {\n    let b = false;\n    let modes = 0;\n    for (let k = 1; k < iHisto.length - 1; k++) {\n        if (iHisto[k - 1] < iHisto[k] && iHisto[k + 1] < iHisto[k]) {\n            modes++;\n            if (modes > 2) {\n                return false;\n            }\n        }\n    }\n    if (modes === 2) {\n        b = true;\n    }\n    return b;\n}\n//# sourceMappingURL=intermodes.js.map","/*\n * see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n * Isodata: Ridler, TW & Calvard, S (1978), \"Picture thresholding using an iterative selection method\"\n * IEEE Transactions on Systems, Man and Cybernetics 8: 630-632.\n *\n */\nimport { assert } from '../../utils/validators/assert.js';\n/**\n * Return a threshold for a histogram using Isodata algorithm.\n * @param histogram - Image histogram.\n * @returns The threshold.\n */\nexport default function isodata(histogram) {\n    let l; // the average grey value of pixels with intensities < g\n    let toth; // the the average grey value of pixels with intensities > g\n    let totl; // the total the average grey value of pixels with intensities < g\n    let h; // the average grey value of pixels with intensities > g\n    let g = 0; // threshold value\n    for (let i = 1; i < histogram.length; i++) {\n        if (histogram[i] > 0) {\n            g = i + 1;\n            break;\n        }\n    }\n    while (true) {\n        l = 0;\n        totl = 0;\n        for (let i = 0; i < g; i++) {\n            totl = totl + histogram[i];\n            l = l + histogram[i] * i;\n        }\n        h = 0;\n        toth = 0;\n        for (let i = g + 1; i < histogram.length; i++) {\n            toth += histogram[i];\n            h += histogram[i] * i;\n        }\n        if (totl > 0 && toth > 0) {\n            l /= totl;\n            h /= toth;\n            if (g === Math.round((l + h) / 2)) {\n                break;\n            }\n        }\n        g++;\n        assert(g <= histogram.length - 2, 'Threshold not found');\n    }\n    return g;\n}\n//# sourceMappingURL=isodata.js.map","/*\n * see http://rsb.info.nih.gov/ij/developer/source/ij/process/AutoThresholder.java.html\n * The method is present in: Implements Li's Minimum Cross Entropy thresholding method\n * This implementation is based on the iterative version (Ref. 2nd reference below) of the algorithm.\n *  1) Li, CH & Lee, CK (1993), \"Minimum Cross Entropy Thresholding\", Pattern Recognition 26(4): 61 625\n *  2) Li, CH & Tam, PKS (1998), \"An Iterative Algorithm for Minimum Cross Entropy Thresholding\",\n *     Pattern Recognition Letters 18(8): 771-776\n *  3) Sezgin, M & Sankur, B (2004), \"Survey over Image Thresholding Techniques and Quantitative Performance\n *     Evaluation\",Journal of Electronic Imaging 13(1): 146-165\n * @param histogram - the histogram of the image\n * @param total - the number of pixels in the image\n * @returns {number} - the threshold\n */\n/**\n * Return a threshold for a histogram using Li algorithm.\n * @param histogram - Image histogram.\n * @param total - Number of pixels in the image.\n * @returns The threshold.\n */\nexport default function li(histogram, total) {\n    let threshold;\n    let sumBack; /* sum of the background pixels at a given threshold */\n    let sumObj; /* sum of the object pixels at a given threshold */\n    let numBack; /* number of background pixels at a given threshold */\n    let numObj; /* number of object pixels at a given threshold */\n    let oldThresh;\n    let newThresh;\n    let meanBack; /* mean of the background pixels at a given threshold */\n    let meanObj; /* mean of the object pixels at a given threshold */\n    let mean; /* mean gray-level in the image */\n    const tolerance = 0.5; /* threshold tolerance */\n    let temp;\n    /* Calculate the mean gray-level */\n    mean = 0;\n    for (let ih = 0; ih < histogram.length; ih++) {\n        mean += ih * histogram[ih];\n    }\n    mean /= total;\n    /* Initial estimate */\n    newThresh = mean;\n    do {\n        oldThresh = newThresh;\n        threshold = (oldThresh + 0.5) | 0; /* range */\n        /* Calculate the means of background and object pixels */\n        /* Background */\n        sumBack = 0;\n        numBack = 0;\n        for (let ih = 0; ih <= threshold; ih++) {\n            sumBack += ih * histogram[ih];\n            numBack += histogram[ih];\n        }\n        meanBack = numBack === 0 ? 0 : sumBack / numBack;\n        /* Object */\n        sumObj = 0;\n        numObj = 0;\n        for (let ih = threshold + 1; ih < histogram.length; ih++) {\n            sumObj += ih * histogram[ih];\n            numObj += histogram[ih];\n        }\n        meanObj = numObj === 0 ? 0 : sumObj / numObj;\n        temp = (meanBack - meanObj) / (Math.log(meanBack) - Math.log(meanObj));\n        if (temp < -Number.EPSILON) {\n            newThresh = (temp - 0.5) | 0;\n        }\n        else {\n            newThresh = (temp + 0.5) | 0;\n        }\n        /*  Stop the iterations when the difference between the\n             new and old threshold values is less than the tolerance */\n    } while (Math.abs(newThresh - oldThresh) > tolerance);\n    return threshold;\n}\n//# sourceMappingURL=li.js.map","/*\n * see http://rsb.info.nih.gov/ij/developer/source/ij/process/AutoThresholder.java.html\n * The method is present in: Implements Kapur-Sahoo-Wong (Maximum Entropy) thresholding method:\n * Kapur, JN; Sahoo, PK & Wong, ACK (1985), \"A New Method for Gray-Level Picture Thresholding Using the Entropy of the Histogram\",\n * Graphical Models and Image Processing 29(3): 273-285\n * @param histogram - the histogram of the image\n *        total - the number of pixels in the image\n * @returns {number} - the threshold\n */\n/**\n * Return a threshold for a histogram using maximal enthropy algorithm.\n * @param histogram - Image histogram.\n * @param total - Number of pixels in the image.\n * @returns The threshold.\n */\nexport default function maxEntropy(histogram, total) {\n    const normHisto = new Array(histogram.length); // normalized histogram\n    for (let ih = 0; ih < histogram.length; ih++) {\n        normHisto[ih] = histogram[ih] / total;\n    }\n    const P1 = new Array(histogram.length); // cumulative normalized histogram\n    const P2 = new Array(histogram.length);\n    P1[0] = normHisto[0];\n    P2[0] = 1 - P1[0];\n    for (let ih = 1; ih < histogram.length; ih++) {\n        P1[ih] = P1[ih - 1] + normHisto[ih];\n        P2[ih] = 1 - P1[ih];\n    }\n    /* Determine the first non-zero bin */\n    let firstBin = 0;\n    for (let ih = 0; ih < histogram.length; ih++) {\n        if (Math.abs(P1[ih]) >= Number.EPSILON) {\n            firstBin = ih;\n            break;\n        }\n    }\n    /* Determine the last non-zero bin */\n    let lastBin = histogram.length - 1;\n    for (let ih = histogram.length - 1; ih >= firstBin; ih--) {\n        if (Math.abs(P2[ih]) >= Number.EPSILON) {\n            lastBin = ih;\n            break;\n        }\n    }\n    // Calculate the total entropy each gray-level\n    // and find the threshold that maximizes it\n    let threshold = -1;\n    let totEnt; // total entropy\n    let maxEnt = Number.MIN_VALUE; // max entropy\n    let entBack; // entropy of the background pixels at a given threshold\n    let entObj; // entropy of the object pixels at a given threshold\n    for (let it = firstBin; it <= lastBin; it++) {\n        /* Entropy of the background pixels */\n        entBack = 0;\n        for (let ih = 0; ih <= it; ih++) {\n            if (histogram[ih] !== 0) {\n                entBack -= (normHisto[ih] / P1[it]) * Math.log(normHisto[ih] / P1[it]);\n            }\n        }\n        /* Entropy of the object pixels */\n        entObj = 0;\n        for (let ih = it + 1; ih < histogram.length; ih++) {\n            if (histogram[ih] !== 0) {\n                entObj -= (normHisto[ih] / P2[it]) * Math.log(normHisto[ih] / P2[it]);\n            }\n        }\n        /* Total entropy */\n        totEnt = entBack + entObj;\n        if (maxEnt < totEnt) {\n            maxEnt = totEnt;\n            threshold = it;\n        }\n    }\n    return threshold;\n}\n//# sourceMappingURL=maxEntropy.js.map","/*\n * The method is present in: Uses the mean of grey levels as the threshold. It is described in:\n * Glasbey, CA (1993), \"An analysis of histogram-based thresholding algorithms\",\n * CVGIP: Graphical Models and Image Processing 55: 532-537\n * @param histogram - the histogram of the image\n * @param total - the number of pixels in the image\n * @returns {number} - the threshold\n */\n/**\n * Return a threshold for a histogram by making its average.\n * @param histogram - Image histogram.\n * @param total - Number of pixels in the image.\n * @returns The threshold.\n */\nexport default function mean(histogram, total) {\n    let sum = 0;\n    for (let i = 0; i < histogram.length; i++) {\n        sum += i * histogram[i];\n    }\n    return Math.floor(sum / total);\n}\n//# sourceMappingURL=mean.js.map","/*\n * see http://rsb.info.nih.gov/ij/developer/source/ij/process/AutoThresholder.java.html\n * The method is present in: An iterative implementation of Kittler and Illingworth's Minimum Error\n * thresholding:Kittler, J & Illingworth, J (1986), \"Minimum error thresholding\", Pattern Recognition 19: 41-47\n * @param histogram - the histogram of the image\n * @param total - the number of pixels in the image\n * @returns {number} - the threshold\n */\n/**\n * Return a threshold for a histogram using Li algorithm.\n * @param histogram - Image histogram.\n * @param total - Number of pixels in the image.\n * @returns The threshold.\n */\nexport default function minError(histogram, total) {\n    let threshold;\n    let Tprev = -2;\n    let mu, nu, p, q, sigma2, tau2, w0, w1, w2, sqterm, temp;\n    /* Calculate the mean gray-level */\n    let mean = 0;\n    for (let ih = 0; ih < histogram.length; ih++) {\n        mean += ih * histogram[ih];\n    }\n    mean /= total;\n    threshold = mean;\n    while (threshold !== Tprev) {\n        // Calculate some statistics.\n        const sumA1 = sumA(histogram, threshold);\n        const sumA2 = sumA(histogram, histogram.length - 1);\n        const sumB1 = sumB(histogram, threshold);\n        const sumB2 = sumB(histogram, histogram.length - 1);\n        const sumC1 = sumC(histogram, threshold);\n        const sumC2 = sumC(histogram, histogram.length - 1);\n        mu = sumB1 / sumA1;\n        nu = (sumB2 - sumB1) / (sumA2 - sumA1);\n        p = sumA1 / sumA2;\n        q = (sumA2 - sumA1) / sumA2;\n        sigma2 = sumC1 / sumA1 - mu * mu;\n        tau2 = (sumC2 - sumC1) / (sumA2 - sumA1) - nu * nu;\n        // The terms of the quadratic equation to be solved.\n        w0 = 1 / sigma2 - 1 / tau2;\n        w1 = mu / sigma2 - nu / tau2;\n        w2 =\n            (mu * mu) / sigma2 -\n                (nu * nu) / tau2 +\n                Math.log10((sigma2 * (q * q)) / (tau2 * (p * p)));\n        // If the next threshold would be imaginary, return with the current one.\n        sqterm = w1 * w1 - w0 * w2;\n        if (sqterm < 0) {\n            return threshold;\n        }\n        // The updated threshold is the integer part of the solution of the quadratic equation.\n        Tprev = threshold;\n        temp = (w1 + Math.sqrt(sqterm)) / w0;\n        if (Number.isNaN(temp)) {\n            threshold = Tprev;\n        }\n        else {\n            threshold = Math.floor(temp);\n        }\n    }\n    return threshold;\n}\n// aux func\nfunction sumA(y, j) {\n    let x = 0;\n    for (let i = 0; i <= j; i++) {\n        x += y[i];\n    }\n    return x;\n}\nfunction sumB(y, j) {\n    let x = 0;\n    for (let i = 0; i <= j; i++) {\n        x += i * y[i];\n    }\n    return x;\n}\nfunction sumC(y, j) {\n    let x = 0;\n    for (let i = 0; i <= j; i++) {\n        x += i * i * y[i];\n    }\n    return x;\n}\n//# sourceMappingURL=minError.js.map","// see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n// J. M. S. Prewitt and M. L. Mendelsohn, \"The analysis of cell images,\" in\n// Annals of the New York Academy of Sciences, vol. 128, pp. 1035-1053, 1966.\n// ported to ImageJ plugin by G.Landini from Antti Niemisto's Matlab code (GPL)\n// Original Matlab code Copyright (C) 2004 Antti Niemisto\n// See http://www.cs.tut.fi/~ant/histthresh/ for an excellent slide presentation\n// and the original Matlab code\n/**\n * Return a threshold for a histogram.\n * @param histogram - Image histogram.\n * @returns The threshold.\n */\nexport default function minimum(histogram) {\n    if (histogram.length < 2) {\n        // validate that the histogram has at least two color values\n        return 0;\n    }\n    let iterations = 0; // number of iterations of the smoothing process\n    let threshold = -1;\n    let max = -1; // maximum color value with a greater number of pixels to 0\n    let histogramCopy = new Array(histogram.length); // a copy of the histogram\n    for (let i = 0; i < histogram.length; i++) {\n        histogramCopy[i] = histogram[i];\n        if (histogram[i] > 0) {\n            max = i;\n        }\n    }\n    while (!bimodalTest(histogramCopy)) {\n        histogramCopy = smoothed(histogramCopy);\n        iterations++;\n        if (iterations > 10000) {\n            // if they occur more than 10000 iterations it returns -1\n            return threshold;\n        }\n    }\n    for (let i = 1; i < max; i++) {\n        if (histogramCopy[i - 1] > histogramCopy[i] &&\n            histogramCopy[i + 1] >= histogramCopy[i]) {\n            threshold = i;\n            break;\n        }\n    }\n    return threshold;\n}\nfunction smoothed(histogram) {\n    // Smooth with a 3 point running mean filter\n    const auHistogram = new Array(histogram.length); // a copy of the histogram for the smoothing process\n    for (let i = 1; i < histogram.length - 1; i++) {\n        auHistogram[i] = (histogram[i - 1] + histogram[i] + histogram[i + 1]) / 3;\n    }\n    auHistogram[0] = (histogram[0] + histogram[1]) / 3;\n    auHistogram[histogram.length - 1] =\n        (histogram.at(-2) + histogram.at(-1)) / 3;\n    return auHistogram;\n}\nfunction bimodalTest(histogram) {\n    // It is responsible for determining if a histogram is bimodal\n    const len = histogram.length;\n    let isBimodal = false;\n    let peaks = 0;\n    for (let k = 1; k < len - 1; k++) {\n        if (histogram[k - 1] < histogram[k] && histogram[k + 1] < histogram[k]) {\n            peaks++;\n            if (peaks > 2) {\n                return false;\n            }\n        }\n    }\n    if (peaks === 2) {\n        isBimodal = true;\n    }\n    return isBimodal;\n}\n//# sourceMappingURL=minimum.js.map","// see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n// W. Tsai, \"Moment-preserving thresholding: a new approach,\" Computer Vision,\n// Graphics, and Image Processing, vol. 29, pp. 377-393, 1985.\n// Ported to ImageJ plugin by G.Landini from the the open source project FOURIER 0.8\n// by M. Emre Celebi , Department of Computer Science, Louisiana State University in Shreveport\n// Shreveport, LA 71115, USA\n// http://sourceforge.net/projects/fourier-ipal\n// http://www.lsus.edu/faculty/~ecelebi/fourier.htm\n/**\n * Return a threshold for a histogram.\n * @param histogram - Image histogram.\n * @param total - Number of pixels in the image.\n * @returns The threshold.\n */\nexport default function moments(histogram, total) {\n    // moments\n    const m0 = 1;\n    let m1 = 0;\n    let m2 = 0;\n    let m3 = 0;\n    let sum = 0;\n    let threshold = -1;\n    const histogramLength = histogram.length;\n    const normalizedHistogram = [];\n    for (let i = 0; i < histogramLength; i++) {\n        normalizedHistogram.push(histogram[i] / total);\n    }\n    /* Calculate the first, second, and third order moments */\n    for (let i = 0; i < histogramLength; i++) {\n        m1 += i * normalizedHistogram[i];\n        m2 += i * i * normalizedHistogram[i];\n        m3 += i * i * i * normalizedHistogram[i];\n    }\n    /*\n       First 4 moments of the gray-level image should match the first 4 moments\n       of the target binary image. This leads to 4 equalities whose solutions\n       are given in the Appendix of Ref. 1\n       */\n    const cd = m0 * m2 - m1 * m1; // determinant of the matriz of hankel for moments 2x2\n    const c0 = (-m2 * m2 + m1 * m3) / cd;\n    const c1 = (m0 * -m3 + m2 * m1) / cd;\n    // new two gray values where z0<z1\n    const z0 = 0.5 * (-c1 - Math.sqrt(c1 * c1 - 4 * c0));\n    const z1 = 0.5 * (-c1 + Math.sqrt(c1 * c1 - 4 * c0));\n    const p0 = (z1 - m1) /\n        (z1 -\n            z0); /* Fraction of the object pixels in the target binary image (p0z0+p1z1=m1) */\n    // The threshold is the gray-level closest to the p0-tile of the normalized histogram\n    for (let i = 0; i < histogramLength; i++) {\n        sum += normalizedHistogram[i];\n        if (sum > p0) {\n            threshold = i;\n            break;\n        }\n    }\n    return threshold;\n}\n//# sourceMappingURL=moments.js.map","/*\n * The method is present in: Otsu, N (1979), \"A threshold selection method from gray-level histograms\", IEEE Trans. Sys., Man., Cyber. 9: 62-66\n * The Otsu implementation is based on: https://en.wikipedia.org/wiki/Otsu's_method\n * @param histogram - the histogram of the image\n * @returns {number} - the threshold\n */\n/**\n * Return a threshold for a histogram using Otsu algorithm.\n * @param histogramCounts - The image histogram.\n * @param total - Total number of pixels of the image.\n * @returns The threshold.\n */\nexport function otsu(histogramCounts, total) {\n    let sumB = 0;\n    let wB = 0;\n    let maximum = 0;\n    let level = 0;\n    let sum1 = 0;\n    for (let i = 0; i < histogramCounts.length; i++) {\n        sum1 += i * histogramCounts[i];\n    }\n    for (let ii = 0; ii < histogramCounts.length; ii++) {\n        wB = wB + histogramCounts[ii];\n        const wF = total - wB;\n        if (wB === 0 || wF === 0) {\n            continue;\n        }\n        sumB = sumB + ii * histogramCounts[ii];\n        const mF = (sum1 - sumB) / wF;\n        const between = wB * wF * (sumB / wB - mF) * (sumB / wB - mF);\n        if (between >= maximum) {\n            level = ii;\n            maximum = between;\n        }\n    }\n    return level;\n}\n//# sourceMappingURL=otsu.js.map","// See http://imagej.nih.gov/ij/download/tools/source/ij/process/AutoThresholder.java\n// W. Doyle, \"Operation useful for similarity-invariant pattern recognition,\"\n// Journal of the Association for Computing Machinery, vol. 9,pp. 259-267, 1962.\n// ported to ImageJ plugin by G.Landini from Antti Niemisto's Matlab code (GPL)\n// Original Matlab code Copyright (C) 2004 Antti Niemisto\n// See http://www.cs.tut.fi/~ant/histthresh/ for an excellent slide presentation\n// and the original Matlab code.\n/**\n * Return a threshold for a histogram using percentiles.\n * @param histogram - Image histogram.\n * @returns The threshold.\n */\nexport default function percentile(histogram) {\n    let threshold = -1;\n    const percentile = 0.5; // default fraction of foreground pixels\n    const avec = new Array(histogram.length);\n    const total = partialSum(histogram, histogram.length - 1);\n    let temp = 1;\n    for (let i = 0; i < histogram.length; i++) {\n        avec[i] = Math.abs(partialSum(histogram, i) / total - percentile);\n        if (avec[i] < temp) {\n            temp = avec[i];\n            threshold = i;\n        }\n    }\n    return threshold;\n}\nfunction partialSum(histogram, endIndex) {\n    let x = 0;\n    for (let i = 0; i <= endIndex; i++) {\n        x += histogram[i];\n    }\n    return x;\n}\n//# sourceMappingURL=percentile.js.map","// see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n// Kapur J.N., Sahoo P.K., and Wong A.K.C. (1985) \"A New Method for\n// Gray-Level Picture Thresholding Using the Entropy of the Histogram\"\n// Graphical Models and Image Processing, 29(3): 273-285\n// M. Emre Celebi\n// 06.15.2007\n// Ported to ImageJ plugin by G.Landini from E Celebi's fourier_0.8 routines\n/**\n * Return a threshold for a histogram using its entropy.\n * @param histogram - The image histogram.\n * @param total - Total number of pixels of the image.\n * @returns The threshold.\n */\nexport default function renyiEntropy(histogram, total) {\n    let firstBin; // First non-zero bin\n    let lastBin; // last non-zero bin\n    const normHisto = new Array(histogram.length); // normalized histogram\n    const P1 = new Array(histogram.length); // accumulative normalized histogram\n    const P2 = new Array(histogram.length); // accumulative normalized histogram\n    // Entropy Variables\n    let threshold1 = 0;\n    let threshold2 = 0;\n    let threshold3 = 0;\n    let maxEnt1 = 0;\n    let maxEnt2 = 0;\n    let maxEnt3 = 0;\n    const alpha2 = 0.5;\n    const term2 = 1 / (1 - alpha2);\n    const alpha3 = 2;\n    const term3 = 1 / (1 - alpha3);\n    for (let ih = 0; ih < histogram.length; ih++) {\n        normHisto[ih] = histogram[ih] / total;\n    }\n    P1[0] = normHisto[0];\n    P2[0] = 1 - P1[0];\n    for (let ih = 1; ih < histogram.length; ih++) {\n        P1[ih] = P1[ih - 1] + normHisto[ih];\n        P2[ih] = 1 - P1[ih];\n    }\n    /* Determine the first non-zero bin */\n    firstBin = 0;\n    for (let ih = 0; ih < histogram.length; ih++) {\n        if (Math.abs(P1[ih]) >= Number.EPSILON) {\n            firstBin = ih;\n            break;\n        }\n    }\n    /* Determine the last non-zero bin */\n    lastBin = histogram.length - 1;\n    for (let ih = histogram.length - 1; ih >= firstBin; ih--) {\n        if (Math.abs(P2[ih]) >= Number.EPSILON) {\n            lastBin = ih;\n            break;\n        }\n    }\n    /* Maximum Entropy Thresholding - BEGIN */\n    /* ALPHA = 1.0 */\n    /* Calculate the total entropy each gray-level\n       and find the threshold that maximizes it\n       */\n    for (let it = firstBin; it <= lastBin; it++) {\n        /* Entropy of the background pixels */\n        let entBack1 = 0;\n        let entBack2 = 0;\n        let entBack3 = 0;\n        for (let ih = 0; ih <= it; ih++) {\n            if (histogram[ih] !== 0) {\n                entBack1 -= (normHisto[ih] / P1[it]) * Math.log(normHisto[ih] / P1[it]);\n            }\n            entBack2 += Math.sqrt(normHisto[ih] / P1[it]);\n            entBack3 += (normHisto[ih] * normHisto[ih]) / (P1[it] * P1[it]);\n        }\n        /* Entropy of the object pixels */\n        let entObj1 = 0;\n        let entObj2 = 0;\n        let entObj3 = 0;\n        for (let ih = it + 1; ih < histogram.length; ih++) {\n            if (histogram[ih] !== 0) {\n                entObj1 -= (normHisto[ih] / P2[it]) * Math.log(normHisto[ih] / P2[it]);\n            }\n            entObj2 += Math.sqrt(normHisto[ih] / P2[it]);\n            entObj3 += (normHisto[ih] * normHisto[ih]) / (P2[it] * P2[it]);\n        }\n        /* Total entropy */\n        const totEnt1 = entBack1 + entObj1;\n        const totEnt2 = term2 * (entBack2 * entObj2 > 0 ? Math.log(entBack2 * entObj2) : 0);\n        const totEnt3 = term3 * (entBack3 * entObj3 > 0 ? Math.log(entBack3 * entObj3) : 0);\n        if (totEnt1 > maxEnt1) {\n            maxEnt1 = totEnt1;\n            threshold1 = it;\n        }\n        if (totEnt2 > maxEnt2) {\n            maxEnt2 = totEnt2;\n            threshold2 = it;\n        }\n        if (totEnt3 > maxEnt3) {\n            maxEnt3 = totEnt3;\n            threshold3 = it;\n        }\n    }\n    /* End Maximum Entropy Thresholding */\n    const tStars = new Uint32Array([threshold1, threshold2, threshold3]);\n    tStars.sort();\n    let betas;\n    /* Adjust beta values */\n    if (Math.abs(tStars[0] - tStars[1]) <= 5) {\n        if (Math.abs(tStars[1] - tStars[2]) <= 5) {\n            betas = [1, 2, 1];\n        }\n        else {\n            betas = [0, 1, 3];\n        }\n    }\n    else if (Math.abs(tStars[1] - tStars[2]) <= 5) {\n        betas = [3, 1, 0];\n    }\n    else {\n        betas = [1, 2, 1];\n    }\n    /* Determine the optimal threshold value */\n    const omega = P1[tStars[2]] - P1[tStars[0]];\n    const optThreshold = Math.round(tStars[0] * (P1[tStars[0]] + 0.25 * omega * betas[0]) +\n        0.25 * tStars[1] * omega * betas[1] +\n        tStars[2] * (P2[tStars[2]] + 0.25 * omega * betas[2]));\n    return optThreshold;\n}\n//# sourceMappingURL=renyiEntropy.js.map","// see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n// Shanhbag A.G. (1994) \"Utilization of Information Measure as a Means of\n// Image Thresholding\" Graphical Models and Image Processing, 56(5): 414-419\n// Ported to ImageJ plugin by G.Landini from E Celebi's fourier_0.8 routines\n/**\n * Return a threshold for a histogram using Shanbhag algorithm.\n * @param histogram - The image histogram.\n * @param total - Total number of pixels of the image.\n * @returns The threshold.\n */\nexport default function shanbhag(histogram, total) {\n    const normHisto = new Array(histogram.length); // normalized histogram\n    for (let ih = 0; ih < histogram.length; ih++) {\n        normHisto[ih] = histogram[ih] / total;\n    }\n    const P1 = new Array(histogram.length); // cumulative normalized histogram\n    const P2 = new Array(histogram.length);\n    P1[0] = normHisto[0];\n    P2[0] = 1 - P1[0];\n    for (let ih = 1; ih < histogram.length; ih++) {\n        P1[ih] = P1[ih - 1] + normHisto[ih];\n        P2[ih] = 1 - P1[ih];\n    }\n    /* Determine the first non-zero bin */\n    let firstBin = 0;\n    for (let ih = 0; ih < histogram.length; ih++) {\n        if (Math.abs(P1[ih]) >= Number.EPSILON) {\n            firstBin = ih;\n            break;\n        }\n    }\n    /* Determine the last non-zero bin */\n    let lastBin = histogram.length - 1;\n    for (let ih = histogram.length - 1; ih >= firstBin; ih--) {\n        if (Math.abs(P2[ih]) >= Number.EPSILON) {\n            lastBin = ih;\n            break;\n        }\n    }\n    // Calculate the total entropy each gray-level\n    // and find the threshold that maximizes it\n    let threshold = -1;\n    let minEnt = Number.MAX_VALUE; // min entropy\n    let term;\n    let totEnt; // total entropy\n    let entBack; // entropy of the background pixels at a given threshold\n    let entObj; // entropy of the object pixels at a given threshold\n    for (let it = firstBin; it <= lastBin; it++) {\n        /* Entropy of the background pixels */\n        entBack = 0;\n        term = 0.5 / P1[it];\n        for (let ih = 1; ih <= it; ih++) {\n            entBack -= normHisto[ih] * Math.log(1 - term * P1[ih - 1]);\n        }\n        entBack *= term;\n        /* Entropy of the object pixels */\n        entObj = 0;\n        term = 0.5 / P2[it];\n        for (let ih = it + 1; ih < histogram.length; ih++) {\n            entObj -= normHisto[ih] * Math.log(1 - term * P2[ih]);\n        }\n        entObj *= term;\n        /* Total entropy */\n        totEnt = Math.abs(entBack - entObj);\n        if (totEnt < minEnt) {\n            minEnt = totEnt;\n            threshold = it;\n        }\n    }\n    return threshold;\n}\n//# sourceMappingURL=shanbhag.js.map","// see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n// Zack, G. W., Rogers, W. E. and Latt, S. A., 1977,\n// Automatic Measurement of Sister Chromatid Exchange Frequency,\n// Journal of Histochemistry and Cytochemistry 25 (7), pp. 741-753\n//\n//  modified from Johannes Schindelin plugin\n/**\n * Return a threshold for a histogram using Triangle algorithm.\n * @param histogram - The image histogram.\n * @returns The threshold.\n */\nexport function triangle(histogram) {\n    // find min and max\n    let min = 0;\n    let dmax = 0;\n    let max = 0;\n    let min2 = 0;\n    for (let i = 0; i < histogram.length; i++) {\n        if (histogram[i] > 0) {\n            min = i;\n            break;\n        }\n    }\n    if (min > 0) {\n        // line to the (p==0) point, not to histogram[min]\n        min--;\n    }\n    // The Triangle algorithm cannot tell whether the data is skewed to one side or another.\n    // This causes a problem as there are 2 possible thresholds between the max and the 2 extremes\n    // of the histogram.\n    // Here I propose to find out to which side of the max point the data is furthest, and use that as\n    //  the other extreme.\n    for (let i = histogram.length - 1; i > 0; i--) {\n        if (histogram[i] > 0) {\n            min2 = i;\n            break;\n        }\n    }\n    if (min2 < histogram.length - 1) {\n        // line to the (p==0) point, not to data[min]\n        min2++;\n    }\n    for (let i = 0; i < histogram.length; i++) {\n        if (histogram[i] > dmax) {\n            max = i;\n            dmax = histogram[i];\n        }\n    }\n    // find which is the furthest side\n    let inverted = false;\n    if (max - min < min2 - max) {\n        // reverse the histogram\n        inverted = true;\n        let left = 0; // index of leftmost element\n        let right = histogram.length - 1; // index of rightmost element\n        while (left < right) {\n            // exchange the left and right elements\n            const temp = histogram[left];\n            histogram[left] = histogram[right];\n            histogram[right] = temp;\n            // move the bounds toward the center\n            left++;\n            right--;\n        }\n        min = histogram.length - 1 - min2;\n        max = histogram.length - 1 - max;\n    }\n    if (min === max) {\n        return min;\n    }\n    // describe line by nx * x + ny * y - d = 0\n    let nx, ny, d;\n    // nx is just the max frequency as the other point has freq=0\n    nx = histogram[max]; // -min; // data[min]; //  lowest value bmin = (p=0)% in the image\n    ny = min - max;\n    d = Math.hypot(nx, ny);\n    nx /= d;\n    ny /= d;\n    d = nx * min + ny * histogram[min];\n    // find split point\n    let split = min;\n    let splitDistance = 0;\n    for (let i = min + 1; i <= max; i++) {\n        const newDistance = nx * i + ny * histogram[i] - d;\n        if (newDistance > splitDistance) {\n            split = i;\n            splitDistance = newDistance;\n        }\n    }\n    split--;\n    if (inverted) {\n        // The histogram might be used for something else, so let's reverse it back\n        let left = 0;\n        let right = histogram.length - 1;\n        while (left < right) {\n            const temp = histogram[left];\n            histogram[left] = histogram[right];\n            histogram[right] = temp;\n            left++;\n            right--;\n        }\n        return histogram.length - 1 - split;\n    }\n    else {\n        return split;\n    }\n}\n//# sourceMappingURL=triangle.js.map","// see https://github.com/fiji/Auto_Threshold/blob/master/src/main/java/fiji/threshold/Auto_Threshold.java\n// Implements Yen  thresholding method\n// 1) Yen J.C., Chang F.J., and Chang S. (1995) \"A New Criterion\n//    for Automatic Multilevel Thresholding\" IEEE Trans. on Image\n//    Processing, 4(3): 370-378\n// 2) Sezgin M. and Sankur B. (2004) \"Survey over Image Thresholding\n//    Techniques and Quantitative Performance Evaluation\" Journal of\n//    Electronic Imaging, 13(1): 146-165\n//    http://citeseer.ist.psu.edu/sezgin04survey.html\n//\n// M. Emre Celebi\n// 06.15.2007\n// Ported to ImageJ plugin by G.Landini from E Celebi's fourier_0.8 routines\n/**\n * Return a threshold for a histogram using Yen algorithm.\n * @param histogram - The image histogram.\n * @param total - Total number of pixels of the image.\n * @returns The threshold.\n */\nexport default function yen(histogram, total) {\n    const normHisto = new Array(histogram.length); // normalized histogram\n    for (let ih = 0; ih < histogram.length; ih++) {\n        normHisto[ih] = histogram[ih] / total;\n    }\n    const P1 = new Array(histogram.length); // cumulative normalized histogram\n    P1[0] = normHisto[0];\n    for (let ih = 1; ih < histogram.length; ih++) {\n        P1[ih] = P1[ih - 1] + normHisto[ih];\n    }\n    const P1Sq = new Array(histogram.length);\n    P1Sq[0] = normHisto[0] * normHisto[0];\n    for (let ih = 1; ih < histogram.length; ih++) {\n        P1Sq[ih] = P1Sq[ih - 1] + normHisto[ih] * normHisto[ih];\n    }\n    const P2Sq = new Array(histogram.length);\n    P2Sq[histogram.length - 1] = 0;\n    for (let ih = histogram.length - 2; ih >= 0; ih--) {\n        P2Sq[ih] = P2Sq[ih + 1] + normHisto[ih + 1] * normHisto[ih + 1];\n    }\n    /* Find the threshold that maximizes the criterion */\n    let threshold = -1;\n    let maxCrit = Number.MIN_VALUE;\n    let crit;\n    for (let it = 0; it < histogram.length; it++) {\n        crit =\n            -1 * (P1Sq[it] * P2Sq[it] > 0 ? Math.log(P1Sq[it] * P2Sq[it]) : 0) +\n                2 * (P1[it] * (1 - P1[it]) > 0 ? Math.log(P1[it] * (1 - P1[it])) : 0);\n        if (crit > maxCrit) {\n            maxCrit = crit;\n            threshold = it;\n        }\n    }\n    return threshold;\n}\n//# sourceMappingURL=yen.js.map","import { match } from 'ts-pattern';\nimport { imageToOutputMask } from '../utils/getOutputImage.js';\nimport huang from './thresholds/huang.js';\nimport intermodes from './thresholds/intermodes.js';\nimport isodata from './thresholds/isodata.js';\nimport li from './thresholds/li.js';\nimport maxEntropy from './thresholds/maxEntropy.js';\nimport mean from './thresholds/mean.js';\nimport minError from './thresholds/minError.js';\nimport minimum from './thresholds/minimum.js';\nimport moments from './thresholds/moments.js';\nimport { otsu } from './thresholds/otsu.js';\nimport percentile from './thresholds/percentile.js';\nimport renyiEntropy from './thresholds/renyiEntropy.js';\nimport shanbhag from './thresholds/shanbhag.js';\nimport { triangle } from './thresholds/triangle.js';\nimport yen from './thresholds/yen.js';\nexport const ThresholdAlgorithm = {\n    HUANG: 'huang',\n    INTERMODES: 'intermodes',\n    ISODATA: 'isodata',\n    LI: 'li',\n    MAX_ENTROPY: 'maxEntropy',\n    MEAN: 'mean',\n    MIN_ERROR: 'minError',\n    MINIMUM: 'minimum',\n    MOMENTS: 'moments',\n    OTSU: 'otsu',\n    PERCENTILE: 'percentile',\n    RENYI_ENTROPY: 'renyiEntropy',\n    SHANBHAG: 'shanbhag',\n    TRIANGLE: 'triangle',\n    YEN: 'yen',\n};\n/**\n * Compute threshold value for an image using the specified algorithm.\n * @param image - The grey image.\n * @param options - Threshold options.\n * @returns The threshold value for the image.\n */\nexport function computeThreshold(image, options = {}) {\n    const { algorithm = 'otsu', slots } = options;\n    if (image.channels !== 1) {\n        throw new TypeError('threshold can only be computed on images with one channel');\n    }\n    const histogram = image.histogram({ slots });\n    const scale = slots ? 2 ** image.bitDepth / slots : 1;\n    return match(algorithm)\n        .with('huang', () => huang(histogram) * scale)\n        .with('intermodes', () => intermodes(histogram) * scale)\n        .with('isodata', () => isodata(histogram) * scale)\n        .with('li', () => li(histogram, image.size) * scale)\n        .with('maxEntropy', () => maxEntropy(histogram, image.size) * scale)\n        .with('mean', () => mean(histogram, image.size) * scale)\n        .with('minimum', () => minimum(histogram) * scale)\n        .with('minError', () => minError(histogram, image.size) * scale)\n        .with('moments', () => moments(histogram, image.size) * scale)\n        .with('otsu', () => otsu(histogram, image.size) * scale)\n        .with('percentile', () => percentile(histogram) * scale)\n        .with('renyiEntropy', () => renyiEntropy(histogram, image.size) * scale)\n        .with('shanbhag', () => shanbhag(histogram, image.size) * scale)\n        .with('triangle', () => triangle(histogram) * scale)\n        .with('yen', () => yen(histogram, image.size) * scale)\n        .exhaustive();\n}\n// See: https://docs.opencv.org/4.0.1/d7/d1b/group__imgproc__misc.html#gaa9e58d2860d4afa658ef70a9b1115576\n/**\n * Create a black and white image based on a threshold value.\n * @param image - The grey image to convert.\n * @param options - Threshold options.\n * @returns The resulting mask.\n */\nexport function threshold(image, options = {}) {\n    let thresholdValue;\n    if ('threshold' in options) {\n        const threshold = options.threshold;\n        if (threshold < 0 || threshold > 1) {\n            throw new RangeError('threshold must be a value between 0 and 1');\n        }\n        thresholdValue = threshold * image.maxValue;\n    }\n    else {\n        thresholdValue = computeThreshold(image, options);\n    }\n    const result = imageToOutputMask(image, options);\n    for (let i = 0; i < image.size; i++) {\n        result.setBitByIndex(i, image.getValueByIndex(i, 0) > thresholdValue ? 1 : 0);\n    }\n    return result;\n}\n//# sourceMappingURL=threshold.js.map","import { assert } from '../utils/validators/assert.js';\n/**\n * Converts R, G and B values to a single value using Luma 709 standard({@link https://en.wikipedia.org/wiki/Luma_(video)}).\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @returns - Corresponding gray value.\n */\nexport function luma709(red, green, blue) {\n    // sRGB\n    // return red * 0.2126 + green * 0.7152 + blue * 0.0722;\n    // Let's do a little trick ... in order not convert the integer to a double we do\n    // the multiplication with integer to reach a total of 32768 and then shift the bits\n    // of 15 to the right\n    // This does a Math.floor and may lead to small (max 1) difference\n    // Same result, > 10% faster on the full grey conversion\n    return (red * 6966 + green * 23436 + blue * 2366) >> 15;\n}\n/**\n *  Converts R, G and B values to a single value using Luma 601 standard({@link https://en.wikipedia.org/wiki/Luma_(video)}).\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @returns - Corresponding gray value.\n */\nexport function luma601(red, green, blue) {\n    // NTSC\n    // return this.red * 0.299 + green * 0.587 + blue * 0.114;\n    return (red * 9798 + green * 19235 + blue * 3735) >> 15;\n}\n/**\n * Return the maximal value between red, green and blue.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @returns - Corresponding gray value.\n */\nexport function max(red, green, blue) {\n    return Math.max(red, green, blue);\n}\n/**\n * Return the minimal value between red, green and blue.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @returns - Corresponding gray value.\n */\nexport function min(red, green, blue) {\n    return Math.min(red, green, blue);\n}\n/**\n * Return the average of red, green and blue.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @returns - Corresponding gray value.\n */\nexport function average(red, green, blue) {\n    return ((red + green + blue) / 3) >> 0;\n}\n/**\n * Return the average between the max and min values of red, green and blue.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @returns - Corresponding gray value.\n */\nexport function minmax(red, green, blue) {\n    return (Math.max(red, green, blue) + Math.min(red, green, blue)) / 2;\n}\n/**\n * Return the red value.\n * @param red - Red value of current pixel.\n * @returns - Corresponding gray value.\n */\nexport function red(red) {\n    return red;\n}\n/**\n * Return the green value.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @returns - Corresponding gray value.\n */\nexport function green(red, green) {\n    return green;\n}\n/**\n * Return the blue value.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @returns - Corresponding gray value.\n */\nexport function blue(red, green, blue) {\n    return blue;\n}\n/**\n * Return the minimum of the inverses of red, green and blue.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @param image - Image to convert to grey.\n * @returns - Corresponding gray value.\n */\nexport function black(red, green, blue, image) {\n    return Math.min(image.maxValue - red, image.maxValue - green, image.maxValue - blue);\n}\n/**\n * Returns the cyan component of a pixel.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @param image - Image to convert to grey.\n * @returns - Corresponding gray value.\n */\nexport function cyan(red, green, blue, image) {\n    const blackColor = black(red, green, blue, image);\n    return (((image.maxValue - red - blackColor) / (1 - blackColor / image.maxValue)) >>\n        0);\n}\n/**\n * Returns the magenta component of a pixel.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @param image - Image to convert to grey.\n * @returns - Corresponding gray value.\n */\nexport function magenta(red, green, blue, image) {\n    const blackColor = black(red, green, blue, image);\n    return (((image.maxValue - green - blackColor) /\n        (1 - blackColor / image.maxValue)) >>\n        0);\n}\n/**\n * Returns the yellow component of a pixel.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @param image - Image to convert to grey.\n * @returns - Corresponding gray value.\n */\nexport function yellow(red, green, blue, image) {\n    const blackColor = black(red, green, blue, image);\n    return (((image.maxValue - blue - blackColor) /\n        (1 - blackColor / image.maxValue)) >>\n        0);\n}\n/**\n * Returns the hue of a pixel as a value between 0 and 255.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @param image - Source image for the RGB values.\n * @returns - Hue of the pixel.\n */\nexport function hue(red, green, blue, image) {\n    const minValue = min(red, green, blue);\n    const maxValue = max(red, green, blue);\n    if (maxValue === minValue) {\n        return 0;\n    }\n    let hue = 0;\n    const delta = maxValue - minValue;\n    if (maxValue === red) {\n        hue = (green - blue) / delta + (green < blue ? 6 : 0);\n    }\n    else if (maxValue === green) {\n        hue = (blue - red) / delta + 2;\n    }\n    else {\n        assert(maxValue === blue);\n        hue = (red - green) / delta + 4;\n    }\n    return ((hue / 6) * image.maxValue) >> 0;\n}\n/**\n * Returns the saturation component of a pixel.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @param image - Source image for the RGB values.\n * @returns - Saturation of the pixel.\n */\nexport function saturation(red, green, blue, image) {\n    // from HSV model\n    const minValue = min(red, green, blue);\n    const maxValue = max(red, green, blue);\n    const delta = maxValue - minValue;\n    return maxValue === 0 ? 0 : (delta / maxValue) * image.maxValue;\n}\n/**\n * Returns the lightness of a pixel.\n * @param red - Red value of current pixel.\n * @param green - Green value of current pixel.\n * @param blue - Blue value of current pixel.\n * @returns - Lightness of the pixel.\n */\nexport function lightness(red, green, blue) {\n    const minValue = min(red, green, blue);\n    const maxValue = max(red, green, blue);\n    return (maxValue + minValue) / 2;\n}\n//# sourceMappingURL=greyAlgorithms.js.map","import { getClamp } from '../utils/clamp.js';\nimport { getOutputImage } from '../utils/getOutputImage.js';\nimport { assert } from '../utils/validators/assert.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport * as greyAlgorithms from './greyAlgorithms.js';\nexport const GreyAlgorithm = {\n    LUMA_709: 'luma709',\n    LUMA_601: 'luma601',\n    MAX: 'max',\n    MIN: 'min',\n    AVERAGE: 'average',\n    MINMAX: 'minmax',\n    RED: 'red',\n    GREEN: 'green',\n    BLUE: 'blue',\n    BLACK: 'black',\n    CYAN: 'cyan',\n    MAGENTA: 'magenta',\n    YELLOW: 'yellow',\n    HUE: 'hue',\n    SATURATION: 'saturation',\n    LIGHTNESS: 'lightness',\n};\n{\n    // Check that all the algorithms are in the enum.\n    const algos = new Set(Object.values(GreyAlgorithm));\n    for (const algo of Object.keys(greyAlgorithms)) {\n        assert(algos.has(algo), `Grey algorithm ${algo} is missing in the GreyAlgorithm enum`);\n    }\n}\n/**\n * Convert the current image to grayscale.\n * The source image has to be RGB or RGBA.\n * If there is an alpha channel you have to specify what to do:\n * - keepAlpha :  keep the alpha channel, you will get a GREYA image.\n * - mergeAlpha : multiply each pixel of the image by the alpha, you will get a GREY image.\n * @param image - Original color image to convert to grey.\n * @param options - The grey conversion options.\n * @returns The resulting grey image.\n */\nexport function grey(image, options = {}) {\n    let { keepAlpha = false, mergeAlpha = true } = options;\n    const { algorithm = 'luma709' } = options;\n    checkProcessable(image, {\n        colorModel: ['RGB', 'RGBA'],\n    });\n    keepAlpha = keepAlpha && image.alpha;\n    mergeAlpha = mergeAlpha && image.alpha;\n    if (keepAlpha) {\n        mergeAlpha = false;\n    }\n    const newColorModel = keepAlpha ? 'GREYA' : 'GREY';\n    const newImage = getOutputImage(image, options, {\n        newParameters: { colorModel: newColorModel },\n    });\n    let method;\n    if (typeof algorithm === 'function') {\n        method = algorithm;\n    }\n    else {\n        method = greyAlgorithms[algorithm];\n    }\n    const clamp = getClamp(newImage);\n    for (let i = 0; i < image.size; i++) {\n        const red = image.getValueByIndex(i, 0);\n        const green = image.getValueByIndex(i, 1);\n        const blue = image.getValueByIndex(i, 2);\n        let newValue;\n        if (mergeAlpha) {\n            const alpha = image.getValueByIndex(i, 3);\n            newValue = clamp((method(red, green, blue, image) * alpha) / image.maxValue);\n        }\n        else {\n            newValue = clamp(method(red, green, blue, image));\n            if (keepAlpha) {\n                const alpha = image.getValueByIndex(i, 3);\n                newImage.setValueByIndex(i, 1, alpha);\n            }\n        }\n        newImage.setValueByIndex(i, 0, newValue);\n    }\n    return newImage;\n}\n//# sourceMappingURL=grey.js.map","import { Image } from '../Image.js';\nimport { getOutputImage, maskToOutputMask } from '../utils/getOutputImage.js';\nimport { setBlendedPixel } from '../utils/setBlendedPixel.js';\nimport { checkPointIsInteger } from '../utils/validators/checkPointIsInteger.js';\n/**\n * Copy the image to another one by specifying the location in the target image.\n * If the source image exceeds the boundaries of the target image, the excess pixels\n * are ignored. The result image will have the same dimensions as the target image.\n * @param source - The source image.\n * @param target - The target image.\n * @param options - Options.\n * @returns The target with the source copied to it.\n */\nexport function copyTo(source, target, options = {}) {\n    const { origin = { column: 0, row: 0 } } = options;\n    const { column, row } = origin;\n    if (source.colorModel !== target.colorModel) {\n        throw new RangeError('source and target must have the same color model');\n    }\n    checkPointIsInteger(origin, 'Origin');\n    let result;\n    if (target instanceof Image) {\n        result = getOutputImage(target, options, { clone: true });\n    }\n    else {\n        result = maskToOutputMask(target, options, { clone: true });\n    }\n    for (let currentRow = Math.max(row, 0); currentRow < Math.min(source.height + row, target.height); currentRow++) {\n        for (let currentColumn = Math.max(column, 0); currentColumn < Math.min(source.width + column, target.width); currentColumn++) {\n            const sourcePixel = source.getPixel(currentColumn - column, currentRow - row);\n            setBlendedPixel(result, currentColumn, currentRow, sourcePixel);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=copyTo.js.map","import { Image } from '../Image.js';\nimport { checkPointIsInteger } from '../utils/validators/checkPointIsInteger.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Crop the input image to a desired size.\n * @param image - Image to crop.\n * @param [options] - Crop options.\n * @returns The new cropped image.\n * @example\n * var cropped = image.crop({\n *   row:20,\n *   column:100\n * });\n */\nexport function crop(image, options = {}) {\n    const { origin = { row: 0, column: 0 }, width = image.width - origin.column, height = image.height - origin.row, } = options;\n    const { column, row } = origin;\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n    });\n    checkPointIsInteger(origin, 'Origin');\n    if (!Number.isInteger(width) || !Number.isInteger(height)) {\n        throw new RangeError(`Width and height (width:${width}; height:${height}) must be integers`);\n    }\n    if (row > image.height - 1 || column > image.width - 1) {\n        throw new RangeError(`Origin (row:${row}, column:${column}) out of range (${image.width - 1}; ${image.height - 1})`);\n    }\n    if (width <= 0 || height <= 0) {\n        throw new RangeError(`Width and height (width:${width}; height:${height}) must be positive numbers`);\n    }\n    if (row < 0 || column < 0) {\n        throw new RangeError(`Row and column (row:${row}, column:${column}) must be positive numbers`);\n    }\n    if (width > image.width - column || height > image.height - row) {\n        throw new RangeError(`Size is out of range (row:${row}, column:${column}, width:${width}, height:${height})`);\n    }\n    const newImage = Image.createFrom(image, {\n        width,\n        height,\n    });\n    for (let currentRow = 0; currentRow < height; currentRow++) {\n        for (let currentColumn = 0; currentColumn < width; currentColumn++) {\n            newImage.setPixel(currentColumn, currentRow, image.getPixel(column + currentColumn, row + currentRow));\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=crop.js.map","import checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Crops the image based on the alpha channel\n * This removes lines and columns where the alpha channel is lower than a threshold value.\n * @param image - Image to process.\n * @param options - Crop alpha options.\n * @returns The cropped image.\n */\nexport function cropAlpha(image, options = {}) {\n    checkProcessable(image, {\n        alpha: true,\n    });\n    const { threshold = image.maxValue } = options;\n    const left = findLeft(image, threshold, image.components);\n    if (left === -1) {\n        throw new RangeError(`could not find new dimensions. Threshold may be too high: ${threshold}`);\n    }\n    const top = findTop(image, threshold, image.components, left);\n    const bottom = findBottom(image, threshold, image.components, left);\n    const right = findRight(image, threshold, image.components, left, top, bottom);\n    return image.crop({\n        origin: { column: left, row: top },\n        width: right - left + 1,\n        height: bottom - top + 1,\n    });\n}\nfunction findLeft(image, threshold, channel) {\n    for (let row = 0; row < image.width; row++) {\n        for (let column = 0; column < image.height; column++) {\n            if (image.getValue(row, column, channel) >= threshold) {\n                return row;\n            }\n        }\n    }\n    return -1;\n}\nfunction findTop(image, threshold, channel, left) {\n    for (let row = 0; row < image.height; row++) {\n        for (let column = left; column < image.width; column++) {\n            if (image.getValue(column, row, channel) >= threshold) {\n                return row;\n            }\n        }\n    }\n    /* istanbul ignore next */\n    return -1;\n}\nfunction findBottom(image, threshold, channel, left) {\n    for (let row = image.height - 1; row >= 0; row--) {\n        for (let column = left; column < image.width; column++) {\n            if (image.getValue(column, row, channel) >= threshold) {\n                return row;\n            }\n        }\n    }\n    /* istanbul ignore next */\n    return -1;\n}\nfunction findRight(image, threshold, channel, left, top, bottom) {\n    for (let row = image.width - 1; row >= left; row--) {\n        for (let column = top; column <= bottom; column++) {\n            if (image.getValue(row, column, channel) >= threshold) {\n                return row;\n            }\n        }\n    }\n    /* istanbul ignore next */\n    return -1;\n}\n//# sourceMappingURL=cropAlpha.js.map","import { match } from 'ts-pattern';\nimport { round } from './round.js';\nexport const InterpolationType = {\n    NEAREST: 'nearest',\n    BILINEAR: 'bilinear',\n    BICUBIC: 'bicubic',\n};\n/**\n * Get the interpolation function based on its name.\n * @param interpolationType - Specified interpolation type.\n * @returns The interpolation function.\n */\nexport function getInterpolationFunction(interpolationType) {\n    return match(interpolationType)\n        .with('nearest', () => interpolateNearest)\n        .with('bilinear', () => interpolateBilinear)\n        .with('bicubic', () => interpolateBicubic)\n        .exhaustive();\n}\n/**\n * Interpolate using nearest neighbor.\n * @param image - The image to interpolate.\n * @param column - Column index.\n * @param row - Row index.\n * @param channel - Channel index.\n * @param interpolateBorder - Border interpolation function.\n * @returns The interpolated value.\n */\nfunction interpolateNearest(image, column, row, channel, interpolateBorder) {\n    column = Math.round(column);\n    row = Math.round(row);\n    return interpolateBorder(column, row, channel, image);\n}\n/**\n * Interpolate using bilinear interpolation.\n * @param image - The image to interpolate.\n * @param column - Column index.\n * @param row - Row index.\n * @param channel - Channel index.\n * @param interpolateBorder - Border interpolation function.\n * @returns The interpolated value.\n */\nfunction interpolateBilinear(image, column, row, channel, interpolateBorder) {\n    const px0 = Math.floor(column);\n    const py0 = Math.floor(row);\n    const px1 = px0 + 1;\n    const py1 = py0 + 1;\n    if (px1 < image.width && py1 < image.height && px0 >= 0 && py0 >= 0) {\n        const vx0y0 = image.getValue(px0, py0, channel);\n        const vx1y0 = image.getValue(px1, py0, channel);\n        const vx0y1 = image.getValue(px0, py1, channel);\n        const vx1y1 = image.getValue(px1, py1, channel);\n        const r1 = (px1 - column) * vx0y0 + (column - px0) * vx1y0;\n        const r2 = (px1 - column) * vx0y1 + (column - px0) * vx1y1;\n        return round((py1 - row) * r1 + (row - py0) * r2);\n    }\n    else {\n        const vx0y0 = interpolateBorder(px0, py0, channel, image);\n        const vx1y0 = interpolateBorder(px1, py0, channel, image);\n        const vx0y1 = interpolateBorder(px0, py1, channel, image);\n        const vx1y1 = interpolateBorder(px1, py1, channel, image);\n        const r1 = (px1 - column) * vx0y0 + (column - px0) * vx1y0;\n        const r2 = (px1 - column) * vx0y1 + (column - px0) * vx1y1;\n        return round((py1 - row) * r1 + (row - py0) * r2);\n    }\n}\n/**\n * Interpolate using bicubic interpolation.\n * @param image - The image to interpolate.\n * @param column - Column index.\n * @param row - Row index.\n * @param channel - Channel index.\n * @param interpolateBorder - Border interpolation function.\n * @param clamp - Clamp function.\n * @returns The interpolated value.\n */\nfunction interpolateBicubic(image, column, row, channel, interpolateBorder, clamp) {\n    const px1 = Math.floor(column);\n    const py1 = Math.floor(row);\n    if (px1 === column && py1 === row) {\n        return interpolateBorder(px1, py1, channel, image);\n    }\n    const xNorm = column - px1;\n    const yNorm = row - py1;\n    const vx0y0 = interpolateBorder(px1 - 1, py1 - 1, channel, image);\n    const vx1y0 = interpolateBorder(px1, py1 - 1, channel, image);\n    const vx2y0 = interpolateBorder(px1 + 1, py1 - 1, channel, image);\n    const vx3y0 = interpolateBorder(px1 + 2, py1 - 1, channel, image);\n    const v0 = cubic(vx0y0, vx1y0, vx2y0, vx3y0, xNorm);\n    const vx0y1 = interpolateBorder(px1 - 1, py1, channel, image);\n    const vx1y1 = interpolateBorder(px1, py1, channel, image);\n    const vx2y1 = interpolateBorder(px1 + 1, py1, channel, image);\n    const vx3y1 = interpolateBorder(px1 + 2, py1, channel, image);\n    const v1 = cubic(vx0y1, vx1y1, vx2y1, vx3y1, xNorm);\n    const vx0y2 = interpolateBorder(px1 - 1, py1 + 1, channel, image);\n    const vx1y2 = interpolateBorder(px1, py1 + 1, channel, image);\n    const vx2y2 = interpolateBorder(px1 + 1, py1 + 1, channel, image);\n    const vx3y2 = interpolateBorder(px1 + 2, py1 + 1, channel, image);\n    const v2 = cubic(vx0y2, vx1y2, vx2y2, vx3y2, xNorm);\n    const vx0y3 = interpolateBorder(px1 - 1, py1 + 2, channel, image);\n    const vx1y3 = interpolateBorder(px1, py1 + 2, channel, image);\n    const vx2y3 = interpolateBorder(px1 + 1, py1 + 2, channel, image);\n    const vx3y3 = interpolateBorder(px1 + 2, py1 + 2, channel, image);\n    const v3 = cubic(vx0y3, vx1y3, vx2y3, vx3y3, xNorm);\n    return round(clamp(cubic(v0, v1, v2, v3, yNorm)));\n}\n/**\n * Cubic function.\n * @param a - First value.\n * @param b - Second value.\n * @param c - Third value.\n * @param d - Fourth value.\n * @param x - X value.\n * @returns The interpolated value.\n */\nfunction cubic(a, b, c, d, x) {\n    return (b +\n        0.5 *\n            x *\n            (c - a + x * (2 * a - 5 * b + 4 * c - d + x * (3 * (b - c) + d - a))));\n}\n//# sourceMappingURL=interpolatePixel.js.map","import { Matrix, inverse } from 'ml-matrix';\nimport { Image } from '../Image.js';\nimport { getClamp } from '../utils/clamp.js';\nimport { getBorderInterpolation } from '../utils/interpolateBorder.js';\nimport { getInterpolationFunction } from '../utils/interpolatePixel.js';\n/**\n * Transforms an image using a matrix.\n * @param image - Original image.\n * @param transformMatrix - 2×3 transform matrix.\n * @param options - Transform options.\n * @returns The new image.\n */\nexport function transform(image, transformMatrix, options = {}) {\n    const { borderType = 'constant', borderValue = 0, interpolationType = 'bilinear', fullImage, } = options;\n    let { width = image.width, height = image.height } = options;\n    if (!isValidMatrix(transformMatrix)) {\n        throw new TypeError(`transformation matrix must be 2x3 or 3x3. Received ${transformMatrix.length}x${transformMatrix[1].length}`);\n    }\n    if (transformMatrix.length === 2) {\n        transformMatrix.push([0, 0, 1]);\n    }\n    if (fullImage) {\n        transformMatrix = transformMatrix.map((row) => row.slice());\n        transformMatrix[0][2] = 0;\n        transformMatrix[1][2] = 0;\n        const corners = [\n            image.getCoordinates('top-left'),\n            image.getCoordinates('top-right'),\n            image.getCoordinates('bottom-right'),\n            image.getCoordinates('bottom-left'),\n        ];\n        corners[1].column += 1;\n        corners[2].column += 1;\n        corners[2].row += 1;\n        corners[3].row += 1;\n        const transformedCorners = corners.map((corner) => {\n            return [\n                transformPoint(transformMatrix[0], transformMatrix[2], corner.column, corner.row),\n                transformPoint(transformMatrix[1], transformMatrix[2], corner.column, corner.row),\n            ];\n        });\n        const xCoordinates = transformedCorners.map((c) => c[0]);\n        const yCoordinates = transformedCorners.map((c) => c[1]);\n        const maxX = Math.max(...xCoordinates);\n        const maxY = Math.max(...yCoordinates);\n        const minX = Math.min(...xCoordinates);\n        const minY = Math.min(...yCoordinates);\n        const center = [(image.width - 1) / 2, (image.height - 1) / 2];\n        width = maxX - minX;\n        height = maxY - minY;\n        const centerX = transformPoint(transformMatrix[0], transformMatrix[2], center[0], center[1]);\n        const centerY = transformPoint(transformMatrix[1], transformMatrix[2], center[0], center[1]);\n        const a = (width - 1) / 2 - centerX;\n        const b = (height - 1) / 2 - centerY;\n        transformMatrix[0][2] = a;\n        transformMatrix[1][2] = b;\n        width = Math.round(width);\n        height = Math.round(height);\n    }\n    if (!options.inverse) {\n        transformMatrix = inverse(new Matrix(transformMatrix)).to2DArray();\n    }\n    const newImage = Image.createFrom(image, {\n        width,\n        height,\n    });\n    const interpolateBorder = getBorderInterpolation(borderType, borderValue);\n    const clamp = getClamp(newImage);\n    const interpolate = getInterpolationFunction(interpolationType);\n    for (let row = 0; row < newImage.height; row++) {\n        for (let column = 0; column < newImage.width; column++) {\n            const nx = transformPoint(transformMatrix[0], transformMatrix[2], column, row);\n            const ny = transformPoint(transformMatrix[1], transformMatrix[2], column, row);\n            for (let channel = 0; channel < newImage.channels; channel++) {\n                const newValue = interpolate(image, nx, ny, channel, interpolateBorder, clamp);\n                newImage.setValue(column, row, channel, newValue);\n            }\n        }\n    }\n    return newImage;\n}\n/**\n * Apply a transformation to a point.\n * @param transform - Transformation matrix.\n * @param perspective - Perspective matrix.\n * @param column - Column of the point.\n * @param row - Row of the point.\n * @returns New value.\n */\nfunction transformPoint(transform, perspective, column, row) {\n    return ((transform[0] * column + transform[1] * row + transform[2]) /\n        (perspective[0] * column + perspective[1] * row + perspective[2]));\n}\nfunction isValidMatrix(transformationMatrix) {\n    return ((transformationMatrix.length === 3 &&\n        transformationMatrix[0].length === 3 &&\n        transformationMatrix[1].length === 3 &&\n        transformationMatrix[2].length === 3) ||\n        (transformationMatrix.length === 2 &&\n            transformationMatrix[0].length === 3 &&\n            transformationMatrix[1].length === 3));\n}\n//# sourceMappingURL=transform.js.map","import { assert } from '../utils/validators/assert.js';\nimport { transform } from './transform.js';\n/**\n * Returns a resized copy of an image.\n * @param image - Original image.\n * @param options - Resize options.\n * @returns The new image.\n */\nexport function resize(image, options) {\n    const { interpolationType = 'bilinear', borderType = 'replicate', borderValue = 0, } = options;\n    const { width, height, xFactor, yFactor } = checkOptions(image, options);\n    return transform(image, [\n        [xFactor, 0, xFactor / 2],\n        [0, yFactor, yFactor / 2],\n    ], {\n        interpolationType,\n        borderType,\n        borderValue,\n        height,\n        width,\n    });\n}\n/**\n * Verify that the resize options are valid.\n * @param image - Image.\n * @param options - Resize options.\n * @returns Resize options.\n */\nfunction checkOptions(image, options) {\n    const { width, height, xFactor, yFactor, preserveAspectRatio = true, } = options;\n    if (width === undefined &&\n        height === undefined &&\n        xFactor === undefined &&\n        yFactor === undefined) {\n        throw new TypeError('at least one of the width, height, xFactor or yFactor options must be passed');\n    }\n    let newWidth;\n    let newHeight;\n    const maybeWidth = getSize(width, xFactor, image.width, preserveAspectRatio);\n    const maybeHeight = getSize(height, yFactor, image.height, preserveAspectRatio);\n    if (maybeWidth === undefined) {\n        assert(maybeHeight !== undefined);\n        newWidth = Math.round(maybeHeight * (image.width / image.height));\n    }\n    else {\n        newWidth = maybeWidth;\n    }\n    if (maybeHeight === undefined) {\n        assert(maybeWidth !== undefined);\n        newHeight = Math.round(maybeWidth * (image.height / image.width));\n    }\n    else {\n        newHeight = maybeHeight;\n    }\n    return {\n        width: newWidth,\n        height: newHeight,\n        xFactor: xFactor ?? newWidth / image.width,\n        yFactor: yFactor ?? newHeight / image.height,\n    };\n}\n/**\n * Compute automatic new size.\n * @param sizeOpt - Size option.\n * @param factor - Factor option.\n * @param sizeImg - Size of the image.\n * @param preserveAspectRatio - Whether to preserve the aspect ratio.\n * @returns New size.\n */\nfunction getSize(sizeOpt, factor, sizeImg, preserveAspectRatio) {\n    if (sizeOpt === undefined) {\n        if (factor !== undefined) {\n            return Math.round(sizeImg * factor);\n        }\n        else if (!preserveAspectRatio) {\n            return sizeImg;\n        }\n    }\n    else if (factor !== undefined) {\n        throw new TypeError('factor and size cannot be passed together');\n    }\n    else {\n        return sizeOpt;\n    }\n    return undefined;\n}\n//# sourceMappingURL=resize.js.map","import { Image } from '../Image.js';\n/**\n * Rotates an image in multiples of 90 degrees.\n * @param image - The image to rotate.\n * @param angle - The angle to rotate the image by. Positive values rotate clockwise, negative values rotate counter-clockwise.\n * @returns - The rotated image.\n */\nexport function rotate(image, angle) {\n    const newWidth = angle % 180 === 0 ? image.width : image.height;\n    const newHeight = angle % 180 === 0 ? image.height : image.width;\n    const newImage = Image.createFrom(image, {\n        width: newWidth,\n        height: newHeight,\n    });\n    if (angle === 90 || angle === -270) {\n        for (let column = 0; column < image.width; column++) {\n            for (let row = 0; row < image.height; row++) {\n                for (let channel = 0; channel < image.channels; channel++) {\n                    newImage.setValue(newImage.width - row - 1, column, channel, image.getValue(column, row, channel));\n                }\n            }\n        }\n    }\n    else if (angle === 180 || angle === -180) {\n        for (let column = 0; column < image.width; column++) {\n            for (let row = 0; row < image.height; row++) {\n                for (let channel = 0; channel < image.channels; channel++) {\n                    newImage.setValue(newImage.width - column - 1, newImage.height - row - 1, channel, image.getValue(column, row, channel));\n                }\n            }\n        }\n    }\n    else if (angle === 270 || angle === -90) {\n        for (let column = 0; column < image.width; column++) {\n            for (let row = 0; row < image.height; row++) {\n                for (let channel = 0; channel < image.channels; channel++) {\n                    newImage.setValue(row, newImage.height - column - 1, channel, image.getValue(column, row, channel));\n                }\n            }\n        }\n    }\n    else {\n        throw new RangeError(`invalid angle: ${angle}`);\n    }\n    return newImage;\n}\n//# sourceMappingURL=rotate.js.map","import { transform } from './transform.js';\n/**\n * Rotate an image anti-clockwise of a given angle.\n * @param image - Original image.\n * @param angle - Angle in degrees.\n * @param options - Rotate options.\n * @returns A new rotated image.\n */\nexport function transformRotate(image, angle, options = {}) {\n    const { center = 'center', scale = 1, ...otherOptions } = options;\n    let centerCoordinates;\n    if (typeof center === 'string') {\n        centerCoordinates = image.getCoordinates(center);\n    }\n    else {\n        centerCoordinates = center;\n    }\n    const transformMatrix = getRotationMatrix(angle, centerCoordinates, scale);\n    return transform(image, transformMatrix, otherOptions);\n}\n/**\n * Generates a rotation matrix for the given angle.\n * @param angle - Angle in degrees.\n * @param center - Center point of the image.\n * @param scale - Scaling factor.\n * @returns 3 x 3 rotation matrix.\n */\nfunction getRotationMatrix(angle, center, scale) {\n    const angleRadians = (angle * Math.PI) / 180;\n    const cos = scale * Math.cos(angleRadians);\n    const sin = scale * Math.sin(angleRadians);\n    return [\n        [cos, sin, (1 - cos) * center.column - sin * center.row],\n        [-sin, cos, sin * center.column + (1 - cos) * center.row],\n        [0, 0, 1],\n    ];\n}\n//# sourceMappingURL=transformRotate.js.map","import { Matrix, SingularValueDecomposition } from 'ml-matrix';\n// REFERENCES :\n// http://graphics.cs.cmu.edu/courses/15-463/2011_fall/Lectures/morphing.pdf\n/**\n * Computes a perspective transformation matrix to rectify a quadrilateral region into a rectangle.\n *\n * This function takes four corner points of a quadrilateral (e.g., a document photographed at an angle) and calculates the transformation matrix needed to \"unwarp\" it into a rectangular image.\n * The output dimensions can be specified or calculated automatically based on the input geometry.\n * @param pts - 4 reference corners.\n * @param options - PerspectiveWarpOptions.\n * @returns - Matrix from 4 points.\n */\nexport function getPerspectiveWarp(pts, options = {}) {\n    if (pts.length !== 4) {\n        throw new Error(`The array pts must have four elements, which are the four corners. Currently, pts have ${pts.length} elements`);\n    }\n    const { width, height } = options;\n    const [tl, tr, br, bl] = order4Points(pts);\n    let widthRect;\n    let heightRect;\n    if (height && width) {\n        widthRect = width;\n        heightRect = height;\n    }\n    else if (!height && !width) {\n        widthRect = Math.ceil(Math.max(distance2Points(tl, tr), distance2Points(bl, br)));\n        heightRect = Math.ceil(Math.max(distance2Points(tl, bl), distance2Points(tr, br)));\n    }\n    else {\n        throw new Error(`Invalid dimensions: ${width ? '`height`' : '`width`'} is missing. ` +\n            `Either provide both width and height, or omit both to auto-calculate dimensions.`);\n    }\n    const [x1, y1] = [0, 0];\n    const [x2, y2] = [widthRect - 1, 0];\n    const [x3, y3] = [widthRect - 1, heightRect - 1];\n    const [x4, y4] = [0, heightRect - 1];\n    const S = new Matrix([\n        [x1, y1, 1, 0, 0, 0, -x1 * tl.column, -y1 * tl.column],\n        [x2, y2, 1, 0, 0, 0, -x2 * tr.column, -y2 * tr.column],\n        [x3, y3, 1, 0, 0, 0, -x3 * br.column, -y3 * br.column],\n        [x4, y4, 1, 0, 0, 0, -x4 * bl.column, -y4 * bl.column],\n        [0, 0, 0, x1, y1, 1, -x1 * tl.row, -y1 * tl.row],\n        [0, 0, 0, x2, y2, 1, -x2 * tr.row, -y2 * tr.row],\n        [0, 0, 0, x3, y3, 1, -x3 * br.row, -y3 * br.row],\n        [0, 0, 0, x4, y4, 1, -x4 * bl.row, -y4 * bl.row],\n    ]);\n    const D = Matrix.columnVector([\n        tl.column,\n        tr.column,\n        br.column,\n        bl.column,\n        tl.row,\n        tr.row,\n        br.row,\n        bl.row,\n    ]);\n    const svd = new SingularValueDecomposition(S);\n    const T = svd.solve(D).to1DArray(); // solve S*T = D\n    T.push(1);\n    const M = [];\n    for (let i = 0; i < 3; i++) {\n        const row = [];\n        for (let j = 0; j < 3; j++) {\n            row.push(T[i * 3 + j]);\n        }\n        M.push(row);\n    }\n    return { matrix: M, width: widthRect, height: heightRect };\n}\n/**\n * Sorts 4 points in order =>[top-left,top-right,bottom-right,bottom-left]. Input points must be in clockwise or counter-clockwise order.\n * @param pts - Array of 4 points.\n * @returns Sorted array of 4 points.\n */\nexport function order4Points(pts) {\n    let tl;\n    let tr;\n    let br;\n    let bl;\n    let minX = pts[0].column;\n    let indexMinX = 0;\n    for (let i = 1; i < pts.length; i++) {\n        if (pts[i].column < minX) {\n            minX = pts[i].column;\n            indexMinX = i;\n        }\n    }\n    let minX2 = pts[(indexMinX + 1) % pts.length].column;\n    let indexMinX2 = (indexMinX + 1) % pts.length;\n    for (let i = 0; i < pts.length; i++) {\n        if (pts[i].column < minX2 && i !== indexMinX) {\n            minX2 = pts[i].column;\n            indexMinX2 = i;\n        }\n    }\n    if (pts[indexMinX2].row < pts[indexMinX].row) {\n        tl = pts[indexMinX2];\n        bl = pts[indexMinX];\n        if (indexMinX !== (indexMinX2 + 1) % 4) {\n            tr = pts[(indexMinX2 + 1) % 4];\n            br = pts[(indexMinX2 + 2) % 4];\n        }\n        else {\n            tr = pts[(indexMinX2 + 2) % 4];\n            br = pts[(indexMinX2 + 3) % 4];\n        }\n    }\n    else {\n        bl = pts[indexMinX2];\n        tl = pts[indexMinX];\n        if (indexMinX2 !== (indexMinX + 1) % 4) {\n            tr = pts[(indexMinX + 1) % 4];\n            br = pts[(indexMinX + 2) % 4];\n        }\n        else {\n            tr = pts[(indexMinX + 2) % 4];\n            br = pts[(indexMinX + 3) % 4];\n        }\n    }\n    return [tl, tr, br, bl];\n}\n/**\n *  Calculates distance between points.\n * @param p1 - Point1\n * @param p2 - Point2\n * @returns distance between points.\n */\nfunction distance2Points(p1, p2) {\n    return Math.hypot(p1.column - p2.column, p1.row - p2.row);\n}\n//# sourceMappingURL=getPerspectiveWarp.js.map","/**\n * Rotate a point around a center by a given angle.\n * @param point - The point to rotate\n * @param rotationCenter - The center of rotation\n * @param angle - The angle of rotation in radians\n * @returns The rotated point\n */\nexport function rotatePoint(point, rotationCenter, angle) {\n    const angleCos = Math.cos(angle);\n    const angleSin = Math.sin(angle);\n    const column = point.column * angleCos -\n        point.row * angleSin +\n        (1 - angleCos) * rotationCenter.column +\n        rotationCenter.row * angleSin;\n    const row = point.column * angleSin +\n        point.row * angleCos +\n        (1 - angleCos) * rotationCenter.row -\n        rotationCenter.column * angleSin;\n    return { column, row };\n}\n//# sourceMappingURL=operations.js.map","import { transform } from '../geometry/index.js';\nimport { getAngle } from '../maskAnalysis/utils/getAngle.js';\nimport { rotatePoint } from '../point/operations.js';\n/**\n * Crop an oriented rectangle from an image.\n * If the rectangle's length or width are not an integers, its dimension is expanded in both directions such as the length and width are integers.\n * @param image - The input image\n * @param points - The points of the rectangle. Points must be circling around the rectangle (clockwise or anti-clockwise). The validity of the points passed is assumed and not checked.\n * @param options - Crop options, see {@link CropRectangleOptions}\n * @returns The cropped image. The orientation of the image is the one closest to the rectangle passed as input.\n */\nexport function cropRectangle(image, points, options) {\n    if (points.length !== 4) {\n        throw new Error('The points array must contain 4 points');\n    }\n    // get the smallest possible angle which puts the rectangle in an upright position\n    const angle = getSmallestAngle(points);\n    const center = {\n        row: (points[0].row + points[2].row) / 2,\n        column: (points[0].column + points[2].column) / 2,\n    };\n    // Rotated points form an upright rectangle\n    const rotatedPoints = points.map((p) => rotatePoint(p, center, angle));\n    const [p1, p2, p3] = rotatedPoints;\n    const originalWidth = Math.max(Math.abs(p1.column - p2.column), Math.abs(p2.column - p3.column));\n    const originalHeight = Math.max(Math.abs(p1.row - p2.row), Math.abs(p2.row - p3.row));\n    // Deal with numerical imprecision when the rectangle actually had a whole number width or height\n    const width = Math.min(Math.ceil(originalWidth), Math.ceil(originalWidth - 1e-10));\n    const height = Math.min(Math.ceil(originalHeight), Math.ceil(originalHeight - 1e-10));\n    // Top left position of the upright rectangle after normalization of width and height\n    const expandedTopLeft = {\n        row: Math.min(...rotatedPoints.map((p) => p.row)) -\n            (height - originalHeight) / 2,\n        column: Math.min(...rotatedPoints.map((p) => p.column)) -\n            (width - originalWidth) / 2,\n    };\n    const translation = rotatePoint(expandedTopLeft, center, -angle);\n    const angleCos = Math.cos(-angle);\n    const angleSin = Math.sin(-angle);\n    const matrix = [\n        [angleCos, -angleSin, translation.column],\n        [angleSin, angleCos, translation.row],\n    ];\n    return transform(image, matrix, {\n        inverse: true,\n        width,\n        height,\n        ...options,\n    });\n}\n/**\n * Get the smallest angle to put the rectangle in an upright position\n * @param points - 2 points forming a line\n * @returns The angle in radians\n */\nfunction getSmallestAngle(points) {\n    // Angle respective to horizontal, -π/2 and π/2\n    let angleHorizontal = -getAngle(points[1], points[0]);\n    if (angleHorizontal > Math.PI / 2) {\n        angleHorizontal -= Math.PI;\n    }\n    else if (angleHorizontal < -Math.PI / 2) {\n        angleHorizontal += Math.PI;\n    }\n    // angle is between -π/4 and π/4\n    let angle = angleHorizontal;\n    if (Math.abs(angleHorizontal) > Math.PI / 4) {\n        angle =\n            angleHorizontal > 0\n                ? -Math.PI / 2 + angleHorizontal\n                : Math.PI / 2 + angleHorizontal;\n    }\n    return angle;\n}\n//# sourceMappingURL=cropRectangle.js.map","import { getDefaultColor } from '../utils/getDefaultColor.js';\nimport { getOutputImage } from '../utils/getOutputImage.js';\nimport { setBlendedPixel } from '../utils/setBlendedPixel.js';\nimport { checkPointIsInteger } from '../utils/validators/checkPointIsInteger.js';\n/**\n * Paint a mask onto an image and the given position and with the given color.\n * @param image - Image on which to paint the mask.\n * @param mask - Mask to paint on the image.\n * @param options - Paint mask options.\n * @returns The painted image.\n */\nexport function paintMaskOnImage(image, mask, options = {}) {\n    const { origin = { row: 0, column: 0 }, color = getDefaultColor(image), blend = true, } = options;\n    const { column, row } = origin;\n    if (color.length !== image.channels) {\n        throw new RangeError('the given color is not compatible with the image');\n    }\n    checkPointIsInteger(origin, 'Origin');\n    const result = getOutputImage(image, options, { clone: true });\n    if (blend) {\n        checkColorIsNumberArray(color);\n        for (let currentRow = Math.max(row, 0); currentRow < Math.min(mask.height + row, image.height); currentRow++) {\n            for (let currentColumn = Math.max(column, 0); currentColumn < Math.min(mask.width + column, image.width); currentColumn++) {\n                if (mask.getBit(currentColumn - column, currentRow - row)) {\n                    setBlendedPixel(result, currentColumn, currentRow, color);\n                }\n            }\n        }\n    }\n    else {\n        for (let currentRow = Math.max(row, 0); currentRow < Math.min(mask.height + row, image.height); currentRow++) {\n            for (let currentColumn = Math.max(column, 0); currentColumn < Math.min(mask.width + column, image.width); currentColumn++) {\n                if (mask.getBit(currentColumn - column, currentRow - row)) {\n                    for (let channel = 0; channel < image.channels; channel++) {\n                        const currentValue = color[channel];\n                        if (typeof currentValue === 'number') {\n                            result.setValue(currentColumn, currentRow, channel, currentValue);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return result;\n}\nfunction checkColorIsNumberArray(color) {\n    for (const channel of color) {\n        if (typeof channel !== 'number') {\n            throw new TypeError('cannot have null channels in color if blend is true');\n        }\n    }\n}\n//# sourceMappingURL=paintMaskOnImage.js.map","import { maskToOutputMask } from '../utils/getOutputImage.js';\nimport { checkPointIsInteger } from '../utils/validators/checkPointIsInteger.js';\n/**\n * Paint a mask onto an image and the given position and with the given color.\n * @param image - Image on which to paint the mask.\n * @param mask - Mask to paint on the image.\n * @param options - Paint mask options.\n * @returns The painted image.\n */\nexport function paintMaskOnMask(image, mask, options = {}) {\n    const { origin = { row: 0, column: 0 }, value = 1 } = options;\n    const { column, row } = origin;\n    checkPointIsInteger(origin, 'Origin');\n    const result = maskToOutputMask(image, options, { clone: true });\n    for (let currentRow = Math.max(row, 0); currentRow < Math.min(mask.height + row, image.height); currentRow++) {\n        for (let currentColumn = Math.max(column, 0); currentColumn < Math.min(mask.width + column, image.width); currentColumn++) {\n            if (mask.getBit(currentColumn - column, currentRow - row)) {\n                result.setBit(currentColumn, currentRow, value);\n            }\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=paintMaskOnMask.js.map","/**\n * Cast `number` to string. Optionally `digits` specifies significant figures.\n * @param number\n * @param figures\n * @returns - A string representation of `number`.\n */\nexport function maybeToPrecision(number, figures) {\n    if (number < 0) {\n        number = 0 - number;\n        if (typeof figures === 'number') {\n            return `- ${number.toPrecision(figures)}`;\n        }\n        else {\n            return `- ${number.toString()}`;\n        }\n    }\n    else if (typeof figures === 'number') {\n        return number.toPrecision(figures);\n    }\n    else {\n        return number.toString();\n    }\n}\n//# sourceMappingURL=maybeToPrecision.js.map","import { isAnyArray } from 'is-any-array';\n/**\n * Check that x and y are arrays with the same length.\n * @param x - first array\n * @param y - second array\n * @throws if x or y are not the same length, or if they are not arrays\n */\nexport function checkArrayLength(input, output) {\n    // TODO: This function should be removed and replace by\n    // https://github.com/mljs/spectra-processing/blob/main/src/xy/xyCheck.ts\n    if (!isAnyArray(input.x) || !isAnyArray(input.y) || !isAnyArray(output)) {\n        throw new TypeError('x, y and outputs must be arrays');\n    }\n    if (input.x.length < 2) {\n        throw new RangeError('explanatory variable should be two element per point');\n    }\n    if (input.x.length !== input.y.length) {\n        throw new RangeError('x and y data must have the same length');\n    }\n    if (input.x.length !== output.length) {\n        throw new RangeError('input and outputs must have the same length');\n    }\n}\n//# sourceMappingURL=checkArrayLength.js.map","import { isAnyArray } from 'is-any-array';\nimport { checkArrayLength } from './checkArrayLength';\nexport class BaseRegression2D {\n    constructor() {\n        if (new.target === BaseRegression2D) {\n            throw new Error('BaseRegression must be subclassed');\n        }\n    }\n    predict(inputs) {\n        if (isOnePoint(inputs)) {\n            return this._predict(inputs);\n        }\n        else if (isAnyArray(inputs.x)) {\n            const { x, y } = inputs;\n            const result = new Float64Array(x.length);\n            for (let i = 0; i < x.length; i++) {\n                result[i] = this._predict({ x: x[i], y: y[i] });\n            }\n            return result;\n        }\n        else {\n            throw new TypeError('x must be a number or array');\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _predict(x) {\n        throw new Error('_predict must be implemented');\n    }\n    train() {\n        // Do nothing for this package\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    toString(precision) {\n        return '';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    toLaTeX(precision) {\n        return '';\n    }\n    /**\n     * Return the correlation coefficient of determination (r) and chi-square.\n     * @param x - explanatory variable\n     * @param y - response variable\n     * @return - Object with further statistics.\n     */\n    getScore(input, z) {\n        checkArrayLength(input, z);\n        const y2 = this.predict(input);\n        let xSum = 0;\n        let ySum = 0;\n        let chi2 = 0;\n        let rmsd = 0;\n        let xSquared = 0;\n        let ySquared = 0;\n        let xY = 0;\n        const n = z.length;\n        for (let i = 0; i < n; i++) {\n            xSum += y2[i];\n            ySum += z[i];\n            xSquared += y2[i] * y2[i];\n            ySquared += z[i] * z[i];\n            xY += y2[i] * z[i];\n            if (z[i] !== 0) {\n                chi2 += ((z[i] - y2[i]) * (z[i] - y2[i])) / z[i];\n            }\n            rmsd += (z[i] - y2[i]) * (z[i] - y2[i]);\n        }\n        const r = (n * xY - xSum * ySum) /\n            Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n        return {\n            r,\n            r2: r * r,\n            chi2,\n            rmsd: Math.sqrt(rmsd / n),\n        };\n    }\n}\nfunction isOnePoint(input) {\n    return !isAnyArray(input.x);\n}\nexport { checkArrayLength };\n//# sourceMappingURL=BaseRegression2D.js.map","import { Matrix, SVD } from 'ml-matrix';\nimport { maybeToPrecision } from 'ml-regression-base';\nimport { BaseRegression2D, checkArrayLength } from './BaseRegression2D';\n// Implements the Kernel ridge regression algorithm.\n// http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf\nexport class PolynomialRegression2D extends BaseRegression2D {\n    order;\n    coefficients;\n    score;\n    /**\n     * Constructor for the 2D polynomial fitting\n     *\n     * @param inputs - independent or explanatory variable\n     * @param outputs - dependent or response variable`\n     * @constructor\n     */\n    constructor(inputs, outputs, options = {}) {\n        super();\n        // @ts-expect-error internal use only\n        if (inputs === true) {\n            // @ts-expect-error internal use only\n            this.coefficients = Matrix.columnVector(outputs.coefficients);\n            // @ts-expect-error internal use only\n            this.order = outputs.order;\n            // @ts-expect-error internal use only\n            this.score = outputs.score;\n        }\n        else {\n            checkArrayLength(inputs, outputs);\n            const { order = 2 } = options;\n            this.order = order;\n            this.coefficients = train(inputs, outputs, order);\n            this.score = this.getScore(inputs, outputs);\n        }\n    }\n    _predict(newInputs) {\n        const { x, y } = newInputs;\n        let z = 0;\n        let column = 0;\n        for (let i = 0; i <= this.order; i++) {\n            for (let j = 0; j <= this.order - i; j++) {\n                z += x ** i * y ** j * this.coefficients.get(column, 0);\n                column++;\n            }\n        }\n        return z;\n    }\n    toString(precision) {\n        return this._toFormula(precision, false);\n    }\n    toLaTeX(precision) {\n        return this._toFormula(precision, true);\n    }\n    _toFormula(precision, isLaTeX) {\n        let sup = '^';\n        let closeSup = '';\n        let times = ' * ';\n        if (isLaTeX) {\n            sup = '^{';\n            closeSup = '}';\n            times = '';\n        }\n        let fn = '';\n        let str = '';\n        let column = 0;\n        for (let i = 0; i <= this.order; i++) {\n            for (let j = 0; j <= this.order - i; j++) {\n                str = '';\n                const coefficient = this.coefficients.get(column, 0);\n                if (coefficient !== 0) {\n                    str += maybeToPrecision(coefficient, precision);\n                    if (i === 1) {\n                        str += `${times}x`;\n                    }\n                    else if (i > 1) {\n                        str += `${times}x${sup}${i}${closeSup}`;\n                    }\n                    if (j === 1) {\n                        str += `${times}y`;\n                    }\n                    else if (j > 1) {\n                        str += `${times}y${sup}${j}${closeSup}`;\n                    }\n                    if (coefficient > 0) {\n                        str = ` + ${str}`;\n                    }\n                    else {\n                        str = ` ${str}`;\n                    }\n                }\n                column++;\n                fn = str + fn;\n            }\n        }\n        return `f(x, y) = ${fn.startsWith('+') ? fn.slice(1) : fn}`;\n    }\n    toJSON() {\n        return {\n            name: 'polyfit2D',\n            order: this.order,\n            score: this.score,\n            coefficients: this.coefficients,\n        };\n    }\n    static load(json) {\n        if (json.name !== 'polyfit2D') {\n            throw new TypeError('not a polyfit2D model');\n        }\n        //@ts-expect-error internal use only\n        return new PolynomialRegression2D(true, json);\n    }\n}\n/**\n * Function that given a column vector return this: vector^power\n *\n * @param x - Column vector.\n * @param power - Pow number.\n * @return {Matrix}\n */\nfunction powColVector(x, power) {\n    const result = x.clone();\n    for (let i = 0; i < x.rows; ++i) {\n        result.set(i, 0, result.get(i, 0) ** power);\n    }\n    return result;\n}\n/**\n * Function that fits the model given the data(x) and predictions(y).\n * The third argument is an object with the following options:\n * * order: order of the polynomial to fit.\n *\n * @param x - A matrix with n rows and 2 columns.\n * @param y - A vector of the prediction values.\n */\nfunction train(input, y, order) {\n    if (!Matrix.isMatrix(y))\n        y = Matrix.columnVector(y);\n    const x = new Matrix(y.rows, 2);\n    x.setColumn(0, input.x);\n    x.setColumn(1, input.y);\n    if (y.rows !== x.rows) {\n        y = y.transpose();\n    }\n    if (x.columns !== 2) {\n        throw new RangeError(`You give x with ${x.columns} columns and it must be 2`);\n    }\n    if (x.rows !== y.rows) {\n        throw new RangeError('x and y must have the same rows');\n    }\n    const examples = x.rows;\n    const nbCoefficients = ((order + 2) * (order + 1)) / 2;\n    if (examples < nbCoefficients) {\n        throw new TypeError('Insufficient number of points to create regression model.');\n    }\n    const x1 = x.getColumnVector(0);\n    const x2 = x.getColumnVector(1);\n    const scaleX1 = 1.0 / x1.clone().abs().max();\n    const scaleX2 = 1.0 / x2.clone().abs().max();\n    const scaleY = 1.0 / y.clone().abs().max();\n    x1.mulColumn(0, scaleX1);\n    x2.mulColumn(0, scaleX2);\n    y.mulColumn(0, scaleY);\n    const A = new Matrix(examples, nbCoefficients);\n    let col = 0;\n    for (let i = 0; i <= order; ++i) {\n        const limit = order - i;\n        for (let j = 0; j <= limit; ++j) {\n            const result = powColVector(x1, i).mulColumnVector(powColVector(x2, j));\n            A.setColumn(col, result);\n            col++;\n        }\n    }\n    const svd = new SVD(A.transpose(), {\n        computeLeftSingularVectors: true,\n        computeRightSingularVectors: true,\n        autoTranspose: false,\n    });\n    let qqs = Matrix.rowVector(svd.diagonal);\n    qqs = qqs.apply((i, j) => {\n        if (qqs.get(i, j) >= 1e-15)\n            qqs.set(i, j, 1 / qqs.get(i, j));\n        else\n            qqs.set(i, j, 0);\n    });\n    const qqs1 = Matrix.zeros(examples, nbCoefficients);\n    for (let i = 0; i < nbCoefficients; ++i) {\n        qqs1.set(i, i, qqs.get(0, i));\n    }\n    qqs = qqs1;\n    const U = svd.rightSingularVectors;\n    const V = svd.leftSingularVectors;\n    const coefficients = V.mmul(qqs.transpose()).mmul(U.transpose()).mmul(y);\n    for (let i = 0, col = 0; i <= nbCoefficients; ++i) {\n        const limit = order - i;\n        for (let j = 0; j <= limit; ++j) {\n            coefficients.set(col, 0, (coefficients.get(col, 0) * scaleX1 ** i * scaleX2 ** j) / scaleY);\n            col++;\n        }\n    }\n    return coefficients;\n}\n//# sourceMappingURL=PolynomialRegression2D.js.map","import { PolynomialRegression2D } from 'ml-regression-polynomial-2d';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Corrects background from an image for baseline correction.\n * @param image - Image to subtract background from.\n * @param options - CorrectBackgroundOptions.\n * @returns Image with corrected baseline.\n */\nexport function correctBackground(image, options) {\n    const { background, order = 2, backgroundKind = 'light' } = options;\n    checkProcessable(image, { colorModel: ['GREY'] });\n    const columns = new Array();\n    const rows = new Array();\n    const values = new Array();\n    for (const point of background) {\n        columns.push(point.column);\n        rows.push(point.row);\n        values.push(image.getValueByPoint(point, 0));\n    }\n    const model = new PolynomialRegression2D({ x: columns, y: rows }, values, {\n        order,\n    });\n    const points = { x: [], y: [] };\n    for (let row = 0; row < image.height; row++) {\n        for (let column = 0; column < image.width; column++) {\n            points.x.push(column);\n            points.y.push(row);\n        }\n    }\n    const Y = model.predict(points);\n    for (let row = 0; row < image.height; row++) {\n        for (let column = 0; column < image.width; column++) {\n            const value = Math.abs(image.getValue(column, row, 0) - Y[row * image.width + column]);\n            image.setValue(column, row, 0, value);\n        }\n    }\n    if (backgroundKind === 'light') {\n        return image.invert();\n    }\n    else {\n        return image;\n    }\n}\n//# sourceMappingURL=correctBackground.js.map","import { Image } from '../Image.js';\nimport { copyAlpha } from '../operations/index.js';\nimport { getOutputImage, maskToOutputMask } from '../utils/getOutputImage.js';\n/**\n * Invert the components of an image.\n * @param image - The image to invert.\n * @param options - Invert options.\n * @returns The inverted image.\n */\nexport function invert(image, options) {\n    if (image instanceof Image) {\n        const newImage = getOutputImage(image, options);\n        if (image.alpha) {\n            copyAlpha(image, newImage);\n        }\n        const { maxValue, size } = newImage;\n        for (let i = 0; i < size; i++) {\n            for (let component = 0; component < image.components; component++) {\n                newImage.setValueByIndex(i, component, maxValue - image.getValueByIndex(i, component));\n            }\n        }\n        return newImage;\n    }\n    else {\n        const newImage = maskToOutputMask(image, options);\n        for (let i = 0; i < newImage.size; i++) {\n            newImage.setBitByIndex(i, !image.getBitByIndex(i));\n        }\n        return newImage;\n    }\n}\n//# sourceMappingURL=invert.js.map","import { getClamp } from '../utils/clamp.js';\nimport { getOutputImage } from '../utils/getOutputImage.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { validateChannels } from '../utils/validators/validators.js';\n/**\n * Level the image using the optional input and output value. The default options allow to increase the image's contrast.\n * @param image - Image to process.\n * @param options - Level options.\n * @returns The levelled image.\n */\nexport function level(image, options = {}) {\n    const minMax = image.minMax();\n    let { inputMin = minMax.min, inputMax = minMax.max, outputMin = 0, outputMax = image.maxValue, gamma = 1, } = options;\n    const { channels = new Array(image.components).fill(0).map((value, index) => index), } = options;\n    validateChannels(channels, image);\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n    });\n    const newImage = getOutputImage(image, options, { clone: true });\n    const clamp = getClamp(image);\n    inputMin = getValueArray(inputMin, image.channels);\n    inputMax = getValueArray(inputMax, image.channels);\n    outputMin = getValueArray(outputMin, image.channels);\n    outputMax = getValueArray(outputMax, image.channels);\n    gamma = getValueArray(gamma, image.channels);\n    for (let row = 0; row < image.height; row++) {\n        for (let column = 0; column < image.width; column++) {\n            for (const channel of channels) {\n                const currentValue = image.getValue(column, row, channel);\n                const clamped = Math.max(Math.min(currentValue, inputMax[channel]), inputMin[channel]);\n                let ratio = clamp((clamped - inputMin[channel]) /\n                    (inputMax[channel] - inputMin[channel]));\n                if (Number.isNaN(ratio))\n                    ratio = 0;\n                const result = clamp(ratio ** (1 / gamma[channel]) *\n                    (outputMax[channel] - outputMin[channel]) +\n                    outputMin[channel]);\n                newImage.setValue(column, row, channel, result);\n            }\n        }\n    }\n    return newImage;\n}\n/**\n * Get an array with correct values for each channel to process.\n * @param value - Number or array to transform to the final array.\n * @param imageChannels - Number of channels processed in the level function.\n * @returns Array of values for each channel.\n */\nfunction getValueArray(value, imageChannels) {\n    if (Array.isArray(value)) {\n        if (value.length === imageChannels) {\n            return value;\n        }\n        else {\n            throw new RangeError('array length is not compatible with channel option');\n        }\n    }\n    else {\n        return new Array(imageChannels).fill(value);\n    }\n}\n//# sourceMappingURL=level.js.map","import { maskToOutputMask } from '../utils/getOutputImage.js';\n/**\n * Perform an OR operation on two masks.\n * @param mask - First mask.\n * @param otherMask - Second mask.\n * @param options - Or options.\n * @returns OR of the two masks.\n */\nexport function or(mask, otherMask, options) {\n    const newMask = maskToOutputMask(mask, options);\n    if (mask.width !== otherMask.width || mask.height !== otherMask.height) {\n        throw new RangeError('both masks must have the same size');\n    }\n    for (let i = 0; i < newMask.size; i++) {\n        if (mask.getBitByIndex(i) || otherMask.getBitByIndex(i)) {\n            newMask.setBitByIndex(i, 1);\n        }\n        else {\n            newMask.setBitByIndex(i, 0);\n        }\n    }\n    return newMask;\n}\n//# sourceMappingURL=or.js.map","import checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Apply a flipX filter to an image.\n * @param image - Image to process.\n * @returns The processed image.\n */\nexport default function flipX(image) {\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n    });\n    for (let row = 0; row < image.height; row++) {\n        for (let column = 0; column < Math.floor(image.width / 2); column++) {\n            const currentCol = column;\n            const oppositeCol = image.width - column - 1;\n            for (let channel = 0; channel < image.channels; channel++) {\n                const tmp = image.getValue(currentCol, row, channel);\n                image.setValue(currentCol, row, channel, image.getValue(oppositeCol, row, channel));\n                image.setValue(oppositeCol, row, channel, tmp);\n            }\n        }\n    }\n    return image;\n}\n//# sourceMappingURL=flipX.js.map","import checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Apply a flipY filter to an image.\n * @param image - Image to process.\n * @returns The processed image.\n */\nexport default function flipY(image) {\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n    });\n    for (let row = 0; row < Math.floor(image.height / 2); row++) {\n        for (let column = 0; column < image.width; column++) {\n            const currentRow = row;\n            const oppositeRow = image.height - row - 1;\n            for (let channel = 0; channel < image.channels; channel++) {\n                const tmp = image.getValue(column, currentRow, channel);\n                image.setValue(column, currentRow, channel, image.getValue(column, oppositeRow, channel));\n                image.setValue(column, oppositeRow, channel, tmp);\n            }\n        }\n    }\n    return image;\n}\n//# sourceMappingURL=flipY.js.map","import { getOutputImage } from '../utils/getOutputImage.js';\nimport flipX from './flipX.js';\nimport flipY from './flipY.js';\n/**\n * Apply a flip filter to an image.\n * @param image - Image to process.\n * @param options - Flip options.\n * @returns - The processed image.\n */\nexport function flip(image, options = {}) {\n    const { axis = 'horizontal' } = options;\n    const newImage = getOutputImage(image, options, { clone: true });\n    if (axis === 'horizontal') {\n        return flipX(newImage);\n    }\n    else if (axis === 'vertical') {\n        return flipY(newImage);\n    }\n    else {\n        return flipY(flipX(newImage));\n    }\n}\n//# sourceMappingURL=flip.js.map","import { xMedian } from 'ml-spectra-processing';\nimport { Image } from '../Image.js';\nimport { getBorderInterpolation } from '../utils/interpolateBorder.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Calculate a new image that replaces all pixel values by the median of neighbouring pixels.\n * @param image - Image to be filtered.\n * @param options - MedianFilterOptions\n * @returns Image after median filter.\n */\nexport function medianFilter(image, options) {\n    const { cellSize = 3, borderType = 'reflect101', borderValue } = options;\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n    });\n    if (cellSize < 1) {\n        throw new RangeError(`Invalid property \"cellSize\". Must be greater than 0. Received ${cellSize}.`);\n    }\n    if (cellSize % 2 === 0) {\n        throw new RangeError(`Invalid property \"cellSize\". Must be an odd number. Received ${cellSize}.`);\n    }\n    const interpolateBorder = getBorderInterpolation(borderType, borderValue);\n    const newImage = Image.createFrom(image);\n    const size = cellSize ** 2;\n    const cellValues = new Uint16Array(size);\n    const halfCellSize = (cellSize - 1) / 2;\n    for (let channel = 0; channel < image.channels; channel++) {\n        for (let row = 0; row < image.height; row++) {\n            for (let column = 0; column < image.width; column++) {\n                let n = 0;\n                for (let cellRow = -halfCellSize; cellRow <= halfCellSize; cellRow++) {\n                    for (let cellColumn = -halfCellSize; cellColumn <= halfCellSize; cellColumn++) {\n                        cellValues[n++] = interpolateBorder(column + cellColumn, row + cellRow, channel, image);\n                    }\n                }\n                newImage.setValue(column, row, channel, xMedian(cellValues));\n            }\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=medianFilter.js.map","import { xMedian } from 'ml-spectra-processing';\nimport { getOutputImage } from '../utils/getOutputImage.js';\nimport { assertUnreachable } from '../utils/validators/assert.js';\n/**\n * Function to pixelate an image.\n * @param image - Image to be pixelated.\n * @param options - PixelateOptions.\n * @returns Pixelated Image.\n */\nexport function pixelate(image, options) {\n    const { cellSize, algorithm = 'center' } = options;\n    if (!Number.isInteger(cellSize)) {\n        throw new TypeError('cellSize must be an integer');\n    }\n    if (cellSize < 2) {\n        throw new RangeError('cellSize must be greater than 1');\n    }\n    const newImage = getOutputImage(image, options);\n    const getCellValue = getCellValueFunction(algorithm);\n    for (let channel = 0; channel < image.channels; channel++) {\n        for (let column = 0; column < image.width; column += cellSize) {\n            for (let row = 0; row < image.height; row += cellSize) {\n                const currentCellWidth = Math.min(cellSize, image.width - column);\n                const currentCellHeight = Math.min(cellSize, image.height - row);\n                const value = getCellValue(image, channel, {\n                    width: currentCellWidth,\n                    height: currentCellHeight,\n                    origin: { column, row },\n                });\n                for (let newColumn = column; newColumn < column + currentCellWidth; newColumn++) {\n                    for (let newRow = row; newRow < row + currentCellHeight; newRow++) {\n                        newImage.setValue(newColumn, newRow, channel, value);\n                    }\n                }\n            }\n        }\n    }\n    return newImage;\n}\n/**\n * Computes the center value for the current sector\n * @param image - image used for the algorithm\n * @param channel - image channel toto find center value of\n * @param options - GetValueOptions\n * @returns center value\n */\nfunction getCellCenter(image, channel, options) {\n    const center = {\n        column: Math.floor((options.origin.column + options.origin.column + options.width - 1) / 2),\n        row: Math.floor((options.origin.row + options.origin.row + options.height - 1) / 2),\n    };\n    const value = image.getValue(center.column, center.row, channel);\n    return value;\n}\n/**\n * Computes mean value for the current sector\n * @param image - image used for algorithm\n * @param channel - current channel of an image\n * @param options - GetValueOptions\n * @returns mean value\n */\nfunction getCellMean(image, channel, options) {\n    let sum = 0;\n    for (let column = options.origin.column; column < options.origin.column + options.width; column++) {\n        for (let row = options.origin.row; row < options.origin.row + options.height; row++) {\n            sum += image.getValue(column, row, channel);\n        }\n    }\n    return Math.round(sum / (options.width * options.height));\n}\n/**\n * Computes a median value for the current sector\n * @param image - image used algorithm\n * @param channel - current channel of an image\n * @param options - GetValueOptions\n * @returns median value\n */\nfunction getCellMedian(image, channel, options) {\n    const array = [];\n    for (let column = options.origin.column; column < options.origin.column + options.width; column++) {\n        for (let row = options.origin.row; row < options.origin.row + options.height; row++) {\n            array.push(image.getValue(column, row, channel));\n        }\n    }\n    return xMedian(array);\n}\n/**\n *  Chooses which algorithm to use for pixelization and returns a function to use for computation\n * @param algorithm - string with the name of an algorithm\n * @returns function\n */\nfunction getCellValueFunction(algorithm) {\n    switch (algorithm) {\n        case 'mean':\n            return getCellMean;\n        case 'median':\n            return getCellMedian;\n        case 'center':\n            return getCellCenter;\n        default:\n            assertUnreachable(algorithm);\n            break;\n    }\n}\n//# sourceMappingURL=pixelate.js.map","// TODO: This function could be optimised by following the contour instead of scanning all pixels.\n/**\n * Return an array with the coordinates of the pixels that are on the border of the mask.\n * The reference is the top-left corner of the ROI.\n * @param mask - Mask to process.\n * @param options - Get border points options.\n * @returns The array of border pixels.\n */\nexport function getBorderPoints(mask, options = {}) {\n    const { innerBorders = false, allowCorners = false } = options;\n    if (!innerBorders) {\n        mask = mask.solidFill();\n    }\n    const borders = [];\n    // first process frame pixels\n    for (let column = 0; column < mask.width; column++) {\n        if (mask.getBit(column, 0)) {\n            borders.push({ column, row: 0 });\n        }\n        if (mask.getBit(column, mask.height - 1)) {\n            borders.push({ column, row: mask.height - 1 });\n        }\n    }\n    for (let row = 0; row < mask.height; row++) {\n        if (mask.getBit(0, row)) {\n            borders.push({ column: 0, row });\n        }\n        if (mask.getBit(mask.width - 1, row)) {\n            borders.push({ column: mask.width - 1, row });\n        }\n    }\n    for (let row = 1; row < mask.height - 1; row++) {\n        for (let column = 1; column < mask.width - 1; column++) {\n            if (mask.getBit(column, row)) {\n                if (mask.getBit(column - 1, row) === 0 ||\n                    mask.getBit(column, row - 1) === 0 ||\n                    mask.getBit(column + 1, row) === 0 ||\n                    mask.getBit(column, row + 1) === 0) {\n                    borders.push({ column, row });\n                }\n                if (allowCorners &&\n                    (mask.getBit(column - 1, row - 1) === 0 ||\n                        mask.getBit(column - 1, row + 1) === 0 ||\n                        mask.getBit(column + 1, row - 1) === 0 ||\n                        mask.getBit(column + 1, row + 1) === 0)) {\n                    borders.push({ column, row });\n                }\n            }\n        }\n    }\n    return borders;\n}\n//# sourceMappingURL=getBorderPoints.js.map","/**\n * Compute the length of a segment defined by two points.\n * @param p1 - First point.\n * @param p2 - Second point.\n * @returns Length of the segment.\n */\nexport function getLineLength(p1, p2) {\n    return Math.hypot(p1.column - p2.column, p1.row - p2.row);\n}\n//# sourceMappingURL=lines.js.map","import { getLineLength } from './lines.js';\n/**\n * Compute the perimeter of a polygon.\n * @param points - Array of polygon vertices.\n * @returns The perimeter.\n */\nexport function getPolygonPerimeter(points) {\n    let perimeter = 0;\n    for (let i = 0; i < points.length; i++) {\n        perimeter += getLineLength(points[(i + 1) % points.length], points[i]);\n    }\n    return perimeter;\n}\n/**\n * Compute the area of a polygon.\n * Based on the algorithm described on\n * @see {@link https://web.archive.org/web/20100405070507/http://valis.cs.uiuc.edu/~sariel/research/CG/compgeom/msg00831.html}\n * @param points - Array of polygon vertices.\n * @returns The area.\n */\nexport function getPolygonArea(points) {\n    let area = 0;\n    for (let current = 0; current < points.length; current++) {\n        const next = (current + 1) % points.length;\n        area += points[current].column * points[next].row;\n        area -= points[current].row * points[next].column;\n    }\n    return Math.abs(area / 2);\n}\n//# sourceMappingURL=polygons.js.map","/**\n * Get the pixels that surround an ROI. The pixels include the top and left borders,\n * but extend the right and bottom one by one pixel.\n * This allows to compute the minimum bounding rectangle with the correct surface.\n * This method is only used to calculate minimalBoundRectangle and convexHull.\n * @param mask - The ROI for which to get the extended border points.\n * @returns - The array of points.\n */\nexport function getExtendedBorderPoints(mask) {\n    const borderPoints = mask.getBorderPoints({\n        allowCorners: true,\n        innerBorders: false,\n    });\n    const result = [];\n    for (const point of borderPoints) {\n        result.push(point, { column: point.column + 1, row: point.row }, { column: point.column + 1, row: point.row + 1 }, { column: point.column, row: point.row + 1 });\n    }\n    return result;\n}\n//# sourceMappingURL=getExtendedBorderPoints.js.map","/**\n * Computes the convex hull of a binary image using Andrew's Monotone Chain Algorithm\n * @see {@link http://www.algorithmist.com/index.php/Monotone_Chain_Convex_Hull}\n * @param points - An array of points.\n * @param options - MCCH Algorithm options.\n * @returns Coordinates of the convex hull in clockwise order.\n */\nexport function monotoneChainConvexHull(points, options = {}) {\n    const { sorted = false } = options;\n    if (!sorted) {\n        points = points.slice();\n        points.sort(byXThenY);\n    }\n    const n = points.length;\n    const result = new Array(n * 2);\n    let k = 0;\n    for (let i = 0; i < n; i++) {\n        const point = points[i];\n        while (k >= 2 && cw(result[k - 2], result[k - 1], point) <= 0) {\n            k--;\n        }\n        result[k++] = point;\n    }\n    const t = k + 1;\n    for (let i = n - 2; i >= 0; i--) {\n        const point = points[i];\n        while (k >= t && cw(result[k - 2], result[k - 1], point) <= 0) {\n            k--;\n        }\n        result[k++] = point;\n    }\n    return result.slice(0, k - 1);\n}\nfunction cw(p1, p2, p3) {\n    return ((p2.row - p1.row) * (p3.column - p1.column) -\n        (p2.column - p1.column) * (p3.row - p1.row));\n}\nfunction byXThenY(point1, point2) {\n    if (point1.column === point2.column) {\n        return point1.row - point2.row;\n    }\n    return point1.column - point2.column;\n}\n// 0 -> column, 1 -> row\n//# sourceMappingURL=monotoneChainConvexHull.js.map","import { getPolygonArea, getPolygonPerimeter, } from '../utils/geometry/polygons.js';\nimport { getExtendedBorderPoints } from './utils/getExtendedBorderPoints.js';\nimport { monotoneChainConvexHull as mcch } from './utils/monotoneChainConvexHull.js';\n/**\n * Get the vertices of the convex Hull polygon of a mask.\n * @param mask - Mask to process.\n * @returns Array of the vertices of the convex Hull in clockwise order.\n */\nexport function getConvexHull(mask) {\n    const borderPoints = getExtendedBorderPoints(mask);\n    if (borderPoints.length === 0) {\n        return {\n            points: [],\n            surface: 0,\n            perimeter: 0,\n        };\n    }\n    const points = mcch(borderPoints);\n    const perimeter = getPolygonPerimeter(points);\n    const surface = getPolygonArea(points);\n    return { points, perimeter, surface };\n}\n//# sourceMappingURL=getConvexHull.js.map","import { toDegrees } from '../utils/geometry/angles.js';\nimport { rotate } from '../utils/geometry/points.js';\nimport { getAngle } from './utils/getAngle.js';\n/**\n * Computes the Feret diameters.\n * @see {@link https://www.sympatec.com/en/particle-measurement/glossary/particle-shape/#}\n * @see {@link http://portal.s2nano.org:8282/files/TEM_protocol_NANoREG.pdf}\n * @param mask - The mask of the ROI.\n * @returns The Feret diameters.\n */\nexport function getFeret(mask) {\n    const hull = mask.getConvexHull();\n    const hullPoints = hull.points;\n    if (hull.surface === 0) {\n        return {\n            minDiameter: {\n                length: 0,\n                points: [\n                    { column: 0, row: 0 },\n                    { column: 0, row: 0 },\n                ],\n                angle: 0,\n                calliperLines: [\n                    [\n                        { column: 0, row: 0 },\n                        { column: 0, row: 0 },\n                    ],\n                    [\n                        { column: 0, row: 0 },\n                        { column: 0, row: 0 },\n                    ],\n                ],\n            },\n            maxDiameter: {\n                length: 0,\n                points: [\n                    { column: 0, row: 0 },\n                    { column: 0, row: 0 },\n                ],\n                angle: 0,\n                calliperLines: [\n                    [\n                        { column: 0, row: 0 },\n                        { column: 0, row: 0 },\n                    ],\n                    [\n                        { column: 0, row: 0 },\n                        { column: 0, row: 0 },\n                    ],\n                ],\n            },\n            aspectRatio: 1,\n        };\n    }\n    // Compute minimum diameter\n    let minWidth = Number.POSITIVE_INFINITY;\n    let minWidthAngle = 0;\n    let minLinePoints = [];\n    let minLines;\n    for (let i = 0; i < hullPoints.length; i++) {\n        const angle = getAngle(hullPoints[i], hullPoints[(i + 1) % hullPoints.length]);\n        // We rotate so that it is parallel to X axis.\n        const rotatedPoints = rotate(-angle, hullPoints);\n        let currentWidth = 0;\n        let currentMinLinePoints = [];\n        for (let j = 0; j < hullPoints.length; j++) {\n            const absWidth = Math.abs(rotatedPoints[i].row - rotatedPoints[j].row);\n            if (absWidth > currentWidth) {\n                currentWidth = absWidth;\n                currentMinLinePoints = [rotatedPoints[i], rotatedPoints[j]];\n            }\n        }\n        if (currentWidth < minWidth) {\n            minWidth = currentWidth;\n            minWidthAngle = angle;\n            minLinePoints = currentMinLinePoints;\n            const { minIndex: currentMin, maxIndex: currentMax } = findPointIndexesOfExtremeColumns(rotatedPoints);\n            minLines = getMinLines(minWidthAngle, currentMin, currentMax, rotatedPoints, minLinePoints);\n        }\n    }\n    const minDiameter = {\n        points: rotate(minWidthAngle, minLinePoints),\n        length: minWidth,\n        angle: toDegrees(minWidthAngle),\n        calliperLines: minLines,\n    };\n    // Compute maximum diameter\n    let maxLinePoints = [];\n    let maxSquaredWidth = 0;\n    let maxLineIndex = [];\n    for (let i = 0; i < hullPoints.length - 1; i++) {\n        for (let j = i + 1; j < hullPoints.length; j++) {\n            const currentSquaredWidth = (hullPoints[i].column - hullPoints[j].column) ** 2 +\n                (hullPoints[i].row - hullPoints[j].row) ** 2;\n            if (currentSquaredWidth > maxSquaredWidth) {\n                maxSquaredWidth = currentSquaredWidth;\n                maxLinePoints = [hullPoints[i], hullPoints[j]];\n                maxLineIndex = [i, j];\n            }\n        }\n    }\n    const maxAngle = getAngle(maxLinePoints[0], maxLinePoints[1]);\n    const rotatedMaxPoints = rotate(-maxAngle, hullPoints);\n    const { minIndex: currentMin, maxIndex: currentMax } = findPointsIndexesOfExtremeRows(rotatedMaxPoints);\n    const maxLines = getMaxLines(maxAngle, currentMin, currentMax, rotatedMaxPoints, maxLineIndex);\n    const maxDiameter = {\n        length: Math.sqrt(maxSquaredWidth),\n        angle: toDegrees(getAngle(maxLinePoints[0], maxLinePoints[1])),\n        points: maxLinePoints,\n        calliperLines: maxLines,\n    };\n    return {\n        minDiameter,\n        maxDiameter,\n        aspectRatio: minDiameter.length / maxDiameter.length,\n    };\n}\nfunction findPointIndexesOfExtremeColumns(points) {\n    let maxIndex = 0;\n    let minIndex = 0;\n    for (let i = 0; i < points.length; i++) {\n        if (points[i].column > points[maxIndex].column) {\n            maxIndex = i;\n        }\n        if (points[i].column < points[minIndex].column) {\n            minIndex = i;\n        }\n    }\n    return { minIndex, maxIndex };\n}\nfunction findPointsIndexesOfExtremeRows(points) {\n    let maxIndex = 0;\n    let minIndex = 0;\n    for (let i = 0; i < points.length; i++) {\n        if (points[i].row > points[maxIndex].row) {\n            maxIndex = i;\n        }\n        if (points[i].row < points[minIndex].row) {\n            minIndex = i;\n        }\n    }\n    return { minIndex, maxIndex };\n}\nfunction getMinLines(angle, min, max, rotatedPoints, feretPoints) {\n    const minLine1 = [\n        { column: rotatedPoints[min].column, row: feretPoints[0].row },\n        {\n            column: rotatedPoints[max].column,\n            row: feretPoints[0].row,\n        },\n    ];\n    const minLine2 = [\n        {\n            column: rotatedPoints[min].column,\n            row: feretPoints[1].row,\n        },\n        {\n            column: rotatedPoints[max].column,\n            row: feretPoints[1].row,\n        },\n    ];\n    return [rotate(angle, minLine1), rotate(angle, minLine2)];\n}\nfunction getMaxLines(angle, min, max, rotatedPoints, index) {\n    const maxLine1 = [\n        { column: rotatedPoints[index[0]].column, row: rotatedPoints[min].row },\n        {\n            column: rotatedPoints[index[0]].column,\n            row: rotatedPoints[max].row,\n        },\n    ];\n    const maxLine2 = [\n        { column: rotatedPoints[index[1]].column, row: rotatedPoints[min].row },\n        {\n            column: rotatedPoints[index[1]].column,\n            row: rotatedPoints[max].row,\n        },\n    ];\n    return [rotate(angle, maxLine1), rotate(angle, maxLine2)];\n}\n//# sourceMappingURL=getFeret.js.map","import { toDegrees } from '../../utils/geometry/angles.js';\nimport { getAngle } from './getAngle.js';\nconst leftFirst = (mbrPoint1, mbrPoint2) => mbrPoint1.column <= mbrPoint2.column ? -1 : 1;\nconst topFirst = (mbrPoint1, mbrPoint2) => mbrPoint1.row >= mbrPoint2.row ? -1 : 1;\n/**\n * Get the anti-clockwise angle in degrees between the MBR and a horizontal line.\n * @param mbr - MBR to process.\n * @returns The angle in degrees.\n */\nexport function getMbrAngle(mbr) {\n    const sorted = mbr.slice();\n    sorted.sort(leftFirst);\n    const left = sorted.slice(0, 2);\n    const right = sorted.slice(2, 4);\n    left.sort(topFirst);\n    right.sort(topFirst);\n    const topLeft = left[0];\n    const topRight = right[0];\n    return -toDegrees(getAngle(topLeft, topRight));\n}\n//# sourceMappingURL=getMbrAngle.js.map","import { rotate } from '../../utils/geometry/points.js';\nimport { getAngle } from './getAngle.js';\nimport { getMbrAngle } from './getMbrAngle.js';\n/**\n * Get the four corners of the minimum bounding rectangle from a set of points defining a simple convex polygon.\n * @see {@link https://www.researchgate.net/profile/Lennert_Den_Boer2/publication/303783472_A_Fast_Algorithm_for_Generating_a_Minimal_Bounding_Rectangle/links/5751a14108ae6807fafb2aa5.pdf}\n * @param points - Points from which to compute the MBR.\n * @returns The array of corners.\n */\nexport function getMbrFromPoints(points) {\n    if (points.length === 0) {\n        return {\n            points: [],\n            angle: 0,\n            width: 0,\n            height: 0,\n            surface: 0,\n            perimeter: 0,\n            aspectRatio: 0,\n        };\n    }\n    if (points.length === 1) {\n        return {\n            points: [points[0], points[0], points[0], points[0]],\n            perimeter: 0,\n            surface: 0,\n            angle: 0,\n            width: 0,\n            height: 0,\n            aspectRatio: 1,\n        };\n    }\n    let rotatedVertices = [];\n    let minSurface = Number.POSITIVE_INFINITY;\n    let minSurfaceAngle = 0;\n    let mbr = [];\n    for (let i = 0; i < points.length; i++) {\n        const angle = getAngle(points[i], points[(i + 1) % points.length]);\n        rotatedVertices = rotate(-angle, points);\n        // Rotate and translate so that this segment is at the bottom.\n        const aX = rotatedVertices[i].column;\n        const aY = rotatedVertices[i].row;\n        const bX = rotatedVertices[(i + 1) % rotatedVertices.length].column;\n        const bY = rotatedVertices[(i + 1) % rotatedVertices.length].row;\n        let tUndefined = true;\n        let tMin = 0;\n        let tMax = 0;\n        let maxWidth = 0;\n        for (const point of rotatedVertices) {\n            const cX = point.column;\n            const cY = point.row;\n            const t = (cX - aX) / (bX - aX);\n            if (tUndefined) {\n                tUndefined = false;\n                tMin = t;\n                tMax = t;\n            }\n            else {\n                if (t < tMin)\n                    tMin = t;\n                if (t > tMax)\n                    tMax = t;\n            }\n            const width = (-(bX - aX) * cY + bX * aY - bY * aX) / (bX - aX);\n            if (Math.abs(width) > Math.abs(maxWidth)) {\n                maxWidth = width;\n            }\n        }\n        const minPoint = { column: aX + tMin * (bX - aX), row: aY };\n        const maxPoint = { column: aX + tMax * (bX - aX), row: aY };\n        const currentSurface = Math.abs(maxWidth * (tMin - tMax) * (bX - aX));\n        if (currentSurface < minSurface) {\n            minSurfaceAngle = angle;\n            minSurface = currentSurface;\n            mbr = [\n                maxPoint,\n                minPoint,\n                { column: minPoint.column, row: minPoint.row - maxWidth },\n                { column: maxPoint.column, row: maxPoint.row - maxWidth },\n            ];\n        }\n    }\n    const mbrRotated = rotate(minSurfaceAngle, mbr);\n    const sides = [\n        Math.hypot(mbr[0].column - mbr[1].column, mbr[0].row - mbr[1].row),\n        Math.hypot(mbr[0].column - mbr[3].column, mbr[0].row - mbr[3].row),\n    ];\n    const maxSide = Math.max(...sides);\n    const minSide = Math.min(...sides);\n    const mbrAngle = getMbrAngle(mbrRotated);\n    const ratio = minSide / maxSide;\n    return {\n        points: mbrRotated,\n        surface: minSurface,\n        angle: mbrAngle,\n        width: maxSide,\n        height: minSide,\n        perimeter: 2 * maxSide + 2 * minSide,\n        aspectRatio: ratio,\n    };\n}\n//# sourceMappingURL=getMbrFromPoints.js.map","import { getExtendedBorderPoints } from './utils/getExtendedBorderPoints.js';\nimport { getMbrFromPoints } from './utils/getMbrFromPoints.js';\nimport { monotoneChainConvexHull } from './utils/monotoneChainConvexHull.js';\n/**\n * Get the four corners of the minimum bounding rectangle of an ROI.\n * @param mask - The ROI to process.\n * @returns The array of corners.\n */\nexport function getMbr(mask) {\n    const vertices = monotoneChainConvexHull(getExtendedBorderPoints(mask));\n    return getMbrFromPoints(vertices);\n}\n//# sourceMappingURL=getMbr.js.map","/**\n * Checks the that the dimensions of the kernel are odd.\n * @param kernel - Kernel passed to a morphology function.\n */\nexport function checkKernel(kernel) {\n    if (kernel.length % 2 === 0 || kernel[0].length % 2 === 0) {\n        throw new TypeError('the number of rows and columns of the kernel must be odd');\n    }\n}\n//# sourceMappingURL=checkKernel.js.map","import { Image } from '../Image.js';\nimport { Mask } from '../Mask.js';\nimport { checkKernel } from '../utils/validators/checkKernel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Erosion is one of two fundamental operations (with dilatation) in morphological\n * Image processing from which all other morphological operations are based (from Wikipedia).\n * Replaces each value with it's local minimum among the pixels with a kernel value of 1.\n * @see {@link http://docs.opencv.org/2.4/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html}\n * @see {@link https://en.wikipedia.org/wiki/Erosion_(morphology)}\n * @param image - The image to erode.\n * @param options - Erode options.\n * @returns - The eroded image.\n */\nexport function erode(image, options = {}) {\n    let defaultKernel = false;\n    if (options.kernel === undefined) {\n        defaultKernel = true;\n    }\n    const { kernel = [\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n    ], iterations = 1, } = options;\n    if (image instanceof Image) {\n        checkProcessable(image, {\n            bitDepth: [1, 8, 16],\n            components: 1,\n            alpha: false,\n        });\n    }\n    checkKernel(kernel);\n    let onlyOnes = true;\n    if (!defaultKernel) {\n        outer: for (const row of kernel) {\n            for (const bit of row) {\n                if (bit !== 1) {\n                    onlyOnes = false;\n                    break outer;\n                }\n            }\n        }\n    }\n    let result = image;\n    for (let i = 0; i < iterations; i++) {\n        if (result instanceof Mask) {\n            if (onlyOnes) {\n                const newImage = result.clone();\n                result = erodeMaskOnlyOnes(result, newImage, kernel[0].length, kernel.length);\n            }\n            else {\n                const newImage = Mask.createFrom(image);\n                result = erodeMask(result, newImage, kernel);\n            }\n        }\n        else if (onlyOnes) {\n            const newImage = Image.createFrom(image);\n            result = erodeGreyOnlyOnes(result, newImage, kernel[0].length, kernel.length);\n        }\n        else {\n            const newImage = Image.createFrom(image);\n            result = erodeGrey(result, newImage, kernel);\n        }\n    }\n    return result;\n}\nfunction erodeGrey(img, newImage, kernel) {\n    const kernelWidth = kernel[0].length;\n    const kernelHeight = kernel.length;\n    const radiusX = (kernelWidth - 1) / 2;\n    const radiusY = (kernelHeight - 1) / 2;\n    for (let row = 0; row < img.height; row++) {\n        for (let column = 0; column < img.width; column++) {\n            let min = img.maxValue;\n            for (let kernelRow = 0; kernelRow < kernelHeight; kernelRow++) {\n                for (let kernelColumn = 0; kernelColumn < kernelWidth; kernelColumn++) {\n                    if (kernel[kernelRow][kernelColumn] !== 1)\n                        continue;\n                    const currentColumn = kernelColumn - radiusX + column;\n                    const currentRow = kernelRow - radiusY + row;\n                    if (currentColumn < 0 ||\n                        currentRow < 0 ||\n                        currentColumn >= img.width ||\n                        currentRow >= img.height) {\n                        continue;\n                    }\n                    const value = img.getValue(currentColumn, currentRow, 0);\n                    if (value < min)\n                        min = value;\n                }\n            }\n            newImage.setValue(column, row, 0, min);\n        }\n    }\n    return newImage;\n}\nfunction erodeGreyOnlyOnes(image, newImage, kernelWidth, kernelHeight) {\n    const radiusX = (kernelWidth - 1) / 2;\n    const radiusY = (kernelHeight - 1) / 2;\n    const minList = [];\n    for (let column = 0; column < image.width; column++) {\n        minList.push(0);\n    }\n    for (let row = 0; row < image.height; row++) {\n        for (let column = 0; column < image.width; column++) {\n            let min = image.maxValue;\n            for (let h = Math.max(0, row - radiusY); h < Math.min(image.height, row + radiusY + 1); h++) {\n                const value = image.getValue(column, h, 0);\n                if (value < min) {\n                    min = value;\n                }\n            }\n            minList[column] = min;\n        }\n        for (let column = 0; column < image.width; column++) {\n            let min = image.maxValue;\n            for (let i = Math.max(0, column - radiusX); i < Math.min(image.width, column + radiusX + 1); i++) {\n                if (minList[i] < min) {\n                    min = minList[i];\n                }\n            }\n            newImage.setValue(column, row, 0, min);\n        }\n    }\n    return newImage;\n}\nfunction erodeMask(mask, newMask, kernel) {\n    const kernelWidth = kernel[0].length;\n    const kernelHeight = kernel.length;\n    const radiusX = (kernelWidth - 1) / 2;\n    const radiusY = (kernelHeight - 1) / 2;\n    for (let row = 0; row < mask.height; row++) {\n        for (let column = 0; column < mask.width; column++) {\n            let min = 1;\n            for (let kernelRow = 0; kernelRow < kernelHeight; kernelRow++) {\n                for (let kernelColumn = 0; kernelColumn < kernelWidth; kernelColumn++) {\n                    if (kernel[kernelRow][kernelColumn] !== 1)\n                        continue;\n                    const currentColumn = kernelColumn - radiusX + column;\n                    const currentRow = kernelRow - radiusY + row;\n                    if (currentRow < 0 ||\n                        currentColumn < 0 ||\n                        currentColumn >= mask.width ||\n                        currentRow >= mask.height) {\n                        continue;\n                    }\n                    const value = mask.getBit(currentColumn, currentRow);\n                    if (value === 0) {\n                        min = 0;\n                        break;\n                    }\n                }\n            }\n            if (min === 1) {\n                newMask.setBit(column, row, 1);\n            }\n        }\n    }\n    return newMask;\n}\nfunction erodeMaskOnlyOnes(mask, newMask, kernelWidth, kernelHeight) {\n    const radiusX = (kernelWidth - 1) / 2;\n    const radiusY = (kernelHeight - 1) / 2;\n    const minList = [];\n    for (let column = 0; column < mask.width; column++) {\n        minList.push(0);\n    }\n    for (let row = 0; row < mask.height; row++) {\n        for (let column = 0; column < mask.width; column++) {\n            minList[column] = 1;\n            for (let h = Math.max(0, row - radiusY); h < Math.min(mask.height, row + radiusY + 1); h++) {\n                if (mask.getBit(column, h) === 0) {\n                    minList[column] = 0;\n                    break;\n                }\n            }\n        }\n        for (let column = 0; column < mask.width; column++) {\n            if (newMask.getBit(column, row) === 0)\n                continue;\n            for (let i = Math.max(0, column - radiusX); i < Math.min(mask.width, column + radiusX + 1); i++) {\n                if (minList[i] === 0) {\n                    newMask.setBit(column, row, 0);\n                    break;\n                }\n            }\n        }\n    }\n    return newMask;\n}\n//# sourceMappingURL=erode.js.map","import { Image } from '../Image.js';\nimport { Mask } from '../Mask.js';\nimport { checkKernel } from '../utils/validators/checkKernel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Dilatation is one of two fundamental operations (with erosion) in morphological\n * image processing from which all other morphological operations are based (from Wikipedia).\n * Replaces each value with it's local maximum among the pixels with a kernel value of 1.\n * @see {@link http://docs.opencv.org/2.4/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html}\n * @see {@link https://en.wikipedia.org/wiki/Dilation_(morphology)}\n * @param image - Image to dilate.\n * @param options - Dilate options.\n * @returns Dilated image.\n */\nexport function dilate(image, options = {}) {\n    let defaultKernel = false;\n    if (options.kernel === undefined) {\n        defaultKernel = true;\n    }\n    const { kernel = [\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n    ], iterations = 1, } = options;\n    if (image instanceof Image) {\n        checkProcessable(image, {\n            bitDepth: [1, 8, 16],\n            components: 1,\n            alpha: false,\n        });\n    }\n    checkKernel(kernel);\n    let onlyOnes = true;\n    if (!defaultKernel) {\n        outer: for (const row of kernel) {\n            for (const value of row) {\n                if (value !== 1) {\n                    onlyOnes = false;\n                    break outer;\n                }\n            }\n        }\n    }\n    let result = image;\n    for (let i = 0; i < iterations; i++) {\n        if (result instanceof Mask) {\n            if (onlyOnes) {\n                const newMask = result.clone();\n                result = dilatMaskOnlyOnes(result, newMask, kernel[0].length, kernel.length);\n            }\n            else {\n                const newMask = Mask.createFrom(result);\n                result = dilateMask(result, newMask, kernel);\n            }\n        }\n        else if (onlyOnes) {\n            const newImage = Image.createFrom(result);\n            result = dilateGreyOnlyOnes(result, newImage, kernel[0].length, kernel.length);\n        }\n        else {\n            const newImage = Image.createFrom(result);\n            result = dilateGrey(result, newImage, kernel);\n        }\n    }\n    return result;\n}\nfunction dilateGrey(image, newImage, kernel) {\n    const kernelWidth = kernel[0].length;\n    const kernelHeight = kernel.length;\n    const radiusX = (kernelWidth - 1) / 2;\n    const radiusY = (kernelHeight - 1) / 2;\n    for (let row = 0; row < image.height; row++) {\n        for (let column = 0; column < image.width; column++) {\n            let max = 0;\n            for (let kernelRow = 0; kernelRow < kernelHeight; kernelRow++) {\n                for (let kernelColumn = 0; kernelColumn < kernelWidth; kernelColumn++) {\n                    if (kernel[kernelRow][kernelColumn] !== 1)\n                        continue;\n                    const currentColumn = kernelColumn - radiusX + column;\n                    const currentRow = kernelRow - radiusY + row;\n                    if (currentColumn < 0 ||\n                        currentRow < 0 ||\n                        currentColumn >= image.width ||\n                        currentRow >= image.height) {\n                        continue;\n                    }\n                    const value = image.getValue(currentColumn, currentRow, 0);\n                    if (value > max)\n                        max = value;\n                }\n            }\n            newImage.setValue(column, row, 0, max);\n        }\n    }\n    return newImage;\n}\nfunction dilateGreyOnlyOnes(image, newImage, kernelWidth, kernelHeight) {\n    const radiusX = (kernelWidth - 1) / 2;\n    const radiusY = (kernelHeight - 1) / 2;\n    const maxList = [];\n    for (let column = 0; column < image.width; column++) {\n        maxList.push(0);\n    }\n    for (let row = 0; row < image.height; row++) {\n        for (let column = 0; column < image.width; column++) {\n            let max = 0;\n            for (let h = Math.max(0, row - radiusY); h < Math.min(image.height, row + radiusY + 1); h++) {\n                const value = image.getValue(column, h, 0);\n                if (value > max) {\n                    max = value;\n                }\n            }\n            maxList[column] = max;\n        }\n        for (let column = 0; column < image.width; column++) {\n            let max = 0;\n            for (let i = Math.max(0, column - radiusX); i < Math.min(image.width, column + radiusX + 1); i++) {\n                if (maxList[i] > max) {\n                    max = maxList[i];\n                }\n            }\n            newImage.setValue(column, row, 0, max);\n        }\n    }\n    return newImage;\n}\nfunction dilateMask(mask, newMask, kernel) {\n    const kernelWidth = kernel[0].length;\n    const kernelHeight = kernel.length;\n    const radiusX = (kernelWidth - 1) / 2;\n    const radiusY = (kernelHeight - 1) / 2;\n    for (let row = 0; row < mask.height; row++) {\n        for (let column = 0; column < mask.width; column++) {\n            let max = 0;\n            for (let kernelRow = 0; kernelRow < kernelHeight; kernelRow++) {\n                for (let kernelColumn = 0; kernelColumn < kernelWidth; kernelColumn++) {\n                    if (kernel[kernelRow][kernelColumn] !== 1)\n                        continue;\n                    const currentColumn = kernelColumn - radiusX + column;\n                    const currentRow = kernelRow - radiusY + row;\n                    if (currentRow < 0 ||\n                        currentColumn < 0 ||\n                        currentColumn >= mask.width ||\n                        currentRow >= mask.height) {\n                        continue;\n                    }\n                    const value = mask.getBit(currentColumn, currentRow);\n                    if (value === 1) {\n                        max = 1;\n                        break;\n                    }\n                }\n            }\n            if (max === 1) {\n                newMask.setBit(column, row, 1);\n            }\n        }\n    }\n    return newMask;\n}\nfunction dilatMaskOnlyOnes(mask, newMask, kernelWidth, kernelHeight) {\n    const radiusX = (kernelWidth - 1) / 2;\n    const radiusY = (kernelHeight - 1) / 2;\n    const maxList = [];\n    for (let column = 0; column < mask.width; column++) {\n        maxList.push(1);\n    }\n    for (let row = 0; row < mask.height; row++) {\n        for (let column = 0; column < mask.width; column++) {\n            maxList[column] = 0;\n            for (let h = Math.max(0, row - radiusY); h < Math.min(mask.height, row + radiusY + 1); h++) {\n                if (mask.getBit(column, h) === 1) {\n                    maxList[column] = 1;\n                    break;\n                }\n            }\n        }\n        for (let column = 0; column < mask.width; column++) {\n            if (newMask.getBit(column, row) === 1)\n                continue;\n            for (let i = Math.max(0, column - radiusX); i < Math.min(mask.width, column + radiusX + 1); i++) {\n                if (maxList[i] === 1) {\n                    newMask.setBit(column, row, 1);\n                    break;\n                }\n            }\n        }\n    }\n    return newMask;\n}\n//# sourceMappingURL=dilate.js.map","import { Image } from '../Image.js';\nimport { checkKernel } from '../utils/validators/checkKernel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * In mathematical morphology, opening is the dilation of the erosion of a set A by a structuring element B.\n * Together with closing, the opening serves in computer vision and image processing as a basic workhorse of morphological noise removal.\n * Opening removes small objects from the foreground (usually taken as the bright pixels) of an image,\n * placing them in the background, while closing removes small holes in the foreground, changing small islands of background into foreground. (Wikipedia)\n * @see {@link http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html}\n * @param image - Image to process.\n * @param options - Open options.\n * @returns The opened image.\n */\nexport function open(image, options = {}) {\n    const { kernel = [\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n    ], iterations = 1, } = options;\n    if (image instanceof Image) {\n        checkProcessable(image, {\n            bitDepth: [1, 8, 16],\n            components: 1,\n            alpha: false,\n        });\n    }\n    checkKernel(kernel);\n    let newImage = image;\n    for (let i = 0; i < iterations; i++) {\n        newImage = newImage.erode({ kernel });\n        newImage = newImage.dilate({ kernel });\n    }\n    return newImage;\n}\n//# sourceMappingURL=open.js.map","import { Image } from '../Image.js';\nimport { checkKernel } from '../utils/validators/checkKernel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * In mathematical morphology, the closing of a set A by a structuring element B is the erosion of the dilation of that set (Wikipedia).\n * In image processing, closing is, together with opening, the basic workhorse of morphological noise removal.\n * Opening removes small objects, while closing removes small holes.\n * @see {@link http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html}\n * @param image - Image to process.\n * @param options - Close options.\n * @returns Closed image.\n */\nexport function close(image, options = {}) {\n    const { kernel = [\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n    ], iterations = 1, } = options;\n    if (image instanceof Image) {\n        checkProcessable(image, {\n            bitDepth: [1, 8, 16],\n            components: 1,\n            alpha: false,\n        });\n    }\n    checkKernel(kernel);\n    let newImage = image;\n    for (let i = 0; i < iterations; i++) {\n        newImage = newImage.dilate({ kernel }).erode({ kernel });\n    }\n    return newImage;\n}\n//# sourceMappingURL=close.js.map","import { Image } from '../Image.js';\nimport { subtract } from '../compare/index.js';\nimport { checkKernel } from '../utils/validators/checkKernel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * This function is the white top hat (also called top hat). In mathematical morphology and digital image processing,\n * top-hat transform is an operation that extracts small elements and details from given images.\n * The white top-hat transform is defined as the difference between the input image and its opening by some structuring element.\n * Top-hat transforms are used for various image processing tasks, such as feature extraction, background equalization, image enhancement, and others. (Wikipedia)\n * @see {@link http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html}\n * @param image - Image to process.\n * @param options - Top hat options.\n * @returns The top-hatted image.\n */\nexport function topHat(image, options = {}) {\n    const { kernel = [\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n    ], iterations = 1, } = options;\n    if (image instanceof Image) {\n        checkProcessable(image, {\n            bitDepth: [1, 8, 16],\n            components: 1,\n            alpha: false,\n        });\n    }\n    checkKernel(kernel);\n    let newImage = image;\n    for (let i = 0; i < iterations; i++) {\n        const openImage = newImage.open({ kernel });\n        newImage = subtract(openImage, newImage, { absolute: true });\n    }\n    return newImage;\n}\n//# sourceMappingURL=topHat.js.map","import { Image } from '../Image.js';\nimport { subtract } from '../compare/index.js';\nimport { checkKernel } from '../utils/validators/checkKernel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * This function is the black top hat (also called bottom hat).\n * In mathematical morphology and digital image processing,\n * top-hat transform is an operation that extracts small elements and details from given images.\n * The black top-hat transform is defined dually as the difference between the closed and the input image.\n * Top-hat transforms are used for various image processing tasks, such as feature extraction, background equalization,\n * image enhancement, and others. (Wikipedia)\n * @see {@link http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html}\n * @param image - Image to process.\n * @param options - Bottom hat options.\n * @returns The bottom-hatted image.\n */\nexport function bottomHat(image, options = {}) {\n    const { kernel = [\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n    ], iterations = 1, } = options;\n    if (image instanceof Image) {\n        checkProcessable(image, {\n            bitDepth: [1, 8, 16],\n            components: 1,\n            alpha: false,\n        });\n    }\n    checkKernel(kernel);\n    let newImage = image;\n    for (let i = 0; i < iterations; i++) {\n        const openImage = newImage.close({ kernel });\n        newImage = subtract(openImage, newImage, { absolute: true });\n    }\n    return newImage;\n}\n//# sourceMappingURL=bottomHat.js.map","import { Image } from '../Image.js';\nimport { subtract } from '../compare/index.js';\nimport { checkKernel } from '../utils/validators/checkKernel.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * In mathematical morphology and digital image processing, a morphological gradient is the difference between the dilation and the erosion of a given image. It is an image where each pixel value (typically non-negative) indicates the contrast intensity in the close neighborhood of that pixel. It is useful for edge detection and segmentation applications.\n * @see {@link http://docs.opencv.org/2.4/doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats.html}\n * @param image - Image to process.\n * @param options - Morphological gradient hat options.\n * @returns The processed image.\n */\nexport function morphologicalGradient(image, options = {}) {\n    const { kernel = [\n        [1, 1, 1],\n        [1, 1, 1],\n        [1, 1, 1],\n    ], iterations = 1, } = options;\n    if (image instanceof Image) {\n        checkProcessable(image, {\n            bitDepth: [1, 8, 16],\n            components: 1,\n            alpha: false,\n        });\n    }\n    checkKernel(kernel);\n    let newImage = image;\n    for (let i = 0; i < iterations; i++) {\n        const dilatedImage = newImage.dilate({ kernel });\n        const erodedImage = newImage.erode({ kernel });\n        newImage = subtract(dilatedImage, erodedImage, { absolute: true });\n    }\n    return newImage;\n}\n//# sourceMappingURL=morphologicalGradient.js.map","/**\n * Create function that allows to iterate on the pixels of the border of an image.\n * @param image - Image for which to create the border iterator.\n * @yields - Index of the border pixel.\n */\nexport function* borderIterator(image) {\n    for (let col = 0; col < image.width; col++) {\n        yield col;\n    }\n    for (let row = 2; row < image.height; row++) {\n        yield row * image.width - 1;\n    }\n    for (let col = 0; col < image.width; col++) {\n        yield image.width * image.height - col - 1;\n    }\n    for (let row = image.height - 2; row >= 1; row--) {\n        yield row * image.width;\n    }\n}\n//# sourceMappingURL=borderIterator.js.map","import { Mask } from '../Mask.js';\nimport { maskToOutputMask } from '../utils/getOutputImage.js';\nimport { assert } from '../utils/validators/assert.js';\nconst MAX_ARRAY = 65536; // 65536 should be enough for most of the cases\nconst toProcess = new Uint32Array(MAX_ARRAY);\n/**\n * Set the pixels connected to the border of the mask to zero. You can chose to allow corner connection of not with the `allowCorners` option.\n * @param mask - The mask to process.\n * @param options - Clear border options.\n * @returns The image with cleared borders.\n */\nexport function multipleFloodFill(mask, options = {}) {\n    const { startPixels = [0], startPixelValue = 0, newPixelValue = 1, allowCorners = false, } = options;\n    const newMask = maskToOutputMask(mask, options, { clone: true });\n    const alreadyConsidered = Mask.createFrom(mask);\n    let from = 0;\n    let to = 0;\n    // const startPixelValue = mask.getBitByIndex(startPixels[0]);\n    // find relevant border pixels\n    for (const pixelIndex of startPixels) {\n        if (newMask.getBitByIndex(pixelIndex) === startPixelValue) {\n            toProcess[to++ % MAX_ARRAY] = pixelIndex;\n            alreadyConsidered.setBitByIndex(pixelIndex, 1);\n            newMask.setBitByIndex(pixelIndex, newPixelValue);\n        }\n    }\n    // find pixels connected to the border pixels\n    while (from < to) {\n        assert(to - from <= MAX_ARRAY);\n        const currentPixel = toProcess[from++ % MAX_ARRAY];\n        newMask.setBitByIndex(currentPixel, newPixelValue);\n        // check if pixel is on a border\n        const topBorder = currentPixel < mask.width;\n        const leftBorder = currentPixel % mask.width === 0;\n        const rightBorder = currentPixel % mask.width === mask.width - 1;\n        const bottomBorder = currentPixel > mask.size - mask.width;\n        // check neighbors\n        if (!bottomBorder) {\n            const bottom = currentPixel + mask.width;\n            addToProcess(bottom);\n        }\n        if (!leftBorder) {\n            const left = currentPixel - 1;\n            addToProcess(left);\n        }\n        if (!topBorder) {\n            const top = currentPixel - mask.width;\n            addToProcess(top);\n        }\n        if (!rightBorder) {\n            const right = currentPixel + 1;\n            addToProcess(right);\n        }\n        if (allowCorners) {\n            if (!topBorder) {\n                if (!leftBorder) {\n                    const topLeft = currentPixel - mask.width - 1;\n                    addToProcess(topLeft);\n                }\n                if (!rightBorder) {\n                    const topRight = currentPixel - mask.width + 1;\n                    addToProcess(topRight);\n                }\n            }\n            if (!bottomBorder) {\n                if (!leftBorder) {\n                    const bottomLeft = currentPixel + mask.width - 1;\n                    addToProcess(bottomLeft);\n                }\n                if (!rightBorder) {\n                    const bottomRight = currentPixel + mask.width + 1;\n                    addToProcess(bottomRight);\n                }\n            }\n        }\n    }\n    function addToProcess(pixel) {\n        if (alreadyConsidered.getBitByIndex(pixel))\n            return;\n        if (newMask.getBitByIndex(pixel) === startPixelValue) {\n            toProcess[to++ % MAX_ARRAY] = pixel;\n            alreadyConsidered.setBitByIndex(pixel, 1);\n        }\n    }\n    return newMask;\n}\n//# sourceMappingURL=multipleFloodFill.js.map","import { borderIterator } from '../utils/borderIterator.js';\nimport { multipleFloodFill } from './multipleFloodFill.js';\n/**\n * Set the pixels connected to the border of the mask to zero. You can chose to allow corner connection of not with the `allowCorners` option.\n * @param mask - The mask to process.\n * @param options - Clear border options.\n * @returns The image with cleared borders.\n */\nexport function clearBorder(mask, options = {}) {\n    const { allowCorners = false, out, color = 'white' } = options;\n    return multipleFloodFill(mask, {\n        startPixels: borderIterator(mask),\n        startPixelValue: color === 'white' ? 1 : 0,\n        newPixelValue: color === 'white' ? 0 : 1,\n        allowCorners,\n        out,\n    });\n}\n//# sourceMappingURL=clearBorder.js.map","import { getIndex } from '../utils/getIndex.js';\nimport { imageToOutputMask } from '../utils/getOutputImage.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nconst kernelX = [\n    [-1, 0, 1],\n    [-2, 0, 2],\n    [-1, 0, 1],\n];\nconst kernelY = [\n    [-1, -2, -1],\n    [0, 0, 0],\n    [1, 2, 1],\n];\n/**\n * Apply Canny edge detection to an image.\n * @param image - Image to process.\n * @param options - Canny edge detection options.\n * @returns The processed image.\n */\nexport function cannyEdgeDetector(image, options = {}) {\n    const { hysteresis = true, lowThreshold = 0.04, highThreshold = 0.1, gaussianBlurOptions = { sigma: 1 }, } = options;\n    const minValue = lowThreshold * image.maxValue;\n    const maxValue = highThreshold * image.maxValue;\n    checkProcessable(image, {\n        colorModel: 'GREY',\n    });\n    const width = image.width;\n    const height = image.height;\n    const blurred = image.gaussianBlur(gaussianBlurOptions);\n    const gradientX = blurred.rawDirectConvolution(kernelY);\n    const gradientY = blurred.rawDirectConvolution(kernelX);\n    const gradient = new Float64Array(image.size);\n    for (let i = 0; i < image.size; i++) {\n        gradient[i] = Math.hypot(gradientX[i], gradientY[i]);\n    }\n    const nonMaxSuppression = new Float64Array(image.size);\n    const edges = new Float64Array(image.size);\n    const finalImage = imageToOutputMask(image, options);\n    // Non-Maximum suppression\n    for (let column = 1; column < width - 1; column++) {\n        for (let row = 1; row < height - 1; row++) {\n            const currentGradientX = gradientX[getIndex(column, row, image, 0)];\n            const currentGradientY = gradientY[getIndex(column, row, image, 0)];\n            const direction = getDirection(currentGradientX, currentGradientY);\n            const currentGradient = gradient[getIndex(column, row, image, 0)];\n            if (\n            // horizontal\n            (direction === 0 &&\n                currentGradient >= gradient[getIndex(column, row - 1, image, 0)] &&\n                currentGradient >= gradient[getIndex(column, row + 1, image, 0)]) ||\n                // upward slope\n                (direction === 1 &&\n                    currentGradient >=\n                        gradient[getIndex(column - 1, row - 1, image, 0)] &&\n                    currentGradient >=\n                        gradient[getIndex(column + 1, row + 1, image, 0)]) ||\n                // vertical\n                (direction === 2 &&\n                    currentGradient >= gradient[getIndex(column - 1, row, image, 0)] &&\n                    currentGradient >= gradient[getIndex(column + 1, row, image, 0)]) ||\n                // downward slope\n                (direction === 3 &&\n                    currentGradient >=\n                        gradient[getIndex(column - 1, row + 1, image, 0)] &&\n                    currentGradient >= gradient[getIndex(column + 1, row - 1, image, 0)])) {\n                // pixels to remove from the final image\n                nonMaxSuppression[getIndex(column, row, image, 0)] = currentGradient;\n            }\n        }\n    }\n    for (let i = 0; i < width * height; ++i) {\n        const currentNms = nonMaxSuppression[i];\n        let currentEdge = 0;\n        if (currentNms > maxValue) {\n            currentEdge++;\n            finalImage.setBitByIndex(i, 1);\n        }\n        if (currentNms > minValue) {\n            currentEdge++;\n        }\n        edges[i] = currentEdge;\n    }\n    // Hysteresis: first pass\n    if (hysteresis) {\n        let currentPixels = [];\n        for (let column = 1; column < width - 1; ++column) {\n            for (let row = 1; row < height - 1; ++row) {\n                if (edges[getIndex(column, row, image, 0)] !== 1) {\n                    continue;\n                }\n                outer: for (let hystColumn = column - 1; hystColumn < column + 2; ++hystColumn) {\n                    for (let hystRow = row - 1; hystRow < row + 2; ++hystRow) {\n                        if (edges[getIndex(hystColumn, hystRow, image, 0)] === 2) {\n                            currentPixels.push([column, row]);\n                            finalImage.setValue(column, row, 0, 1);\n                            break outer;\n                        }\n                    }\n                }\n            }\n        }\n        // Hysteresis: second pass\n        while (currentPixels.length > 0) {\n            const newPixels = [];\n            for (const currentPixel of currentPixels) {\n                for (let j = -1; j < 2; ++j) {\n                    for (let k = -1; k < 2; ++k) {\n                        if (j === 0 && k === 0) {\n                            continue;\n                        }\n                        const row = currentPixel[0] + j;\n                        const column = currentPixel[1] + k;\n                        if (\n                        // there could be an error here\n                        edges[getIndex(column, row, image, 0)] === 1 &&\n                            finalImage.getValue(column, row, 0) === 0) {\n                            newPixels.push([row, column]);\n                            finalImage.setValue(column, row, 0, 1);\n                        }\n                    }\n                }\n            }\n            currentPixels = newPixels;\n        }\n    }\n    return finalImage;\n    /* Function for debug\n    import { Matrix } from 'ml-matrix';\n  \n    function printArray(array: Float64Array): void {\n      // @ts-expect-error: only for debug\n      const matrix = Matrix.from1DArray(height, width, array);\n      console.log(matrix);\n    }\n    */\n}\n/**\n * Return a 0 to 3 value indicating the four main directions (horizontal, upward diagonal, vertical, downward diagonal).\n * @param x - The x coordinate.\n * @param y - The y coordinate.\n * @returns The direction as a 0 to 4 value.\n */\nexport function getDirection(x, y) {\n    return (Math.round(Math.atan2(y, x) * (4 / Math.PI)) + 4) % 4;\n}\n//# sourceMappingURL=cannyEdgeDetector.js.map","import { getIndex } from '../utils/getIndex.js';\nimport { multipleFloodFill } from './multipleFloodFill.js';\n/**\n * Apply a flood fill algorithm to an image.\n * @param mask - Mask to process.\n * @param options - Flood fill options.\n * @returns The filled mask.\n */\nexport function floodFill(mask, options = {}) {\n    const { origin = { row: 0, column: 0 }, allowCorners = false, out } = options;\n    const startPixel = getIndex(origin.column, origin.row, mask);\n    return multipleFloodFill(mask, {\n        startPixels: [startPixel],\n        allowCorners,\n        out,\n    });\n}\n//# sourceMappingURL=floodFill.js.map","import { maskToOutputMask } from '../utils/getOutputImage.js';\n/**\n * Fill holes in regions of interest.\n * @param mask - Mask to process.\n * @param options - Flood fill options.\n * @returns The filled mask.\n */\nexport function solidFill(mask, options = {}) {\n    const { allowCorners = false } = options;\n    const newImage = maskToOutputMask(mask, options, { clone: true });\n    const inverted = mask.invert();\n    const cleared = inverted.clearBorder({ allowCorners });\n    return newImage.or(cleared, { out: newImage });\n}\n//# sourceMappingURL=solidFill.js.map","/**\n * Converts a bit value to the corresponding number.\n * @param value - The bit to convert.\n * @returns The bit value as a number.\n */\nexport function boolToNumber(value) {\n    let result;\n    if (typeof value === 'boolean') {\n        result = value ? 1 : 0;\n    }\n    else {\n        result = value;\n    }\n    return result;\n}\n//# sourceMappingURL=boolToNumber.js.map","import { subtract } from './compare/index.js';\nimport { drawLineOnMask, drawPoints, drawPolygonOnMask, drawPolylineOnMask, drawRectangle, } from './draw/index.js';\nimport { and, invert, or } from './filters/index.js';\nimport { getBorderPoints } from './maskAnalysis/getBorderPoints.js';\nimport { getConvexHull } from './maskAnalysis/getConvexHull.js';\nimport { getFeret } from './maskAnalysis/getFeret.js';\nimport { getMbr } from './maskAnalysis/getMbr.js';\nimport { bottomHat, clearBorder, close, dilate, erode, floodFill, morphologicalGradient, open, solidFill, topHat, } from './morphology/index.js';\nimport { convertColor, copyTo, paintMaskOnMask } from './operations/index.js';\nimport { boolToNumber } from './utils/boolToNumber.js';\nimport { colorModels } from './utils/constants/colorModels.js';\nexport class Mask {\n    /**\n     * The number of columns of the mask.\n     */\n    width;\n    /**\n     * The number of rows of the mask.\n     */\n    height;\n    /**\n     * The total number of bits in the mask (width × height).\n     */\n    size;\n    /**\n     * The number of bits per value in each channel (always 1).\n     */\n    bitDepth;\n    /**\n     * The color model of the mask (always BINARY).\n     */\n    colorModel;\n    /**\n     * The number of color channels in the image, excluding the alpha channel (always 1).\n     */\n    components;\n    /**\n     * The number of channels in the mask, including the alpha channel (always 1).\n     */\n    channels;\n    /**\n     * Specifying that the mask has no an alpha channel.\n     */\n    alpha;\n    /**\n     * The maximum value that a pixel channel can have.\n     */\n    maxValue;\n    /**\n     * Origin of the image relative to a the parent image.\n     */\n    origin;\n    /**\n     * Typed array holding the mask data.\n     */\n    data;\n    /**\n     * Construct a new Mask knowing its dimensions.\n     * @param width - Image width.\n     * @param height - Image height.\n     * @param options - Image options.\n     */\n    constructor(width, height, options = {}) {\n        const { data, origin = { row: 0, column: 0 } } = options;\n        if (width < 1 || !Number.isInteger(width)) {\n            throw new RangeError(`width must be an integer and at least 1. Received ${width}`);\n        }\n        if (height < 1 || !Number.isInteger(height)) {\n            throw new RangeError(`height must be an integer and at least 1. Received ${height}`);\n        }\n        this.width = width;\n        this.height = height;\n        this.size = width * height;\n        this.bitDepth = 1;\n        this.colorModel = 'BINARY';\n        this.origin = origin;\n        const colorModelDef = colorModels[this.colorModel];\n        this.components = colorModelDef.components;\n        this.alpha = colorModelDef.alpha;\n        this.channels = colorModelDef.channels;\n        this.maxValue = 1;\n        if (data === undefined) {\n            this.data = new Uint8Array(this.size);\n        }\n        else {\n            const expectedLength = this.size * this.channels;\n            if (data.length !== expectedLength) {\n                throw new RangeError(`incorrect data size: ${data.length}. Expected ${expectedLength}`);\n            }\n            this.data = data;\n        }\n    }\n    /**\n     * Create a new Mask based on the properties of an existing one.\n     * @param other - Reference Mask.\n     * @param options - Mask options.\n     * @returns New mask.\n     */\n    static createFrom(other, options = {}) {\n        const { width = other.width, height = other.height, origin = other.origin, } = options;\n        return new Mask(width, height, { origin, ...options });\n    }\n    /**\n     * Get a pixel of the mask.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @returns The pixel.\n     */\n    getPixel(column, row) {\n        const result = [];\n        const index = row * this.width + column;\n        result.push(this.data[index]);\n        return result;\n    }\n    /**\n     * Set a pixel.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @param value - The pixel value.\n     */\n    setPixel(column, row, value) {\n        const index = row * this.width + column;\n        this.data[index] = value[0];\n    }\n    /**\n     * Set a pixel to a given value if the coordinates are inside the mask.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @param value - New color of the pixel to set.\n     */\n    setVisiblePixel(column, row, value) {\n        if (column >= 0 && column < this.width && row >= 0 && row < this.height) {\n            this.setPixel(column, row, value);\n        }\n    }\n    /**\n     * Get a pixel using its index.\n     * @param index - Index of the pixel.\n     * @returns The pixel.\n     */\n    getPixelByIndex(index) {\n        return [this.data[index]];\n    }\n    /**\n     * Set a pixel using its index.\n     * @param index - Index of the pixel.\n     * @param value - New value of the pixel to set.\n     */\n    setPixelByIndex(index, value) {\n        this.data[index] = value[0];\n    }\n    /**\n     * Create a mask from an array of points.\n     * @param width - Width of the mask.\n     * @param height - Height of the mask.\n     * @param points - Reference Mask.\n     * @returns New mask.\n     */\n    static fromPoints(width, height, points) {\n        const mask = new Mask(width, height);\n        for (const point of points) {\n            mask.setBit(point.column, point.row, 1);\n        }\n        return mask;\n    }\n    /**\n     * Create a copy of this mask.\n     * @returns The mask clone.\n     */\n    clone() {\n        return Mask.createFrom(this, { data: this.data.slice() });\n    }\n    /**\n     * Get the value of a bit.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @returns The bit value.\n     */\n    getBit(column, row) {\n        const index = row * this.width + column;\n        return this.data[index];\n    }\n    /**\n     * Set the value of a bit.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @param value - New bit value.\n     */\n    setBit(column, row, value) {\n        const index = row * this.width + column;\n        // @ts-expect-error: we know that value is a boolean\n        this.data[index] = value;\n    }\n    /**\n     * Get the value of a bit using index.\n     * @param index - Index of the pixel.\n     * @returns Value of the bit.\n     */\n    getBitByIndex(index) {\n        return this.data[index * this.channels];\n    }\n    /**\n     * Set the value of a bit using index.\n     * @param index - Index of the pixel.\n     * @param value - Value to set.\n     */\n    setBitByIndex(index, value) {\n        this.data[index * this.channels] = boolToNumber(value);\n    }\n    /**\n     * Get the number of pixels that do not have the value 0.\n     * @returns The number of non-zero pixels.\n     */\n    getNbNonZeroPixels() {\n        let count = 0;\n        for (const datum of this.data) {\n            if (datum) {\n                count++;\n            }\n        }\n        return count;\n    }\n    /**\n     * Get the value of a bit. Function exists for compatibility with Image.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @param channel - Index of the channel, must be zero.\n     * @returns The bit value.\n     */\n    getValue(column, row, channel) {\n        checkChannel(channel);\n        return this.getBit(column, row);\n    }\n    /**\n     * Set the value of a bit. Function exists for compatibility with Image.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @param channel - Index of the channel, must be zero.\n     * @param value - New bit value.\n     */\n    setValue(column, row, channel, value) {\n        checkChannel(channel);\n        this.setBit(column, row, value);\n    }\n    /**\n     * Get the value of a bit using index. Function exists for compatibility with Image.\n     * @param index - Index of the pixel.\n     * @param channel - Index of the channel, must be zero.\n     * @returns Value of the bit.\n     */\n    getValueByIndex(index, channel) {\n        checkChannel(channel);\n        return this.getBitByIndex(index);\n    }\n    /**\n     * Set the value of a bit using index. Function exists for compatibility with Image.\n     * @param index - Index of the pixel.\n     * @param channel - Index of the channel, must be zero.\n     * @param value - Value to set.\n     */\n    setValueByIndex(index, channel, value) {\n        checkChannel(channel);\n        this.setBitByIndex(index, value);\n    }\n    /**\n     * Get the value of a specific bit. Select bit using a point.\n     * @param point - Coordinates of the desired biz.\n     * @returns Value of the bit.\n     */\n    getValueByPoint(point) {\n        return this.getValue(point.column, point.row, 0);\n    }\n    /**\n     * Set the value of a specific bit. Select bit using a point.\n     * @param point - Coordinates of the bit.\n     * @param value - Value to set.\n     */\n    setValueByPoint(point, value) {\n        this.setValue(point.column, point.row, 0, value);\n    }\n    /**\n     * Return the raw mask data.\n     * @returns The raw data.\n     */\n    getRawImage() {\n        return {\n            width: this.width,\n            height: this.height,\n            data: this.data,\n        };\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        let dataString;\n        if (this.height > 20 || this.width > 20) {\n            dataString = '[...]';\n        }\n        else {\n            dataString = printData(this);\n        }\n        return `Mask {\n  width: ${this.width}\n  height: ${this.height}\n  data: ${dataString}\n}`;\n    }\n    /**\n     * Fill the mask with a value.\n     * @param value - Value of the bit.\n     * @returns The mask instance.\n     */\n    fill(value) {\n        const result = boolToNumber(value);\n        this.data.fill(result);\n        return this;\n    }\n    convertColor(colorModel) {\n        return convertColor(this, colorModel);\n    }\n    // FILTERS\n    /**\n     * Invert the colors of the mask.\n     * @param options - Inversion options.\n     * @returns The inverted mask.\n     */\n    invert(options) {\n        return invert(this, options);\n    }\n    /**\n     * Subtract other from a mask.\n     * @param other - Image to subtract.\n     * @param options - Inversion options.\n     * @returns The subtracted mask.\n     */\n    subtract(other, options) {\n        return subtract(this, other, options);\n    }\n    /**\n     * Perform an AND operation on two masks.\n     * @param other - Second mask.\n     * @param options - And options.\n     * @returns AND of the two masks.\n     */\n    and(other, options) {\n        return and(this, other, options);\n    }\n    /**\n     * Perform an OR operation on two masks.\n     * @param other - Second mask.\n     * @param options - And options.\n     * @returns OR of the two masks.\n     */\n    or(other, options) {\n        return or(this, other, options);\n    }\n    // MASK ANALYSIS\n    /**\n     * Get the coordinates of the points on the border of a shape defined in a mask.\n     * @param options - Get border points options.\n     * @returns Array of border points.\n     */\n    getBorderPoints(options) {\n        return getBorderPoints(this, options);\n    }\n    /**\n     * Get the vertices of the convex Hull polygon of a mask.\n     * @returns Array of the vertices of the convex Hull in clockwise order.\n     */\n    getConvexHull() {\n        return getConvexHull(this);\n    }\n    /**\n     * Get the corners of the minimum bounding rectangle of a shape defined in a mask.\n     * @returns Array of border points.\n     */\n    getMbr() {\n        return getMbr(this);\n    }\n    /**\n     * Computes the Feret data.\n     * @returns The Feret diameters.\n     */\n    getFeret() {\n        return getFeret(this);\n    }\n    // MORPHOLOGY\n    /**\n     * Erode a Mask.\n     * @param options - Erode options.\n     * @returns The eroded mask.\n     */\n    erode(options) {\n        return erode(this, options);\n    }\n    /**\n     * Dilate an image.\n     * @param options - Dilate options.\n     * @returns The dilated image.\n     */\n    dilate(options) {\n        return dilate(this, options);\n    }\n    /**\n     * Open an image.\n     * @param options - Open options.\n     * @returns The opened image.\n     */\n    open(options) {\n        return open(this, options);\n    }\n    /**\n     * Close an image.\n     * @param options - Close options.\n     * @returns The closed image.\n     */\n    close(options) {\n        return close(this, options);\n    }\n    /**\n     * Top hat of an image.\n     * @param options - Top hat options.\n     * @returns The top-hatted image.\n     */\n    topHat(options) {\n        return topHat(this, options);\n    }\n    /**\n     * Bottom hat of an image.\n     * @param options - Bottom hat options.\n     * @returns The bottom-hatted image.\n     */\n    bottomHat(options) {\n        return bottomHat(this, options);\n    }\n    /**\n     * Apply morphological gradient to an image.\n     * @param options - Morphological gradient options.\n     * @returns The processed image.\n     */\n    morphologicalGradient(options) {\n        return morphologicalGradient(this, options);\n    }\n    /**\n     * Remove elements connected to the borders of an image.\n     * @param options - Clear border options.\n     * @returns The processed image.\n     */\n    clearBorder(options) {\n        return clearBorder(this, options);\n    }\n    /**\n     * Apply flood fill algorithm from a given starting point.\n     * @param options - Flood fill options.\n     * @returns The filled mask.\n     */\n    floodFill(options) {\n        return floodFill(this, options);\n    }\n    /**\n     * Fill holes in regions of interest.\n     * @param options - Flood fill options.\n     * @returns The filled mask.\n     */\n    solidFill(options) {\n        return solidFill(this, options);\n    }\n    // DRAW\n    /**\n     * Draw a set of points on a mask.\n     * @param points - Array of points.\n     * @param options - Draw points on Image options.\n     * @returns New mask.\n     */\n    drawPoints(points, options = {}) {\n        return drawPoints(this, points, options);\n    }\n    /**\n     * Draw a line defined by two points onto a mask.\n     * @param from - Line starting point.\n     * @param to - Line ending point.\n     * @param options - Draw Line options.\n     * @returns The mask with the line drawing.\n     */\n    drawLine(from, to, options = {}) {\n        return drawLineOnMask(this, from, to, options);\n    }\n    /**\n     * Draw a polyline defined by an array of points on a mask.\n     * @param points - Polyline array of points.\n     * @param options - Draw polyline options.\n     * @returns The mask with the polyline drawing.\n     */\n    drawPolyline(points, options = {}) {\n        return drawPolylineOnMask(this, points, options);\n    }\n    /**\n     * Draw a polygon defined by an array of points onto an mask.\n     * @param points - Polygon vertices.\n     * @param options - Draw Line options.\n     * @returns The mask with the polygon drawing.\n     */\n    drawPolygon(points, options = {}) {\n        return drawPolygonOnMask(this, points, options);\n    }\n    /**\n     * Draw a rectangle defined by position of the top-left corner, width and height.\n     * @param options - Draw rectangle options.\n     * @returns The image with the rectangle drawing.\n     */\n    drawRectangle(options = {}) {\n        return drawRectangle(this, options);\n    }\n    // OPERATIONS\n    /**\n     * Copy the mask to another one by specifying the location in the target mask.\n     * @param target - The target mask.\n     * @param options - Options.\n     * @returns The target with the source copied to it.\n     */\n    copyTo(target, options = {}) {\n        return copyTo(this, target, options);\n    }\n    /**\n     * Paint a mask onto another mask and the given position and with the given value.\n     * @param mask - Mask to paint.\n     * @param options - Paint mask options.\n     * @returns The painted mask.\n     */\n    paintMask(mask, options) {\n        return paintMaskOnMask(this, mask, options);\n    }\n}\n/**\n * Returns all values of a mask as a string.\n * @param mask - Input mask.\n * @returns Formatted string with all values of a mask.\n */\nfunction printData(mask) {\n    const result = [];\n    for (let row = 0; row < mask.height; row++) {\n        const line = [];\n        for (let column = 0; column < mask.width; column++) {\n            line.push(String(mask.getBit(column, row)));\n        }\n        result.push(`[${line.join(' ')}]`);\n    }\n    return result.join('\\n        ');\n}\n/**\n * Verify the channel value of a mask.\n * @param channel - The channel value.\n */\nfunction checkChannel(channel) {\n    if (channel !== 0) {\n        throw new RangeError(`channel value must be 0 on type Mask. Received ${channel}`);\n    }\n}\n//# sourceMappingURL=Mask.js.map","import { Image } from '../Image.js';\nimport { Mask } from '../Mask.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { validateForComparison } from '../utils/validators/validators.js';\n/**\n * Calculate a new image that is the subtraction between the current image and the otherImage.\n * @param image - Image from which to subtract.\n * @param otherImage - Image to subtract.\n * @param options - Subtract options.\n * @returns The subtracted image.\n */\nexport function subtract(image, otherImage, options = {}) {\n    const { absolute = false } = options;\n    if (image instanceof Image) {\n        checkProcessable(image, {\n            bitDepth: [1, 8, 16],\n            components: [1, 3],\n            alpha: false,\n        });\n    }\n    validateForComparison(image, otherImage);\n    const newImage = image.clone();\n    if (newImage instanceof Image) {\n        for (let index = 0; index < image.size; index++) {\n            for (let channel = 0; channel < image.channels; channel++) {\n                const value = image.getValueByIndex(index, channel) -\n                    otherImage.getValueByIndex(index, channel);\n                if (absolute) {\n                    if (value < 0) {\n                        newImage.setValueByIndex(index, channel, -value);\n                    }\n                    else {\n                        newImage.setValueByIndex(index, channel, value);\n                    }\n                }\n                else if (value < 0) {\n                    newImage.setValueByIndex(index, channel, 0);\n                }\n                else {\n                    newImage.setValueByIndex(index, channel, value);\n                }\n            }\n        }\n    }\n    else if (image instanceof Mask && otherImage instanceof Mask) {\n        for (let index = 0; index < image.size; index++) {\n            const value = image.getBitByIndex(index) - otherImage.getBitByIndex(index);\n            if (absolute) {\n                newImage.setBitByIndex(index, value ? 1 : 0);\n            }\n            else {\n                newImage.setBitByIndex(index, value > 0 ? 1 : 0);\n            }\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=subtract.js.map","import { Image } from '../Image.js';\nimport { getClamp } from '../utils/clamp.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { validateForComparison } from '../utils/validators/validators.js';\n/**\n *\n * Calculate a new image that is the sum between the current image and the otherImage.\n * @param image - Image to which to add.\n * @param otherImage - Image to add.\n * @returns The summed image.\n */\nexport function add(image, otherImage) {\n    if (image instanceof Image) {\n        checkProcessable(image, {\n            bitDepth: [8, 16],\n            components: [1, 3],\n            alpha: false,\n        });\n    }\n    validateForComparison(image, otherImage);\n    const newImage = image.clone();\n    const clamp = getClamp(image);\n    for (let index = 0; index < image.size; index++) {\n        for (let channel = 0; channel < image.channels; channel++) {\n            const value = image.getValueByIndex(index, channel) +\n                otherImage.getValueByIndex(index, channel);\n            newImage.setValueByIndex(index, channel, clamp(value));\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=add.js.map","import { getOutputImage } from '../utils/getOutputImage.js';\nimport { validateChannels } from '../utils/validators/validators.js';\n/**\n *\n * Multiplies points by a certain value.\n * @param image - image to which multiplication will be applied.\n * @param value - Value by which each pixel will be multiplied.\n * @param options - Multiply options\n * @returns image.\n */\nexport function multiply(image, value, options = {}) {\n    const { channels = new Array(image.channels).fill(0).map((value, index) => index), } = options;\n    validateChannels(channels, image);\n    const newImage = getOutputImage(image, options, { clone: true });\n    if (channels.length === 0) {\n        return newImage;\n    }\n    for (const channel of channels) {\n        for (let row = 0; row < newImage.height; row++) {\n            for (let column = 0; column < newImage.width; column++) {\n                const newIntensity = newImage.getValue(column, row, channel) * value;\n                newImage.setClampedValue(column, row, channel, newIntensity);\n            }\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=multiply.js.map","/**\n * Compute the mean of an image. The mean can be either computed on each channel\n * individually or on the whole image.\n * @param image - Image to process.\n * @param options - Mean options.\n * @returns The mean pixel.\n */\nexport function mean(image, options) {\n    const pixelSum = new Array(image.channels).fill(0);\n    const nbValues = options ? options.points.length : image.size;\n    if (nbValues === 0)\n        throw new RangeError('Array of coordinates is empty.');\n    if (options) {\n        for (const point of options.points) {\n            for (let channel = 0; channel < image.channels; channel++) {\n                if (point.column < 0 ||\n                    point.column >= image.width ||\n                    point.row < 0 ||\n                    point.row >= image.height) {\n                    throw new RangeError(`Invalid coordinate: {column: ${point.column}, row: ${point.row}}.`);\n                }\n                pixelSum[channel] += image.getValueByPoint(point, channel);\n            }\n        }\n    }\n    else {\n        for (let row = 0; row < image.height; row++) {\n            for (let column = 0; column < image.width; column++) {\n                for (let channel = 0; channel < image.channels; channel++) {\n                    pixelSum[channel] += image.getValue(column, row, channel);\n                }\n            }\n        }\n    }\n    return pixelSum.map((channelSum) => channelSum / nbValues);\n}\n//# sourceMappingURL=mean.js.map","import { validateChannel } from '../utils/validators/validators.js';\n/**\n * Returns a histogram of pixel intensities.\n * @param image - The original image.\n * @param options - Histogram options.\n * @returns - The histogram.\n */\nexport function histogram(image, options = {}) {\n    let { channel } = options;\n    const { slots = 2 ** image.bitDepth } = options;\n    if (!(slots !== 0 && (slots & (slots - 1)) === 0)) {\n        throw new RangeError('slots must be a power of 2, for example: 64, 256, 1024');\n    }\n    if (typeof channel !== 'number') {\n        if (image.channels !== 1) {\n            throw new TypeError('channel option is mandatory for multi-channel images');\n        }\n        channel = 0;\n    }\n    validateChannel(channel, image);\n    const hist = new Uint32Array(slots);\n    let bitShift = 0;\n    const bitSlots = Math.log2(slots);\n    bitShift = image.bitDepth - bitSlots;\n    for (let i = 0; i < image.size; i++) {\n        hist[image.getValueByIndex(i, channel) >> bitShift]++;\n    }\n    return hist;\n}\n//# sourceMappingURL=histogram.js.map","// @ts-expect-error: median-quisckselect has no types\nimport quickMedian from 'median-quickselect';\n/**\n * Returns the median pixel of the image. The median is computed on each channel individually.\n * @param image - Image to process.\n * @param options - Median options.\n * @returns Median pixel.\n */\nexport function median(image, options) {\n    const pixel = new Array(image.channels).fill(0);\n    if (options) {\n        if (options.points.length === 0) {\n            throw new RangeError('Array of coordinates is empty.');\n        }\n        for (let i = 0; i < image.channels; i++) {\n            const channel = [];\n            for (const point of options.points) {\n                if (point.column < 0 ||\n                    point.column >= image.width ||\n                    point.row < 0 ||\n                    point.row >= image.height) {\n                    throw new RangeError(`Invalid coordinate: {column: ${point.column}, row: ${point.row}}.`);\n                }\n                channel.push(image.getValueByPoint(point, i));\n            }\n            pixel[i] = quickMedian(channel);\n        }\n    }\n    else {\n        for (let i = 0; i < image.channels; i++) {\n            const channel = image.getChannel(i);\n            pixel[i] = quickMedian(channel);\n        }\n    }\n    return pixel;\n}\n//# sourceMappingURL=median.js.map","import { assertUnreachable } from '../utils/validators/assert.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Checks the surrounding values of a point. If they are all bigger or smaller than the pixel in question then this point is considered an extremum.\n * @param image - Image to find extrema from.\n * @param options - ExtremaOptions\n * @returns Array of Points.\n */\nexport function getExtrema(image, options) {\n    const { kind = 'maximum', mask, algorithm = 'star', maxEquals = 2 } = options;\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n    });\n    const searchingMinimum = kind === 'minimum';\n    const maskExpectedValue = searchingMinimum ? 0 : 1;\n    const dx = [1, 0, -1, 0, 1, 1, -1, -1, 2, 0, -2, 0, 2, 2, -2, -2];\n    const dy = [0, 1, 0, -1, 1, -1, 1, -1, 0, 2, 0, -2, 2, -2, 2, -2];\n    switch (algorithm) {\n        case 'cross':\n            dx.length = 4;\n            dy.length = 4;\n            break;\n        case 'square':\n            dx.length = 8;\n            dy.length = 8;\n            break;\n        case 'star':\n            break;\n        default:\n            assertUnreachable(algorithm);\n    }\n    const shift = dx.length <= 8 ? 1 : 2; // deal with borders\n    const points = [];\n    for (let channel = 0; channel < image.channels; channel++) {\n        for (let currentY = shift; currentY < image.height - shift; currentY++) {\n            for (let currentX = shift; currentX < image.width - shift; currentX++) {\n                if (mask && mask.getBit(currentX, currentY) !== maskExpectedValue) {\n                    continue;\n                }\n                let counter = 0;\n                let nbEquals = 0;\n                const currentValue = image.getValue(currentX, currentY, channel);\n                for (let dir = 0; dir < dx.length; dir++) {\n                    const currentAroundValue = image.getValue(currentX + dx[dir], currentY + dy[dir], channel);\n                    if (searchingMinimum) {\n                        // we search for minima\n                        if (currentAroundValue > currentValue) {\n                            counter++;\n                        }\n                    }\n                    else if (currentAroundValue < currentValue) {\n                        counter++;\n                    }\n                    if (currentAroundValue === currentValue) {\n                        nbEquals++;\n                    }\n                }\n                if (counter + nbEquals === dx.length && nbEquals <= maxEquals) {\n                    points.push({ column: currentX, row: currentY });\n                }\n            }\n        }\n    }\n    // TODO How to make a more performant and general way\n    // we don't deal correctly here with groups of points that should be grouped if at the\n    // beginning one of them is closer to another\n    // Seems that we would ened to calculate a matrix and then split this matrix in 'independant matrices'\n    // Or to assign a cluster to each point and regroup them if 2 clusters are close to each other\n    // later approach seems much better\n    return points;\n}\n//# sourceMappingURL=getExtrema.js.map","/**\n * Compute the variance of each channel of an image.\n * @see {@link https://en.wikipedia.org/wiki/Variance}\n * @param image - Image to process.\n * @param options - Variance options.\n * @returns The variance of the channels of the image.\n */\nexport function variance(image, options) {\n    const mean = image.mean(options);\n    const sum = new Array(image.channels).fill(0);\n    if (options) {\n        for (const point of options.points) {\n            for (let channel = 0; channel < image.channels; channel++) {\n                sum[channel] +=\n                    (image.getValue(point.column, point.row, channel) - mean[channel]) **\n                        2;\n            }\n        }\n    }\n    else {\n        for (let i = 0; i < image.size; i++) {\n            for (let channel = 0; channel < image.channels; channel++) {\n                sum[channel] +=\n                    (image.getValueByIndex(i, channel) - mean[channel]) ** 2;\n            }\n        }\n    }\n    const nbValues = options\n        ? options.points.length * image.channels\n        : image.size * image.channels;\n    return sum.map((channel) => channel / nbValues);\n}\n//# sourceMappingURL=variance.js.map","import { Matrix, SVD, pseudoInverse } from 'ml-matrix';\n\nexport default class MultivariateLinearRegression {\n  constructor(x, y, options = {}) {\n    const { intercept = true, statistics = true } = options;\n    this.statistics = statistics;\n    if (x === true) {\n      this.weights = y.weights;\n      this.inputs = y.inputs;\n      this.outputs = y.outputs;\n      this.intercept = y.intercept;\n    } else {\n      x = new Matrix(x);\n      y = new Matrix(y);\n      if (intercept) {\n        x.addColumn(new Array(x.rows).fill(1));\n      }\n      let xt = x.transpose();\n      const xx = xt.mmul(x);\n      const xy = xt.mmul(y);\n      const invxx = new SVD(xx).inverse();\n      const beta = xy.transpose().mmul(invxx).transpose();\n      this.weights = beta.to2DArray();\n      this.inputs = x.columns;\n      this.outputs = y.columns;\n      if (intercept) this.inputs--;\n      this.intercept = intercept;\n      if (statistics) {\n        /*\n         * Let's add some basic statistics about the beta's to be able to interpret them.\n         * source: http://dept.stat.lsa.umich.edu/~kshedden/Courses/Stat401/Notes/401-multreg.pdf\n         * validated against Excel Regression AddIn\n         * test: \"datamining statistics test\"\n         */\n        const fittedValues = x.mmul(beta);\n        const residuals = y.clone().addM(fittedValues.neg());\n        const variance =\n          residuals\n            .to2DArray()\n            .map((ri) => Math.pow(ri[0], 2))\n            .reduce((a, b) => a + b) /\n          (y.rows - x.columns);\n        this.stdError = Math.sqrt(variance);\n        this.stdErrorMatrix = pseudoInverse(xx).mul(variance);\n        this.stdErrors = this.stdErrorMatrix\n          .diagonal()\n          .map((d) => Math.sqrt(d));\n        this.tStats = this.weights.map((d, i) =>\n          this.stdErrors[i] === 0 ? 0 : d[0] / this.stdErrors[i],\n        );\n      }\n    }\n  }\n\n  predict(x) {\n    if (Array.isArray(x)) {\n      if (typeof x[0] === 'number') {\n        return this._predict(x);\n      } else if (Array.isArray(x[0])) {\n        const y = new Array(x.length);\n        for (let i = 0; i < x.length; i++) {\n          y[i] = this._predict(x[i]);\n        }\n        return y;\n      }\n    } else if (Matrix.isMatrix(x)) {\n      const y = new Matrix(x.rows, this.outputs);\n      for (let i = 0; i < x.rows; i++) {\n        y.setRow(i, this._predict(x.getRow(i)));\n      }\n      return y;\n    }\n    throw new TypeError('x must be a matrix or array of numbers');\n  }\n\n  _predict(x) {\n    const result = new Array(this.outputs);\n    if (this.intercept) {\n      for (let i = 0; i < this.outputs; i++) {\n        result[i] = this.weights[this.inputs][i];\n      }\n    } else {\n      result.fill(0);\n    }\n    for (let i = 0; i < this.inputs; i++) {\n      for (let j = 0; j < this.outputs; j++) {\n        result[j] += this.weights[i][j] * x[i];\n      }\n    }\n    return result;\n  }\n\n  score() {\n    throw new Error('score method is not implemented yet');\n  }\n\n  toJSON() {\n    return {\n      name: 'multivariateLinearRegression',\n      weights: this.weights,\n      inputs: this.inputs,\n      outputs: this.outputs,\n      intercept: this.intercept,\n      summary: this.statistics\n        ? {\n            regressionStatistics: {\n              standardError: this.stdError,\n              observations: this.outputs,\n            },\n            variables: this.weights.map((d, i) => {\n              return {\n                label:\n                  i === this.weights.length - 1\n                    ? 'Intercept'\n                    : `X Variable ${i + 1}`,\n                coefficients: d,\n                standardError: this.stdErrors[i],\n                tStat: this.tStats[i],\n              };\n            }),\n          }\n        : undefined,\n    };\n  }\n\n  static load(model) {\n    if (model.name !== 'multivariateLinearRegression') {\n      throw new Error('not a MLR model');\n    }\n    return new MultivariateLinearRegression(true, model);\n  }\n}\n","var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return\"string\"==typeof r?r.length>0:\"number\"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?\"0\"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*,\\s*([+-]?\\d*\\.?\\d+)%\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,p=/^hsla?\\(\\s*([+-]?\\d*\\.?\\d+)(deg|rad|grad|turn)?\\s+([+-]?\\d*\\.?\\d+)%\\s+([+-]?\\d*\\.?\\d+)%\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,v=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*(?:,\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,m=/^rgba?\\(\\s*([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s+([+-]?\\d*\\.?\\d+)(%)?\\s*(?:\\/\\s*([+-]?\\d*\\.?\\d+)(%)?\\s*)?\\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},\"hex\"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},\"rgb\"],[function(t){var n=l.exec(t)||p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u=\"deg\"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},\"hsl\"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},\"rgb\"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},\"hsl\"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},\"hsv\"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return\"string\"==typeof r?N(r.trim(),y.string):\"object\"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):\"\",\"#\"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?\"rgba(\"+t+\", \"+n+\", \"+e+\", \"+u+\")\":\"rgb(\"+t+\", \"+n+\", \"+e+\")\";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?\"hsla(\"+t+\", \"+n+\"%, \"+e+\"%, \"+u+\")\":\"hsl(\"+t+\", \"+n+\"%, \"+e+\"%)\";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return\"number\"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return\"number\"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};export{j as Colord,w as colord,k as extend,I as getFormat,E as random};\n","var a=function(a){return\"string\"==typeof a?a.length>0:\"number\"==typeof a},t=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=Math.pow(10,t)),Math.round(o*a)/o+0},o=function(a,t,o){return void 0===t&&(t=0),void 0===o&&(o=1),a>o?o:a>t?a:t},r=function(a){var t=a/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},h=function(a){return 255*(a>.0031308?1.055*Math.pow(a,1/2.4)-.055:12.92*a)},n=96.422,p=100,M=82.521,u=function(a){var t,r,n={x:.9555766*(t=a).x+-.0230393*t.y+.0631636*t.z,y:-.0282895*t.x+1.0099416*t.y+.0210077*t.z,z:.0122982*t.x+-.020483*t.y+1.3299098*t.z};return r={r:h(.032404542*n.x-.015371385*n.y-.004985314*n.z),g:h(-.00969266*n.x+.018760108*n.y+41556e-8*n.z),b:h(556434e-9*n.x-.002040259*n.y+.010572252*n.z),a:a.a},{r:o(r.r,0,255),g:o(r.g,0,255),b:o(r.b,0,255),a:o(r.a)}},e=function(a){var t=r(a.r),h=r(a.g),u=r(a.b);return function(a){return{x:o(a.x,0,n),y:o(a.y,0,p),z:o(a.z,0,M),a:o(a.a)}}(function(a){return{x:1.0478112*a.x+.0228866*a.y+-.050127*a.z,y:.0295424*a.x+.9904844*a.y+-.0170491*a.z,z:-.0092345*a.x+.0150436*a.y+.7521316*a.z,a:a.a}}({x:100*(.4124564*t+.3575761*h+.1804375*u),y:100*(.2126729*t+.7151522*h+.072175*u),z:100*(.0193339*t+.119192*h+.9503041*u),a:a.a}))},w=216/24389,b=24389/27,i=function(t){var r=t.l,h=t.a,n=t.b,p=t.alpha,M=void 0===p?1:p;if(!a(r)||!a(h)||!a(n))return null;var u=function(a){return{l:o(a.l,0,400),a:a.a,b:a.b,alpha:o(a.alpha)}}({l:Number(r),a:Number(h),b:Number(n),alpha:Number(M)});return l(u)},l=function(a){var t=(a.l+16)/116,o=a.a/500+t,r=t-a.b/200;return u({x:(Math.pow(o,3)>w?Math.pow(o,3):(116*o-16)/b)*n,y:(a.l>8?Math.pow((a.l+16)/116,3):a.l/b)*p,z:(Math.pow(r,3)>w?Math.pow(r,3):(116*r-16)/b)*M,a:a.alpha})};export default function(a,r){a.prototype.toLab=function(){return o=e(this.rgba),h=o.y/p,u=o.z/M,r=(r=o.x/n)>w?Math.cbrt(r):(b*r+16)/116,a={l:116*(h=h>w?Math.cbrt(h):(b*h+16)/116)-16,a:500*(r-h),b:200*(h-(u=u>w?Math.cbrt(u):(b*u+16)/116)),alpha:o.a},{l:t(a.l,2),a:t(a.a,2),b:t(a.b,2),alpha:t(a.alpha,3)};var a,o,r,h,u},a.prototype.delta=function(r){void 0===r&&(r=\"#FFF\");var h=r instanceof a?r:new a(r),n=function(a,t){var o=a.l,r=a.a,h=a.b,n=t.l,p=t.a,M=t.b,u=180/Math.PI,e=Math.PI/180,w=Math.pow(Math.pow(r,2)+Math.pow(h,2),.5),b=Math.pow(Math.pow(p,2)+Math.pow(M,2),.5),i=(o+n)/2,l=Math.pow((w+b)/2,7),c=.5*(1-Math.pow(l/(l+Math.pow(25,7)),.5)),f=r*(1+c),y=p*(1+c),v=Math.pow(Math.pow(f,2)+Math.pow(h,2),.5),x=Math.pow(Math.pow(y,2)+Math.pow(M,2),.5),z=(v+x)/2,s=0===f&&0===h?0:Math.atan2(h,f)*u,d=0===y&&0===M?0:Math.atan2(M,y)*u;s<0&&(s+=360),d<0&&(d+=360);var g=d-s,m=Math.abs(d-s);m>180&&d<=s?g+=360:m>180&&d>s&&(g-=360);var N=s+d;m<=180?N/=2:N=(s+d<360?N+360:N-360)/2;var F=1-.17*Math.cos(e*(N-30))+.24*Math.cos(2*e*N)+.32*Math.cos(e*(3*N+6))-.2*Math.cos(e*(4*N-63)),L=n-o,I=x-v,P=2*Math.sin(e*g/2)*Math.pow(v*x,.5),j=1+.015*Math.pow(i-50,2)/Math.pow(20+Math.pow(i-50,2),.5),k=1+.045*z,q=1+.015*z*F,A=30*Math.exp(-1*Math.pow((N-275)/25,2)),B=-2*Math.pow(l/(l+Math.pow(25,7)),.5)*Math.sin(2*e*A);return Math.pow(Math.pow(L/1/j,2)+Math.pow(I/1/k,2)+Math.pow(P/1/q,2)+B*I*P/(1*k*1*q),.5)}(this.toLab(),h.toLab())/100;return o(t(n,3))},r.object.push([i,\"lab\"])}\n","import { colord, extend } from 'colord';\nimport labPlugin from 'colord/plugins/lab';\nimport { getRegressionVariables } from '../correctColor.js';\n// We can't use ts-expect-error because it's not an error when compiling for CJS.\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore Module exports are not correctly typed.\nextend([labPlugin]);\n/**\n * Convert RGB array colors to RGB object colors. Used to get the properly formatted measured colors.\n * @param arrayColors - Array of RGB colors as 3 elements array.\n * @returns Array of RGB objects.\n */\nexport function getMeasuredColors(arrayColors) {\n    const objectColors = [];\n    for (const color of arrayColors) {\n        objectColors.push({ r: color[0], g: color[1], b: color[2] });\n    }\n    return objectColors;\n}\n/**\n * Extract the colors from a QP card and convert them to RGB.\n * @param qpCard - QP card containing the color reference values in L*a*b*.\n * @returns Array of reference RGB colors.\n */\nexport function getReferenceColors(qpCard) {\n    const result = [];\n    for (const square of qpCard) {\n        result.push(colord(square.lab).toRgb());\n    }\n    return result;\n}\n/**\n * Format and normalize data from a QP card to use as a reference in a multivariate linear regression.\n * @param referenceColors - Array of RGB colors used as a reference.\n * @param maxValue - Maximal acceptable value for the image to process.\n * @returns The formatted data.\n */\nexport function formatReferenceForMlr(referenceColors, maxValue) {\n    const referenceData = { r: [], g: [], b: [] };\n    for (const color of referenceColors) {\n        referenceData.r.push([color.r / maxValue]);\n        referenceData.g.push([color.g / maxValue]);\n        referenceData.b.push([color.b / maxValue]);\n    }\n    return referenceData;\n}\n/**\n * Compute the variables for the multivariate linear regression based on the the input colors. Values are normalized between 0 and 1.\n * @param inputColors - The input colors as an array of rgb objects.\n * @param maxValue - Maximal acceptable value for the image to process.\n * @returns The formatted input data for the regression.\n */\nexport function formatInputForMlr(inputColors, maxValue) {\n    const inputData = [];\n    for (const color of inputColors) {\n        inputData.push(getRegressionVariables(color.r, color.g, color.b, maxValue));\n    }\n    return inputData;\n}\n//# sourceMappingURL=formatData.js.map","import MLR from 'ml-regression-multivariate-linear';\nimport { Image } from '../Image.js';\nimport { getClamp } from '../utils/clamp.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { formatInputForMlr, formatReferenceForMlr, } from './utils/formatData.js';\n/**\n * Correct the colors in an image using the reference colors.\n * Algorithm is based on the paper \"Color correction using improved linear regression algorithm\".\n * DOI: 10.1109/ICTS.2015.7379874.\n * @param image - Image to process.\n * @param measuredColors - Colors from the image, which will be compared to the reference.\n * @param referenceColors - Reference colors.\n * @returns Image with the colors corrected.\n */\nexport function correctColor(image, measuredColors, referenceColors) {\n    checkProcessable(image, {\n        colorModel: ['RGB', 'RGBA'],\n    });\n    if (measuredColors.length !== referenceColors.length) {\n        throw new RangeError('number of measured colors and reference colors must be the same');\n    }\n    const inputData = formatInputForMlr(measuredColors, image.maxValue);\n    const referenceData = formatReferenceForMlr(referenceColors, image.maxValue);\n    const mlrRed = new MLR(inputData, referenceData.r);\n    const mlrGreen = new MLR(inputData, referenceData.g);\n    const mlrBlue = new MLR(inputData, referenceData.b);\n    const result = Image.createFrom(image);\n    for (let row = 0; row < image.height; row++) {\n        for (let column = 0; column < image.width; column++) {\n            const pixel = image.getPixel(column, row);\n            const variables = getRegressionVariables(pixel[0], pixel[1], pixel[2], image.maxValue);\n            const clamp = getClamp(image);\n            const newPixel = [0, 0, 0];\n            const red = mlrRed.predict(variables)[0] * image.maxValue;\n            const green = mlrGreen.predict(variables)[0] * image.maxValue;\n            const blue = mlrBlue.predict(variables)[0] * image.maxValue;\n            newPixel[0] = clamp(red);\n            newPixel[1] = clamp(green);\n            newPixel[2] = clamp(blue);\n            if (image.alpha) {\n                newPixel[3] = image.getValue(column, row, 3);\n            }\n            result.setPixel(column, row, newPixel);\n        }\n    }\n    return result;\n}\n/**\n * Compute the third order variables for the regression from an RGB color.\n * @param r - Red component.\n * @param g - Green component.\n * @param b - Blue component.\n * @param maxValue - Maximal acceptable value for the image to process.\n * @returns The variables for the multivariate linear regression.\n */\nexport function getRegressionVariables(r, g, b, maxValue) {\n    r /= maxValue;\n    g /= maxValue;\n    b /= maxValue;\n    return [\n        r,\n        g,\n        b,\n        r ** 2,\n        g ** 2,\n        b ** 2,\n        r ** 3,\n        g ** 3,\n        b ** 3,\n        r * g,\n        r * b,\n        b * g,\n    ];\n}\n//# sourceMappingURL=correctColor.js.map","/**\n * Find the min and max values of each channel of the image.\n * @param image - Image to process.\n * @returns An object with arrays of the min and max values.\n */\nexport function getMinMax(image) {\n    const min = new Array(image.channels).fill(image.maxValue);\n    const max = new Array(image.channels).fill(0);\n    for (let row = 0; row < image.height; row++) {\n        for (let column = 0; column < image.width; column++) {\n            for (let channel = 0; channel < image.channels; channel++) {\n                const currentValue = image.getValue(column, row, channel);\n                if (currentValue < min[channel]) {\n                    min[channel] = currentValue;\n                }\n                if (currentValue > max[channel]) {\n                    max[channel] = currentValue;\n                }\n            }\n        }\n    }\n    return { min, max };\n}\n//# sourceMappingURL=getMinMax.js.map","import { match } from 'ts-pattern';\nimport { divide } from './compare/divide.js';\nimport { add, subtract } from './compare/index.js';\nimport { multiply } from './compare/multiply.js';\nimport { histogram, mean, median, variance } from './compute/index.js';\nimport { correctColor } from './correctColor/index.js';\nimport { drawCircleOnImage, drawLineOnImage, drawMarker, drawMarkers, drawPoints, drawPolygonOnImage, drawPolylineOnImage, drawRectangle, } from './draw/index.js';\nimport { blur, derivativeFilter, directConvolution, flip, gaussianBlur, gradientFilter, hypotenuse, increaseContrast, invert, level, medianFilter, pixelate, rawDirectConvolution, separableConvolution, } from './filters/index.js';\nimport { resize, rotate, transform, transformRotate, } from './geometry/index.js';\nimport { bottomHat, cannyEdgeDetector, close, dilate, erode, morphologicalGradient, open, topHat, } from './morphology/index.js';\nimport { convertBitDepth, convertColor, copyTo, crop, cropAlpha, cropRectangle, extract, grey, paintMaskOnImage, split, threshold, } from './operations/index.js';\nimport { colorModels } from './utils/constants/colorModels.js';\nimport { getMinMax } from './utils/getMinMax.js';\nimport { validateChannel, validateValue, } from './utils/validators/validators.js';\nexport const ImageCoordinates = {\n    CENTER: 'center',\n    TOP_LEFT: 'top-left',\n    TOP_RIGHT: 'top-right',\n    BOTTOM_LEFT: 'bottom-left',\n    BOTTOM_RIGHT: 'bottom-right',\n};\nexport class Image {\n    /**\n     * The number of columns of the image.\n     */\n    width;\n    /**\n     * The number of rows of the image.\n     */\n    height;\n    /**\n     * The total number of pixels in the image (width × height).\n     */\n    size;\n    /**\n     * The number of bits per value in each channel.\n     */\n    bitDepth;\n    /**\n     * The color model of the image.\n     */\n    colorModel;\n    /**\n     * The number of color channels in the image, excluding the alpha channel.\n     * A GREY image has 1 component. An RGB image has 3 components.\n     */\n    components;\n    /**\n     * The total number of channels in the image, including the alpha channel.\n     */\n    channels;\n    /**\n     * Whether the image has an alpha channel or not.\n     */\n    alpha;\n    /**\n     * The maximum value that a pixel channel can have.\n     */\n    maxValue;\n    /**\n     * Origin of the image relative to a the parent image.\n     */\n    origin;\n    meta;\n    /**\n     * Typed array holding the image data.\n     */\n    data;\n    /**\n     * Construct a new Image knowing its dimensions.\n     * @param width - Image width.\n     * @param height - Image height.\n     * @param options - Image options.\n     */\n    constructor(width, height, options = {}) {\n        const { bitDepth = 8, data, colorModel = 'RGB', origin = { row: 0, column: 0 }, meta, } = options;\n        if (width < 1 || !Number.isInteger(width)) {\n            throw new RangeError(`width must be an integer and at least 1. Received ${width}`);\n        }\n        if (height < 1 || !Number.isInteger(height)) {\n            throw new RangeError(`height must be an integer and at least 1. Received ${height}`);\n        }\n        this.width = width;\n        this.height = height;\n        this.size = width * height;\n        this.bitDepth = bitDepth;\n        this.colorModel = colorModel;\n        this.origin = origin;\n        this.meta = meta;\n        const colorModelDef = colorModels[colorModel];\n        this.components = colorModelDef.components;\n        this.alpha = colorModelDef.alpha;\n        this.channels = colorModelDef.channels;\n        this.maxValue = 2 ** bitDepth - 1;\n        if (data === undefined) {\n            this.data = createPixelArray(this.size, this.channels, this.alpha, this.bitDepth, this.maxValue);\n        }\n        else {\n            if (bitDepth === 8 && data instanceof Uint16Array) {\n                throw new RangeError(`bitDepth is ${bitDepth} but data is Uint16Array`);\n            }\n            else if (bitDepth === 16 && data instanceof Uint8Array) {\n                throw new RangeError(`bitDepth is ${bitDepth} but data is Uint8Array`);\n            }\n            const expectedLength = this.size * this.channels;\n            if (data.length !== expectedLength) {\n                throw new RangeError(`incorrect data size: ${data.length}. Expected ${expectedLength}`);\n            }\n            this.data = data;\n        }\n    }\n    /**\n     * Create a new Image based on the properties of an existing one.\n     * @param other - Reference image.\n     * @param options - Image options.\n     * @returns New image.\n     */\n    static createFrom(other, options = {}) {\n        const { width = other.width, height = other.height } = options;\n        let bitDepth;\n        if (other instanceof Image) {\n            bitDepth = other.bitDepth;\n        }\n        else {\n            bitDepth = 8;\n        }\n        return new Image(width, height, {\n            bitDepth,\n            colorModel: other.colorModel,\n            origin: other.origin,\n            ...options,\n        });\n    }\n    /**\n     * Get all the channels of a pixel.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @returns Channels of the pixel.\n     */\n    getPixel(column, row) {\n        const result = [];\n        const start = (row * this.width + column) * this.channels;\n        for (let i = 0; i < this.channels; i++) {\n            result.push(this.data[start + i]);\n        }\n        return result;\n    }\n    getColumn(column) {\n        const columnValues = [];\n        for (let i = 0; i < this.channels; i++) {\n            const channelValues = [];\n            for (let j = 0; j < this.height; j++) {\n                channelValues.push(this.getValue(column, j, i));\n            }\n            columnValues.push(channelValues);\n        }\n        return columnValues;\n    }\n    getRow(row) {\n        const rowValues = [];\n        for (let i = 0; i < this.channels; i++) {\n            const channelValues = [];\n            for (let j = 0; j < this.width; j++) {\n                channelValues.push(this.getValue(j, row, i));\n            }\n            rowValues.push(channelValues);\n        }\n        return rowValues;\n    }\n    /**\n     * Set all the channels of a pixel.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @param value - New color of the pixel to set.\n     */\n    setPixel(column, row, value) {\n        const start = (row * this.width + column) * this.channels;\n        for (let i = 0; i < this.channels; i++) {\n            this.data[start + i] = value[i];\n        }\n    }\n    /**\n     * Set all the channels of a pixel if the coordinates are inside the image.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @param value - New color of the pixel to set.\n     */\n    setVisiblePixel(column, row, value) {\n        if (column >= 0 && column < this.width && row >= 0 && row < this.height) {\n            this.setPixel(column, row, value);\n        }\n    }\n    /**\n     * Get all the channels of a pixel using its index.\n     * @param index - Index of the pixel.\n     * @returns Channels of the pixel.\n     */\n    getPixelByIndex(index) {\n        const result = [];\n        const start = index * this.channels;\n        for (let i = 0; i < this.channels; i++) {\n            result.push(this.data[start + i]);\n        }\n        return result;\n    }\n    /**\n     * Set all the channels of a pixel using its index.\n     * @param index - Index of the pixel.\n     * @param value - New channel values of the pixel to set.\n     */\n    setPixelByIndex(index, value) {\n        const start = index * this.channels;\n        for (let i = 0; i < this.channels; i++) {\n            this.data[start + i] = value[i];\n        }\n    }\n    /**\n     * Get the value of a specific pixel channel. Select pixel using coordinates.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @param channel - Channel index.\n     * @returns Value of the specified channel of one pixel.\n     */\n    getValue(column, row, channel) {\n        return this.data[(row * this.width + column) * this.channels + channel];\n    }\n    /**\n     * Set the value of a specific pixel channel. Select pixel using coordinates.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @param channel - Channel index.\n     * @param value - Value to set.\n     */\n    setValue(column, row, channel, value) {\n        this.data[(row * this.width + column) * this.channels + channel] = value;\n    }\n    /**\n     * Set the value of a specific pixel channel. Select pixel using coordinates.\n     * If the value is out of range it is set to the closest extremety.\n     * @param column - Column index.\n     * @param row - Row index.\n     * @param channel - Channel index.\n     * @param value - Value to set.\n     */\n    setClampedValue(column, row, channel, value) {\n        if (value < 0)\n            value = 0;\n        else if (value > this.maxValue)\n            value = this.maxValue;\n        this.data[(row * this.width + column) * this.channels + channel] = value;\n    }\n    /**\n     * Get the value of a specific pixel channel. Select pixel using index.\n     * @param index - Index of the pixel.\n     * @param channel - Channel index.\n     * @returns Value of the channel of the pixel.\n     */\n    getValueByIndex(index, channel) {\n        return this.data[index * this.channels + channel];\n    }\n    /**\n     * Set the value of a specific pixel channel. Select pixel using index.\n     * @param index - Index of the pixel.\n     * @param channel - Channel index.\n     * @param value - Value to set.\n     */\n    setValueByIndex(index, channel, value) {\n        this.data[index * this.channels + channel] = value;\n    }\n    /**\n     * Set the value of a specific pixel channel. Select pixel using index.\n     * If the value is out of range it is set to the closest extremety.\n     * @param index - Index of the pixel.\n     * @param channel - Channel index.\n     * @param value - Value to set.\n     */\n    setClampedValueByIndex(index, channel, value) {\n        if (value < 0)\n            value = 0;\n        else if (value > this.maxValue)\n            value = this.maxValue;\n        this.data[index * this.channels + channel] = value;\n    }\n    /**\n     * Get the value of a specific pixel channel. Select pixel using a point.\n     * @param point - Coordinates of the desired pixel.\n     * @param channel - Channel index.\n     * @returns Value of the channel of the pixel.\n     */\n    getValueByPoint(point, channel) {\n        return this.getValue(point.column, point.row, channel);\n    }\n    /**\n     * Set the value of a specific pixel channel. Select pixel using a point.\n     * @param point - Coordinates of the pixel.\n     * @param channel - Channel index.\n     * @param value - Value to set.\n     */\n    setValueByPoint(point, channel, value) {\n        this.setValue(point.column, point.row, channel, value);\n    }\n    /**\n     * Find the min and max values of each channel of the image.\n     * @returns An object with arrays of the min and max values.\n     */\n    minMax() {\n        return getMinMax(this);\n    }\n    /**\n     * Return the raw image data.\n     * @returns The raw data.\n     */\n    getRawImage() {\n        return {\n            width: this.width,\n            height: this.height,\n            data: this.data,\n            channels: this.channels,\n            bitDepth: this.bitDepth,\n        };\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        let dataString;\n        if (this.height > 20 || this.width > 20) {\n            dataString = '[...]';\n        }\n        else {\n            dataString = printData(this);\n        }\n        return `Image {\n  width: ${this.width}\n  height: ${this.height}\n  bitDepth: ${this.bitDepth}\n  colorModel: ${this.colorModel}\n  channels: ${this.channels}\n  data: ${dataString}\n}`;\n    }\n    /**\n     * Fill the image with a value or a color.\n     * @param value - Value or color.\n     * @returns The image instance.\n     */\n    fill(value) {\n        if (typeof value === 'number') {\n            validateValue(value, this);\n            this.data.fill(value);\n            return this;\n        }\n        else {\n            if (value.length !== this.channels) {\n                throw new RangeError(`the size of value must match the number of channels (${this.channels}). Received ${value.length}`);\n            }\n            for (const val of value)\n                validateValue(val, this);\n            for (let i = 0; i < this.data.length; i += this.channels) {\n                for (let j = 0; j <= this.channels; j++) {\n                    this.data[i + j] = value[j];\n                }\n            }\n            return this;\n        }\n    }\n    /**\n     * Fill one channel with a value.\n     * @param channel - The channel to fill.\n     * @param value - The new value.\n     * @returns The image instance.\n     */\n    fillChannel(channel, value) {\n        validateChannel(channel, this);\n        validateValue(value, this);\n        for (let i = channel; i < this.data.length; i += this.channels) {\n            this.data[i] = value;\n        }\n        return this;\n    }\n    /**\n     * Get one channel of the image as an array.\n     * @param channel - The channel to fill.\n     * @returns Array with the channel values.\n     */\n    getChannel(channel) {\n        validateChannel(channel, this);\n        const result = new Array(this.size);\n        for (let i = 0; i < this.size; i++) {\n            result[i] = this.data[channel + i * this.channels];\n        }\n        return result;\n    }\n    /**\n     * Fill the alpha channel with the specified value.\n     * @param value - New channel value.\n     * @returns The image instance.\n     */\n    fillAlpha(value) {\n        validateValue(value, this);\n        if (!this.alpha) {\n            throw new TypeError('fillAlpha can only be called if the image has an alpha channel');\n        }\n        const alphaIndex = this.channels - 1;\n        return this.fillChannel(alphaIndex, value);\n    }\n    /**\n     * Create a copy of this image.\n     * @returns The image clone.\n     */\n    clone() {\n        return Image.createFrom(this, { data: this.data.slice() });\n    }\n    /**\n     * Modify all the values of the image using the given callback.\n     * @param cb - Callback that modifies a given value.\n     */\n    changeEach(cb) {\n        for (let i = 0; i < this.data.length; i++) {\n            this.data[i] = cb(this.data[i]);\n        }\n    }\n    /**\n     * Get the coordinates of a point in the image. The reference is the top-left corner.\n     * @param coordinates - The point for which you want the coordinates.\n     * @param round - Whether the coordinates should be rounded. This is useful when you want the center of the image.\n     * @returns Coordinates of the point in the format [column, row].\n     */\n    getCoordinates(coordinates, round = false) {\n        return match(coordinates)\n            .with('center', () => {\n            const centerX = (this.width - 1) / 2;\n            const centerY = (this.height - 1) / 2;\n            if (round) {\n                return { column: Math.round(centerX), row: Math.round(centerY) };\n            }\n            else {\n                return { column: centerX, row: centerY };\n            }\n        })\n            .with('top-left', () => ({ column: 0, row: 0 }))\n            .with('top-right', () => ({ column: this.width - 1, row: 0 }))\n            .with('bottom-left', () => ({ column: 0, row: this.height - 1 }))\n            .with('bottom-right', () => ({\n            column: this.width - 1,\n            row: this.height - 1,\n        }))\n            .exhaustive();\n    }\n    // COMPARE\n    /**\n     * Subtract other from an image.\n     * @param other - Image to subtract.\n     * @param options - Inversion options.\n     * @returns The subtracted image.\n     */\n    subtract(other, options = {}) {\n        return subtract(this, other, options);\n    }\n    add(other) {\n        return add(this, other);\n    }\n    /**\n     *  Multiply image pixels by a constant.\n     * @param value - Value which pixels will be multiplied to.\n     * @param options - Multiply options.\n     * @returns Multiplied image.\n     */\n    multiply(value, options = {}) {\n        return multiply(this, value, options);\n    }\n    /**\n     *  Divide image pixels by a constant.\n     * @param value - Value which pixels will be divided to.\n     * @param options - Divide options.\n     * @returns Divided image.\n     */\n    divide(value, options = {}) {\n        return divide(this, value, options);\n    }\n    // COMPUTE\n    histogram(options) {\n        return histogram(this, options);\n    }\n    /**\n     * Compute the mean pixel of an image.\n     * @param options - Mean options.\n     * @returns The mean pixel.\n     */\n    mean(options) {\n        return mean(this, options);\n    }\n    /**\n     * Compute the median pixel of an image.\n     * @param options - Median options.\n     * @returns The median pixel.\n     */\n    median(options) {\n        return median(this, options);\n    }\n    /**\n     * Compute the variance of each channel of an image.\n     * @param options - Variance options.\n     * @returns The variance of the channels of the image.\n     */\n    variance(options) {\n        return variance(this, options);\n    }\n    // DRAW\n    /**\n     * Draw a set of points on an image.\n     * @param points - Array of points.\n     * @param options - Draw points on Image options.\n     * @returns New mask.\n     */\n    drawPoints(points, options = {}) {\n        return drawPoints(this, points, options);\n    }\n    /**\n     * Draw a line defined by two points onto an image.\n     * @param from - Line starting point.\n     * @param to - Line ending point.\n     * @param options - Draw Line options.\n     * @returns The mask with the line drawing.\n     */\n    drawLine(from, to, options = {}) {\n        return drawLineOnImage(this, from, to, options);\n    }\n    /**\n     * Draw a rectangle defined by position of the top-left corner, width and height.\n     * @param options - Draw rectangle options.\n     * @returns The image with the rectangle drawing.\n     */\n    drawRectangle(options = {}) {\n        return drawRectangle(this, options);\n    }\n    /**\n     * Draw a polyline defined by an array of points on an image.\n     * @param points - Polyline array of points.\n     * @param options - Draw polyline options.\n     * @returns The image with the polyline drawing.\n     */\n    drawPolyline(points, options = {}) {\n        return drawPolylineOnImage(this, points, options);\n    }\n    /**\n     * Draw a polygon defined by an array of points onto an image.\n     * @param points - Polygon vertices.\n     * @param options - Draw Line options.\n     * @returns The image with the polygon drawing.\n     */\n    drawPolygon(points, options = {}) {\n        return drawPolygonOnImage(this, points, options);\n    }\n    /**\n     * Draw a circle defined by center and radius onto an image.\n     * @param center - Circle center.\n     * @param radius - Circle radius.\n     * @param options - Draw circle options.\n     * @returns The image with the circle drawing.\n     */\n    drawCircle(center, radius, options = {}) {\n        return drawCircleOnImage(this, center, radius, options);\n    }\n    /**\n     * Draw a marker on the image.\n     * @param point - Marker center point.\n     * @param options - Draw marker options.\n     * @returns The image with the marker drawing.\n     */\n    drawMarker(point, options = {}) {\n        return drawMarker(this, point, options);\n    }\n    /**\n     * Draw markers on the image.\n     * @param points - Markers center points.\n     * @param options - Draw marker options.\n     * @returns The image with the markers drawing.\n     */\n    drawMarkers(points, options = {}) {\n        return drawMarkers(this, points, options);\n    }\n    // OPERATIONS\n    split() {\n        return split(this);\n    }\n    convertColor(colorModel, options) {\n        return convertColor(this, colorModel, options);\n    }\n    convertBitDepth(newDepth, options) {\n        return convertBitDepth(this, newDepth, options);\n    }\n    grey(options) {\n        return grey(this, options);\n    }\n    copyTo(target, options = {}) {\n        return copyTo(this, target, options);\n    }\n    threshold(options = {}) {\n        return threshold(this, options);\n    }\n    /**\n     * Crop the input image to a desired size.\n     * @param [options] - Crop options.\n     * @returns The new cropped image.\n     */\n    crop(options) {\n        return crop(this, options);\n    }\n    /**\n     * Crop an oriented rectangle from the image.\n     * If the rectangle's length or width are not an integers, its dimension is expanded in both directions such as the length and width are integers.\n     * @param points - The points of the rectangle. Points must be circling around the rectangle (clockwise or anti-clockwise)\n     * @param options - Crop options, see {@link CropRectangleOptions}\n     * @returns The cropped image. The orientation of the image is the one closest to the rectangle passed as input.\n     */\n    cropRectangle(points, options) {\n        return cropRectangle(this, points, options);\n    }\n    /**\n     * Crops the image based on the alpha channel\n     * This removes lines and columns where the alpha channel is lower than a threshold value.\n     * @param options - Crop alpha options.\n     * @returns The cropped image.\n     */\n    cropAlpha(options = {}) {\n        return cropAlpha(this, options);\n    }\n    /**\n     * Extract the pixels of an image, as specified in a mask.\n     * @param mask - The mask defining which pixels to keep.\n     * @param options - Extract options.\n     * @returns The extracted image.\n     */\n    extract(mask, options) {\n        return extract(this, mask, options);\n    }\n    /**\n     * Paint a mask onto an image and the given position and with the given color.\n     * @param mask - Mask to paint on the image.\n     * @param options - Paint mask options.\n     * @returns The painted image.\n     */\n    paintMask(mask, options) {\n        return paintMaskOnImage(this, mask, options);\n    }\n    // FILTERS\n    blur(options) {\n        return blur(this, options);\n    }\n    pixelate(options) {\n        return pixelate(this, options);\n    }\n    directConvolution(kernel, options) {\n        return directConvolution(this, kernel, options);\n    }\n    /**\n     * Compute direct convolution of an image and return an array with the raw values.\n     * @param kernel - Kernel used for the convolution.\n     * @param options - Convolution options.\n     * @returns Array with the raw convoluted values.\n     */\n    rawDirectConvolution(kernel, options) {\n        return rawDirectConvolution(this, kernel, options);\n    }\n    separableConvolution(kernelX, kernelY, options) {\n        return separableConvolution(this, kernelX, kernelY, options);\n    }\n    /**\n     * Apply a gaussian filter to an image.\n     * @param options - Gaussian blur options.\n     * @returns The blurred image.\n     */\n    gaussianBlur(options) {\n        return gaussianBlur(this, options);\n    }\n    /**\n     * Flip the image.\n     * @param options - Flip options.\n     * @returns The flipped image.\n     */\n    flip(options) {\n        return flip(this, options);\n    }\n    /**\n     *   Invert the colors of the image.\n     * @param options - Inversion options.\n     * @returns The inverted image.\n     */\n    invert(options) {\n        return invert(this, options);\n    }\n    /**\n     * Calculate a new image that is the hypotenuse between the current image and the other.\n     * @param other - Other image.\n     * @param options - Hypotenuse options.\n     * @returns Hypotenuse of the two images.\n     */\n    hypotenuse(other, options) {\n        return hypotenuse(this, other, options);\n    }\n    /**\n     * Apply a gradient filter to an image.\n     * @param options - Gradient filter options.\n     * @returns The gradient image.\n     */\n    gradientFilter(options) {\n        return gradientFilter(this, options);\n    }\n    /**\n     * Apply a derivative filter to an image.\n     * @param options - Derivative filter options.\n     * @returns The processed image.\n     */\n    derivativeFilter(options) {\n        return derivativeFilter(this, options);\n    }\n    /**\n     * Level the image using the optional input and output value. This function allows you to enhance the image's contrast.\n     * @param options - Level options.\n     * @returns The levelled image.\n     */\n    level(options) {\n        return level(this, options);\n    }\n    /**\n     * Increase the contrast of an image by spanning each channel on the range [0, image.maxValue].\n     * @param options - Increase contrast options.\n     * @returns The enhanced image.\n     */\n    increaseContrast(options = {}) {\n        return increaseContrast(this, options);\n    }\n    /**\n     * Correct the colors in an image using the reference colors.\n     * @param measuredColors - Colors from the image, which will be compared to the reference.\n     * @param referenceColors - Reference colors.\n     * @returns Image with the colors corrected.\n     */\n    correctColor(measuredColors, referenceColors) {\n        return correctColor(this, measuredColors, referenceColors);\n    }\n    /**\n     * Apply a median filter to the image.\n     * @param options - Options to apply for median filter.\n     * @returns Image after median filter.\n     */\n    medianFilter(options) {\n        return medianFilter(this, options);\n    }\n    // GEOMETRY\n    resize(options) {\n        return resize(this, options);\n    }\n    rotate(angle) {\n        return rotate(this, angle);\n    }\n    transform(transformMatrix, options) {\n        return transform(this, transformMatrix, options);\n    }\n    transformRotate(angle, options) {\n        return transformRotate(this, angle, options);\n    }\n    // MORPHOLOGY\n    /**\n     * Erode an image.\n     * @param options - Erode options.\n     * @returns The eroded image.\n     */\n    erode(options) {\n        return erode(this, options);\n    }\n    /**\n     * Dilate an image.\n     * @param options - Dilate options.\n     * @returns The dilated image.\n     */\n    dilate(options) {\n        return dilate(this, options);\n    }\n    /**\n     * Open an image.\n     * @param options - Open options.\n     * @returns The opened image.\n     */\n    open(options) {\n        return open(this, options);\n    }\n    /**\n     * Close an image.\n     * @param options - Close options.\n     * @returns The closed image.\n     */\n    close(options) {\n        return close(this, options);\n    }\n    /**\n     * Top hat of an image.\n     * @param options - Top hat options.\n     * @returns The top-hatted image.\n     */\n    topHat(options) {\n        return topHat(this, options);\n    }\n    /**\n     * Bottom hat of an image.\n     * @param options - Bottom hat options.\n     * @returns The bottom-hatted image.\n     */\n    bottomHat(options) {\n        return bottomHat(this, options);\n    }\n    /**\n     * Apply morphological gradient to an image.\n     * @param options - Morphological gradient options.\n     * @returns The processed image.\n     */\n    morphologicalGradient(options) {\n        return morphologicalGradient(this, options);\n    }\n    /**\n     * Apply Canny edge detection to an image.\n     * @param options - Canny edge detection options.\n     * @returns The processed image.\n     */\n    cannyEdgeDetector(options) {\n        return cannyEdgeDetector(this, options);\n    }\n}\n/**\n * Create data array and set alpha channel to max value if applicable.\n * @param size - Number of pixels.\n * @param channels - Number of channels.\n * @param alpha - Specify if there is alpha channel.\n * @param bitDepth - Number of bits per channel.\n * @param maxValue - Maximal acceptable value for the channels.\n * @returns The new pixel array.\n */\nfunction createPixelArray(size, channels, alpha, bitDepth, maxValue) {\n    const length = channels * size;\n    const arr = match(bitDepth)\n        .with(8, () => new Uint8Array(length))\n        .with(16, () => new Uint16Array(length))\n        .otherwise(() => {\n        throw new RangeError(`invalid bitDepth: ${bitDepth}`);\n    });\n    // Alpha channel is 100% by default.\n    if (alpha) {\n        for (let i = channels - 1; i < length; i += channels) {\n            arr[i] = maxValue;\n        }\n    }\n    return arr;\n}\n/**\n * Returns the image data as a formatted string.\n * @param img - The image instance.\n * @returns Formatted string containing the image data.\n */\nfunction printData(img) {\n    const result = [];\n    const padding = img.bitDepth === 8 ? 3 : 5;\n    for (let row = 0; row < img.height; row++) {\n        const currentRow = [];\n        for (let column = 0; column < img.width; column++) {\n            for (let channel = 0; channel < img.channels; channel++) {\n                currentRow.push(String(img.getValue(column, row, channel)).padStart(padding, ' '));\n            }\n        }\n        result.push(`[${currentRow.join(' ')}]`);\n    }\n    return `{\n    [\\n     ${result.join('\\n     ')}\\n    ]\n  }`;\n}\n//# sourceMappingURL=Image.js.map","/**\n * Copy the data of an source to the target image.\n * @param source - Image which data is copied.\n * @param target - Image to which the data must be copied.\n */\nexport function copyData(source, target) {\n    if (target.width !== source.width ||\n        target.height !== source.height ||\n        target.colorModel !== source.colorModel) {\n        throw new RangeError('images width, height or color model is different');\n    }\n    // @ts-expect-error Accessing data, which is private\n    target.data = source.data.slice();\n}\n//# sourceMappingURL=copyData.js.map","import { Image } from '../Image.js';\nimport { Mask } from '../Mask.js';\nimport { copyData } from './copyData.js';\n/**\n * Use this function to support getting the output image of an algorithm from\n * user-supplied options.\n * @param thisImage - Current image on which the algorithm is applied.\n * @param options - Options object received by the algorithm.\n * @param internalOptions - Some additional private options.\n * @returns The output image.\n */\nexport function getOutputImage(thisImage, options = {}, internalOptions = {}) {\n    const { out } = options;\n    const { newParameters, clone } = internalOptions;\n    if (out === undefined) {\n        if (clone) {\n            return thisImage.clone();\n        }\n        else {\n            return Image.createFrom(thisImage, newParameters);\n        }\n    }\n    else {\n        if (!(out instanceof Image)) {\n            throw new TypeError('out must be an Image');\n        }\n        const requirements = {\n            width: thisImage.width,\n            height: thisImage.height,\n            bitDepth: thisImage.bitDepth,\n            colorModel: thisImage.colorModel,\n            ...newParameters,\n        };\n        checkRequirements(requirements, out);\n        if (clone && thisImage !== out) {\n            copyData(thisImage, out);\n        }\n        return out;\n    }\n}\n/**\n * Use this function to support getting the output image of an algorithm from\n * user-supplied options when the input is a mask.\n * @param mask - Current mask on which the algorithm is applied.\n * @param options - Options object received by the algorithm.\n * @returns The output image.\n */\nexport function maskToOutputImage(mask, options = {}) {\n    const { out } = options;\n    if (out === undefined) {\n        return Image.createFrom(mask, {\n            colorModel: 'GREY',\n        });\n    }\n    else {\n        if (!(out instanceof Image)) {\n            throw new TypeError('out must be an Image');\n        }\n        const requirements = {\n            width: mask.width,\n            height: mask.height,\n            bitDepth: 8,\n            colorModel: 'GREY',\n        };\n        checkRequirements(requirements, out);\n        return out;\n    }\n}\n/**\n * Use this function to support getting the output mask of an algorithm from\n * user-supplied options when the input is an image.\n * @param image - Current image on which the algorithm is applied.\n * @param options - Options object received by the algorithm.\n * @returns The output mask.\n */\nexport function imageToOutputMask(image, options = {}) {\n    const { out } = options;\n    if (out === undefined) {\n        return Mask.createFrom(image);\n    }\n    else {\n        if (!(out instanceof Mask)) {\n            throw new TypeError('out must be a Mask');\n        }\n        const requirements = {\n            width: image.width,\n            height: image.height,\n            bitDepth: 1,\n            colorModel: 'BINARY',\n        };\n        checkRequirements(requirements, out);\n        return out;\n    }\n}\nfunction checkRequirements(requirements, out) {\n    for (const property in requirements) {\n        const prop = property;\n        if (out[prop] !== requirements[prop]) {\n            throw new RangeError(`cannot use out image. Its ${property} property must be ${requirements[prop]}. Received ${out[prop]}`);\n        }\n    }\n}\n/**\n * Use this function to support getting the output mask of an algorithm from\n * user-supplied options when the input is an mask.\n * @param mask - Current mask on which the algorithm is applied.\n * @param options - Options object received by the algorithm.\n * @param internalOptions - Additional private options.\n * @returns The output mask.\n */\nexport function maskToOutputMask(mask, options = {}, internalOptions = {}) {\n    const { out } = options;\n    const { newParameters, clone } = internalOptions;\n    if (out === undefined) {\n        if (clone) {\n            return mask.clone();\n        }\n        else {\n            return Mask.createFrom(mask, newParameters);\n        }\n    }\n    else {\n        if (!(out instanceof Mask)) {\n            throw new TypeError('out must be a Mask');\n        }\n        const requirements = {\n            width: mask.width,\n            height: mask.height,\n            bitDepth: 1,\n            colorModel: 'BINARY',\n        };\n        checkRequirements(requirements, out);\n        if (clone && mask !== out) {\n            copyData(mask, out);\n        }\n        return out;\n    }\n}\n//# sourceMappingURL=getOutputImage.js.map","import { getClampFromTo } from '../../utils/clamp.js';\n/**\n * Generate an array of colors to draw the keypoints depending on their score or the matches depending on the distance.\n * @param image - The source image.\n * @param baseColor - The desired shade for the colors.\n * @param options - Get score colors options.\n * @returns Array of colors.\n */\nexport function getColors(image, baseColor, options = {}) {\n    const { nbShades = 6, minValueFactor = 0.2 } = options;\n    const maxValue = Math.max(...baseColor);\n    const minValue = maxValue * minValueFactor;\n    const interval = Math.floor((maxValue - minValue) / (nbShades - 1));\n    const clamp = getClampFromTo(0, image.maxValue);\n    const colors = [];\n    for (let i = 0; i < nbShades; i++) {\n        const color = [];\n        for (const channel of baseColor) {\n            color.push(clamp(channel - i * interval));\n        }\n        colors.push(color);\n    }\n    return colors;\n}\n//# sourceMappingURL=getColors.js.map","/**\n * Get the shade the keypoint with given index should have (the color is an indicator\n * of the score). The keypoints should be sorted with highest score first.\n * @param keypoints - The sorted keypoints.\n * @param index - Index of the keypoint.\n * @param colors - The colors from which to pick (sorted from brightest to darkest).\n * @returns The color the keypoint should have.\n */\nexport function getKeypointColor(keypoints, index, colors) {\n    const maxScore = keypoints[0].score;\n    const minScore = keypoints.at(-1).score;\n    if (minScore === maxScore) {\n        return colors[0];\n    }\n    const score = keypoints[index].score;\n    const colorIndex = colors.length -\n        1 -\n        Math.floor(((colors.length - 1) * (score - minScore)) / (maxScore - minScore));\n    return colors[colorIndex];\n}\n//# sourceMappingURL=getKeypointColor.js.map","import { sum } from '../../utils/geometry/points.js';\nimport { getOutputImage } from '../../utils/getOutputImage.js';\nimport { getColors } from '../utils/getColors.js';\nimport { getKeypointColor } from '../utils/getKeypointColor.js';\n/**\n * Draw keypoints on an image.\n * @param image - The source image of the keypoints.\n * @param keypoints - The FAST keypoints.\n * @param options - Draw keypoints options.\n * @returns The image with the keypoints indicated by empty circles.\n */\nexport function drawKeypoints(image, keypoints, options = {}) {\n    const { markerSize = 10, fill = false, showScore = false, origin = { row: 0, column: 0 }, showScoreOptions, } = options;\n    let { maxNbKeypoints = keypoints.length } = options;\n    const { strokeColor = [255, 0, 0] } = options;\n    if (maxNbKeypoints > keypoints.length) {\n        maxNbKeypoints = keypoints.length;\n    }\n    let newImage = getOutputImage(image, options, { clone: true });\n    if (image.colorModel !== 'RGB') {\n        newImage = newImage.convertColor('RGB');\n    }\n    const colors = getColors(image, strokeColor, showScoreOptions);\n    const radius = Math.ceil(markerSize / 2);\n    for (let i = 0; i < maxNbKeypoints; i++) {\n        const keypoint = keypoints[i];\n        let keypointColor = strokeColor;\n        if (showScore) {\n            keypointColor = getKeypointColor(keypoints, i, colors);\n        }\n        const fillColor = fill ? keypointColor : undefined;\n        const absoluteOrigin = sum(keypoint.origin, origin);\n        newImage.drawCircle(absoluteOrigin, radius, {\n            fillColor,\n            strokeColor: keypointColor,\n            out: newImage,\n        });\n        if (isOrientedFastKeypoint(keypoint) &&\n            options.showOrientation) {\n            const angle = keypoint.angle;\n            const from = absoluteOrigin;\n            const radAngle = (angle * Math.PI) / 180;\n            const to = {\n                column: from.column + Math.round(radius * Math.cos(radAngle)),\n                row: from.row - Math.round(radius * Math.sin(radAngle)),\n            };\n            newImage.drawLine(from, to, {\n                strokeColor: keypointColor,\n                out: newImage,\n            });\n        }\n    }\n    return newImage;\n}\nfunction isOrientedFastKeypoint(kpt) {\n    return 'angle' in kpt && typeof kpt.angle === 'number';\n}\n//# sourceMappingURL=drawKeypoints.js.map","/**\n * Get the shade of the match with given index (the color is an indicator\n * of the distance). The matches should be sorted with smallest distance first.\n * @param matches - The sorted keypoints.\n * @param index - Index of the keypoint.\n * @param colors - The colors from which to pick (sorted from brightest to darkest).\n * @returns The color the keypoint should have.\n */\nexport function getMatchColor(matches, index, colors) {\n    const maxDistance = matches.at(-1).distance;\n    const minDistance = matches[0].distance;\n    if (minDistance === maxDistance) {\n        return colors[0];\n    }\n    const distance = matches[index].distance;\n    const colorIndex = Math.floor(((colors.length - 1) * (distance - minDistance)) /\n        (maxDistance - minDistance));\n    return colors[colorIndex];\n}\n//# sourceMappingURL=getMatchColor.js.map","/**\n * Source array of matches by ascending distance.\n * @param matches - Array of matches to sort.\n * @returns Sorted copy of the array of matches.\n */\nexport function sortByDistance(matches) {\n    const sorted = matches.slice();\n    sorted.sort((match1, match2) => {\n        return match1.distance - match2.distance;\n    });\n    return sorted;\n}\n//# sourceMappingURL=sortByDistance.js.map","/**\n * Scales the coordinates of the keypoints.\n * @param keypoints - Keypoints to scale.\n * @param scale - Scalar by which to multiply the coordinates.\n * @returns Scaled keypoints (copy of the original array).\n */\nexport function scaleKeypoints(keypoints, scale) {\n    if (scale === 1)\n        return keypoints.slice();\n    return keypoints.map((kpt) => {\n        return {\n            origin: {\n                row: kpt.origin.row * scale,\n                column: kpt.origin.column * scale,\n            },\n            score: kpt.score,\n        };\n    });\n}\n//# sourceMappingURL=scaleKeypoints.js.map","import { getColors } from '../utils/getColors.js';\nimport { getMatchColor } from '../utils/getMatchColor.js';\nimport { sortByDistance } from '../utils/sortByDistance.js';\nimport { scaleKeypoints } from './scaleKeypoints.js';\n/**\n * Draw the the matches between two images on their montage.\n * @param montage - The montage of two images to match.\n * @param matches - The matches between source and destination.\n * @param sourceKeypoints - Source keypoints.\n * @param destinationKeypoints - Destination keypoints.\n * @param options - Draw matches options.\n * @returns The comparison image.\n */\nexport function drawMatches(montage, matches, sourceKeypoints, destinationKeypoints, options = {}) {\n    const { circleDiameter = 10, strokeColor = [255, 0, 0], showDistance = false, showDistanceOptions, } = options;\n    let { maxNbMatches = matches.length } = options;\n    if (maxNbMatches > matches.length) {\n        maxNbMatches = matches.length;\n    }\n    const scaledSource = scaleKeypoints(sourceKeypoints, montage.scale);\n    const scaledDestination = scaleKeypoints(destinationKeypoints, montage.scale);\n    const result = montage.image;\n    const colors = getColors(result, strokeColor, showDistanceOptions);\n    const radius = Math.ceil(circleDiameter / 2);\n    const matchesSortedByDistance = sortByDistance(matches);\n    for (let i = 0; i < maxNbMatches; i++) {\n        let matchColor = strokeColor;\n        if (showDistance) {\n            matchColor = getMatchColor(matchesSortedByDistance, i, colors);\n        }\n        const sourcePoint = scaledSource[matches[i].sourceIndex].origin;\n        result.drawCircle(sourcePoint, radius, {\n            strokeColor: matchColor,\n            out: result,\n        });\n        const relativeDestinationPoint = scaledDestination[matches[i].destinationIndex].origin;\n        const destinationPoint = {\n            column: relativeDestinationPoint.column + montage.destinationOrigin.column,\n            row: relativeDestinationPoint.row + montage.destinationOrigin.row,\n        };\n        result.drawCircle(destinationPoint, radius, {\n            strokeColor: matchColor,\n            out: result,\n        });\n        result.drawLine(sourcePoint, destinationPoint, {\n            out: result,\n            strokeColor: matchColor,\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=drawMatches.js.map","import { Image } from '../../Image.js';\nimport { drawKeypoints } from './drawKeypoints.js';\nimport { drawMatches } from './drawMatches.js';\nimport { scaleKeypoints } from './scaleKeypoints.js';\nexport const MontageDisposition = {\n    HORIZONTAL: 'horizontal',\n    VERTICAL: 'vertical',\n};\nexport class Montage {\n    /**\n     * Scaled width of the first image.\n     */\n    sourceWidth;\n    /**\n     * Scaled height of the first image.\n     */\n    sourceHeight;\n    /**\n     * Scaled width of the second image.\n     */\n    destinationWidth;\n    /**\n     * Scaled height of the second image.\n     */\n    destinationHeight;\n    /**\n     * Origin of the destination / second image relative to top-left corner of the Montage.\n     */\n    destinationOrigin;\n    /**\n     * Width of the Montage.\n     */\n    width;\n    /**\n     * Height of the Montage.\n     */\n    height;\n    /**\n     * Factor by which to scale the images are scaled in the montage.\n     */\n    scale;\n    disposition;\n    /**\n     * Image of the Montage.\n     */\n    image;\n    /**\n     * Create a Montage of two images. The two images are placed side by side for comparison.\n     * @param source - First image.\n     * @param destination - Second image.\n     * @param options  - Montage options.\n     */\n    constructor(source, destination, options = {}) {\n        const { scale = 1, disposition = 'horizontal' } = options;\n        if (!Number.isInteger(scale)) {\n            throw new TypeError('scale must be an integer');\n        }\n        this.scale = scale;\n        this.disposition = disposition;\n        this.sourceWidth = scale * source.width;\n        this.destinationWidth = scale * destination.width;\n        this.sourceHeight = scale * source.height;\n        this.destinationHeight = scale * destination.height;\n        if (disposition === 'horizontal') {\n            this.destinationOrigin = { row: 0, column: this.sourceWidth };\n            this.width = this.sourceWidth + this.destinationWidth;\n            this.height = Math.max(this.sourceHeight, this.destinationHeight);\n        }\n        else if (disposition === 'vertical') {\n            this.destinationOrigin = { row: this.sourceHeight, column: 0 };\n            this.width = Math.max(this.sourceWidth, this.destinationWidth);\n            this.height = this.sourceHeight + this.destinationHeight;\n        }\n        else {\n            throw new RangeError(`invalid disposition type: ${disposition}`);\n        }\n        if (source.colorModel !== 'RGB') {\n            source = source.convertColor('RGB');\n        }\n        if (destination.colorModel !== 'RGB') {\n            destination = destination.convertColor('RGB');\n        }\n        const image = new Image(this.width, this.height);\n        source\n            .resize({ xFactor: scale, yFactor: scale })\n            .copyTo(image, { out: image });\n        destination.resize({ xFactor: scale, yFactor: scale }).copyTo(image, {\n            out: image,\n            origin: this.destinationOrigin,\n        });\n        this.image = image;\n    }\n    /**\n     * Draw keypoints on the Montage.\n     * @param keypoints - Keypoints to draw.\n     * @param options - Draw keypoints options.\n     */\n    drawKeypoints(keypoints, options = {}) {\n        const scaledKeypoints = scaleKeypoints(keypoints, this.scale);\n        this.image = drawKeypoints(this.image, scaledKeypoints, options);\n    }\n    /**\n     * Draw the matches between source and destination keypoints.\n     * @param matches - Matches to draw.\n     * @param sourceKeypoints - Source keypoints.\n     * @param destinationKeypoints  - Destination keypoints.\n     * @param options - Draw matches options.\n     */\n    drawMatches(matches, sourceKeypoints, destinationKeypoints, options = {}) {\n        this.image = drawMatches(this, matches, sourceKeypoints, destinationKeypoints, options);\n    }\n}\n//# sourceMappingURL=Montage.js.map","import { Image, ImageCoordinates } from '../../Image.js';\nimport { merge } from '../../operations/index.js';\nimport { ImageColorModel } from '../../utils/constants/colorModels.js';\n/**\n * Overlap two images and specify. The first image can be translated,\n * rotated and scaled to match the second one.\n * The first image is drawn in red and the second one in green.\n * @param image1 - First image.\n * @param image2 - Second image.\n * @param options - Overlap image options.\n * @returns The overlapping images.\n */\nexport function overlapImages(image1, image2, options = {}) {\n    const { origin = { row: 0, column: 0 }, angle = 0, scale = 1 } = options;\n    if (scale === 0) {\n        throw new Error('Scale cannot be 0');\n    }\n    if (image1.colorModel !== ImageColorModel.GREY) {\n        image1 = image1.grey();\n    }\n    if (image2.colorModel !== ImageColorModel.GREY) {\n        image2 = image2.grey();\n    }\n    const inverted1 = image1.invert();\n    const inverted2 = image2.invert();\n    const rotated = inverted1.transformRotate(angle, {\n        center: ImageCoordinates.TOP_LEFT,\n    });\n    const scaled = rotated.resize({ xFactor: scale, yFactor: scale });\n    const empty = Image.createFrom(inverted2);\n    const alignedGrey1 = scaled.copyTo(empty, { origin });\n    const result = merge([alignedGrey1, inverted2, empty]);\n    return result;\n}\n//# sourceMappingURL=overlapImages.js.map","/**\n * Use this function to only keep the match from source to destination with\n * the smallest distance (score) for each destination keypoint.\n * @param matches - Matches from source to destination.\n * @param sourceKeypoints - Source keypoints.\n * @param destinationKeypoints - Destination keypoints.\n * @param options - Filter smallest distance matches options.\n * @returns Only the matches from source to destination with the smallest distance.\n */\nexport function filterEuclideanDistance(matches, sourceKeypoints, destinationKeypoints, options = {}) {\n    const { origin = { column: 0, row: 0 } } = options;\n    const sorted = matches.slice();\n    sorted.sort((a, b) => a.destinationIndex - b.destinationIndex);\n    const result = [];\n    let sameDestMatches = [];\n    let currentIndex = sorted[0].destinationIndex;\n    for (const match of sorted) {\n        if (match.destinationIndex === currentIndex) {\n            sameDestMatches.push(match);\n        }\n        else {\n            sameDestMatches.sort((a, b) => distanceSquared(a) - distanceSquared(b));\n            result.push(...sameDestMatches.slice(0, 1));\n            currentIndex = match.destinationIndex;\n            sameDestMatches = [match];\n        }\n    }\n    sameDestMatches.sort((a, b) => distanceSquared(a) - distanceSquared(b));\n    result.push(...sameDestMatches.slice(0, 1));\n    return result;\n    function distanceSquared(match) {\n        return ((sourceKeypoints[match.sourceIndex].origin.row -\n            (destinationKeypoints[match.destinationIndex].origin.row -\n                origin.row)) **\n            2 +\n            (sourceKeypoints[match.sourceIndex].origin.column -\n                destinationKeypoints[match.destinationIndex].origin.column -\n                origin.column) **\n                2);\n    }\n}\n//# sourceMappingURL=filterEuclideanDistance.js.map","/**\n * Decode bytes to text\n * @param bytes - Bytes to decode\n * @param encoding - Text encoding\n * @returns The decoded text\n */\nexport function decode(bytes, encoding = 'utf8') {\n    const decoder = new TextDecoder(encoding);\n    return decoder.decode(bytes);\n}\nconst encoder = new TextEncoder();\n/**\n * Encode text to utf8\n * @param str - Text to encode\n * @returns The encoded bytes\n */\nexport function encode(str) {\n    return encoder.encode(str);\n}\n//# sourceMappingURL=text.js.map","import { decode, encode } from \"./text.js\";\nconst defaultByteLength = 1024 * 8;\nconst hostBigEndian = (() => {\n    const array = new Uint8Array(4);\n    const view = new Uint32Array(array.buffer);\n    return !((view[0] = 1) & array[0]);\n})();\nconst typedArrays = {\n    int8: globalThis.Int8Array,\n    uint8: globalThis.Uint8Array,\n    int16: globalThis.Int16Array,\n    uint16: globalThis.Uint16Array,\n    int32: globalThis.Int32Array,\n    uint32: globalThis.Uint32Array,\n    uint64: globalThis.BigUint64Array,\n    int64: globalThis.BigInt64Array,\n    float32: globalThis.Float32Array,\n    float64: globalThis.Float64Array,\n};\nexport class IOBuffer {\n    /**\n     * Reference to the internal ArrayBuffer object.\n     */\n    buffer;\n    /**\n     * Byte length of the internal ArrayBuffer.\n     */\n    byteLength;\n    /**\n     * Byte offset of the internal ArrayBuffer.\n     */\n    byteOffset;\n    /**\n     * Byte length of the internal ArrayBuffer.\n     */\n    length;\n    /**\n     * The current offset of the buffer's pointer.\n     */\n    offset;\n    lastWrittenByte;\n    littleEndian;\n    _data;\n    _mark;\n    _marks;\n    /**\n     * Create a new IOBuffer.\n     * @param data - The data to construct the IOBuffer with.\n     * If data is a number, it will be the new buffer's length<br>\n     * If data is `undefined`, the buffer will be initialized with a default length of 8Kb<br>\n     * If data is an ArrayBuffer, SharedArrayBuffer, an ArrayBufferView (Typed Array), an IOBuffer instance,\n     * or a Node.js Buffer, a view will be created over the underlying ArrayBuffer.\n     * @param options - An object for the options.\n     * @returns A new IOBuffer instance.\n     */\n    constructor(data = defaultByteLength, options = {}) {\n        let dataIsGiven = false;\n        if (typeof data === 'number') {\n            data = new ArrayBuffer(data);\n        }\n        else {\n            dataIsGiven = true;\n            this.lastWrittenByte = data.byteLength;\n        }\n        const offset = options.offset ? options.offset >>> 0 : 0;\n        const byteLength = data.byteLength - offset;\n        let dvOffset = offset;\n        if (ArrayBuffer.isView(data) || data instanceof IOBuffer) {\n            if (data.byteLength !== data.buffer.byteLength) {\n                dvOffset = data.byteOffset + offset;\n            }\n            data = data.buffer;\n        }\n        if (dataIsGiven) {\n            this.lastWrittenByte = byteLength;\n        }\n        else {\n            this.lastWrittenByte = 0;\n        }\n        this.buffer = data;\n        this.length = byteLength;\n        this.byteLength = byteLength;\n        this.byteOffset = dvOffset;\n        this.offset = 0;\n        this.littleEndian = true;\n        this._data = new DataView(this.buffer, dvOffset, byteLength);\n        this._mark = 0;\n        this._marks = [];\n    }\n    /**\n     * Checks if the memory allocated to the buffer is sufficient to store more\n     * bytes after the offset.\n     * @param byteLength - The needed memory in bytes.\n     * @returns `true` if there is sufficient space and `false` otherwise.\n     */\n    available(byteLength = 1) {\n        return this.offset + byteLength <= this.length;\n    }\n    /**\n     * Check if little-endian mode is used for reading and writing multi-byte\n     * values.\n     * @returns `true` if little-endian mode is used, `false` otherwise.\n     */\n    isLittleEndian() {\n        return this.littleEndian;\n    }\n    /**\n     * Set little-endian mode for reading and writing multi-byte values.\n     * @returns This.\n     */\n    setLittleEndian() {\n        this.littleEndian = true;\n        return this;\n    }\n    /**\n     * Check if big-endian mode is used for reading and writing multi-byte values.\n     * @returns `true` if big-endian mode is used, `false` otherwise.\n     */\n    isBigEndian() {\n        return !this.littleEndian;\n    }\n    /**\n     * Switches to big-endian mode for reading and writing multi-byte values.\n     * @returns This.\n     */\n    setBigEndian() {\n        this.littleEndian = false;\n        return this;\n    }\n    /**\n     * Move the pointer n bytes forward.\n     * @param n - Number of bytes to skip.\n     * @returns This.\n     */\n    skip(n = 1) {\n        this.offset += n;\n        return this;\n    }\n    /**\n     * Move the pointer n bytes backward.\n     * @param n - Number of bytes to move back.\n     * @returns This.\n     */\n    back(n = 1) {\n        this.offset -= n;\n        return this;\n    }\n    /**\n     * Move the pointer to the given offset.\n     * @param offset - The offset to move to.\n     * @returns This.\n     */\n    seek(offset) {\n        this.offset = offset;\n        return this;\n    }\n    /**\n     * Store the current pointer offset.\n     * @see {@link IOBuffer#reset}\n     * @returns This.\n     */\n    mark() {\n        this._mark = this.offset;\n        return this;\n    }\n    /**\n     * Move the pointer back to the last pointer offset set by mark.\n     * @see {@link IOBuffer#mark}\n     * @returns This.\n     */\n    reset() {\n        this.offset = this._mark;\n        return this;\n    }\n    /**\n     * Push the current pointer offset to the mark stack.\n     * @see {@link IOBuffer#popMark}\n     * @returns This.\n     */\n    pushMark() {\n        this._marks.push(this.offset);\n        return this;\n    }\n    /**\n     * Pop the last pointer offset from the mark stack, and set the current\n     * pointer offset to the popped value.\n     * @see {@link IOBuffer#pushMark}\n     * @returns This.\n     */\n    popMark() {\n        const offset = this._marks.pop();\n        if (offset === undefined) {\n            throw new Error('Mark stack empty');\n        }\n        this.seek(offset);\n        return this;\n    }\n    /**\n     * Move the pointer offset back to 0.\n     * @returns This.\n     */\n    rewind() {\n        this.offset = 0;\n        return this;\n    }\n    /**\n     * Make sure the buffer has sufficient memory to write a given byteLength at\n     * the current pointer offset.\n     * If the buffer's memory is insufficient, this method will create a new\n     * buffer (a copy) with a length that is twice (byteLength + current offset).\n     * @param byteLength - The needed memory in bytes.\n     * @returns This.\n     */\n    ensureAvailable(byteLength = 1) {\n        if (!this.available(byteLength)) {\n            const lengthNeeded = this.offset + byteLength;\n            const newLength = lengthNeeded * 2;\n            const newArray = new Uint8Array(newLength);\n            newArray.set(new Uint8Array(this.buffer));\n            this.buffer = newArray.buffer;\n            this.length = newLength;\n            this.byteLength = newLength;\n            this._data = new DataView(this.buffer);\n        }\n        return this;\n    }\n    /**\n     * Read a byte and return false if the byte's value is 0, or true otherwise.\n     * Moves pointer forward by one byte.\n     * @returns The read boolean.\n     */\n    readBoolean() {\n        return this.readUint8() !== 0;\n    }\n    /**\n     * Read a signed 8-bit integer and move pointer forward by 1 byte.\n     * @returns The read byte.\n     */\n    readInt8() {\n        return this._data.getInt8(this.offset++);\n    }\n    /**\n     * Read an unsigned 8-bit integer and move pointer forward by 1 byte.\n     * @returns The read byte.\n     */\n    readUint8() {\n        return this._data.getUint8(this.offset++);\n    }\n    /**\n     * Alias for {@link IOBuffer#readUint8}.\n     * @returns The read byte.\n     */\n    readByte() {\n        return this.readUint8();\n    }\n    /**\n     * Read `n` bytes and move pointer forward by `n` bytes.\n     * @param n - Number of bytes to read.\n     * @returns The read bytes.\n     */\n    readBytes(n = 1) {\n        return this.readArray(n, 'uint8');\n    }\n    /**\n     * Creates an array of corresponding to the type `type` and size `size`.\n     * For example, type `uint8` will create a `Uint8Array`.\n     * @param size - size of the resulting array\n     * @param type - number type of elements to read\n     * @returns The read array.\n     */\n    readArray(size, type) {\n        const bytes = typedArrays[type].BYTES_PER_ELEMENT * size;\n        const offset = this.byteOffset + this.offset;\n        const slice = this.buffer.slice(offset, offset + bytes);\n        if (this.littleEndian === hostBigEndian &&\n            type !== 'uint8' &&\n            type !== 'int8') {\n            const slice = new Uint8Array(this.buffer.slice(offset, offset + bytes));\n            slice.reverse();\n            const returnArray = new typedArrays[type](slice.buffer);\n            this.offset += bytes;\n            returnArray.reverse();\n            return returnArray;\n        }\n        const returnArray = new typedArrays[type](slice);\n        this.offset += bytes;\n        return returnArray;\n    }\n    /**\n     * Read a 16-bit signed integer and move pointer forward by 2 bytes.\n     * @returns The read value.\n     */\n    readInt16() {\n        const value = this._data.getInt16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n    /**\n     * Read a 16-bit unsigned integer and move pointer forward by 2 bytes.\n     * @returns The read value.\n     */\n    readUint16() {\n        const value = this._data.getUint16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    }\n    /**\n     * Read a 32-bit signed integer and move pointer forward by 4 bytes.\n     * @returns The read value.\n     */\n    readInt32() {\n        const value = this._data.getInt32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n    /**\n     * Read a 32-bit unsigned integer and move pointer forward by 4 bytes.\n     * @returns The read value.\n     */\n    readUint32() {\n        const value = this._data.getUint32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n    /**\n     * Read a 32-bit floating number and move pointer forward by 4 bytes.\n     * @returns The read value.\n     */\n    readFloat32() {\n        const value = this._data.getFloat32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    }\n    /**\n     * Read a 64-bit floating number and move pointer forward by 8 bytes.\n     * @returns The read value.\n     */\n    readFloat64() {\n        const value = this._data.getFloat64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n    /**\n     * Read a 64-bit signed integer number and move pointer forward by 8 bytes.\n     * @returns The read value.\n     */\n    readBigInt64() {\n        const value = this._data.getBigInt64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n    /**\n     * Read a 64-bit unsigned integer number and move pointer forward by 8 bytes.\n     * @returns The read value.\n     */\n    readBigUint64() {\n        const value = this._data.getBigUint64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    }\n    /**\n     * Read a 1-byte ASCII character and move pointer forward by 1 byte.\n     * @returns The read character.\n     */\n    readChar() {\n        // eslint-disable-next-line unicorn/prefer-code-point\n        return String.fromCharCode(this.readInt8());\n    }\n    /**\n     * Read `n` 1-byte ASCII characters and move pointer forward by `n` bytes.\n     * @param n - Number of characters to read.\n     * @returns The read characters.\n     */\n    readChars(n = 1) {\n        let result = '';\n        for (let i = 0; i < n; i++) {\n            result += this.readChar();\n        }\n        return result;\n    }\n    /**\n     * Read the next `n` bytes, return a UTF-8 decoded string and move pointer\n     * forward by `n` bytes.\n     * @param n - Number of bytes to read.\n     * @returns The decoded string.\n     */\n    readUtf8(n = 1) {\n        return decode(this.readBytes(n));\n    }\n    /**\n     * Read the next `n` bytes, return a string decoded with `encoding` and move pointer\n     * forward by `n` bytes.\n     * If no encoding is passed, the function is equivalent to @see {@link IOBuffer#readUtf8}\n     * @param n - Number of bytes to read.\n     * @param encoding - The encoding to use. Default is 'utf8'.\n     * @returns The decoded string.\n     */\n    decodeText(n = 1, encoding = 'utf8') {\n        return decode(this.readBytes(n), encoding);\n    }\n    /**\n     * Write 0xff if the passed value is truthy, 0x00 otherwise and move pointer\n     * forward by 1 byte.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeBoolean(value) {\n        this.writeUint8(value ? 0xff : 0x00);\n        return this;\n    }\n    /**\n     * Write `value` as an 8-bit signed integer and move pointer forward by 1 byte.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeInt8(value) {\n        this.ensureAvailable(1);\n        this._data.setInt8(this.offset++, value);\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as an 8-bit unsigned integer and move pointer forward by 1\n     * byte.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeUint8(value) {\n        this.ensureAvailable(1);\n        this._data.setUint8(this.offset++, value);\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * An alias for {@link IOBuffer#writeUint8}.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeByte(value) {\n        return this.writeUint8(value);\n    }\n    /**\n     * Write all elements of `bytes` as uint8 values and move pointer forward by\n     * `bytes.length` bytes.\n     * @param bytes - The array of bytes to write.\n     * @returns This.\n     */\n    writeBytes(bytes) {\n        this.ensureAvailable(bytes.length);\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for (let i = 0; i < bytes.length; i++) {\n            this._data.setUint8(this.offset++, bytes[i]);\n        }\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 16-bit signed integer and move pointer forward by 2\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeInt16(value) {\n        this.ensureAvailable(2);\n        this._data.setInt16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 16-bit unsigned integer and move pointer forward by 2\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeUint16(value) {\n        this.ensureAvailable(2);\n        this._data.setUint16(this.offset, value, this.littleEndian);\n        this.offset += 2;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 32-bit signed integer and move pointer forward by 4\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeInt32(value) {\n        this.ensureAvailable(4);\n        this._data.setInt32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 32-bit unsigned integer and move pointer forward by 4\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeUint32(value) {\n        this.ensureAvailable(4);\n        this._data.setUint32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 32-bit floating number and move pointer forward by 4\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeFloat32(value) {\n        this.ensureAvailable(4);\n        this._data.setFloat32(this.offset, value, this.littleEndian);\n        this.offset += 4;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 64-bit floating number and move pointer forward by 8\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeFloat64(value) {\n        this.ensureAvailable(8);\n        this._data.setFloat64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 64-bit signed bigint and move pointer forward by 8\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeBigInt64(value) {\n        this.ensureAvailable(8);\n        this._data.setBigInt64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write `value` as a 64-bit unsigned bigint and move pointer forward by 8\n     * bytes.\n     * @param value - The value to write.\n     * @returns This.\n     */\n    writeBigUint64(value) {\n        this.ensureAvailable(8);\n        this._data.setBigUint64(this.offset, value, this.littleEndian);\n        this.offset += 8;\n        this._updateLastWrittenByte();\n        return this;\n    }\n    /**\n     * Write the charCode of `str`'s first character as an 8-bit unsigned integer\n     * and move pointer forward by 1 byte.\n     * @param str - The character to write.\n     * @returns This.\n     */\n    writeChar(str) {\n        // eslint-disable-next-line unicorn/prefer-code-point\n        return this.writeUint8(str.charCodeAt(0));\n    }\n    /**\n     * Write the charCodes of all `str`'s characters as 8-bit unsigned integers\n     * and move pointer forward by `str.length` bytes.\n     * @param str - The characters to write.\n     * @returns This.\n     */\n    writeChars(str) {\n        for (let i = 0; i < str.length; i++) {\n            // eslint-disable-next-line unicorn/prefer-code-point\n            this.writeUint8(str.charCodeAt(i));\n        }\n        return this;\n    }\n    /**\n     * UTF-8 encode and write `str` to the current pointer offset and move pointer\n     * forward according to the encoded length.\n     * @param str - The string to write.\n     * @returns This.\n     */\n    writeUtf8(str) {\n        return this.writeBytes(encode(str));\n    }\n    /**\n     * Export a Uint8Array view of the internal buffer.\n     * The view starts at the byte offset and its length\n     * is calculated to stop at the last written byte or the original length.\n     * @returns A new Uint8Array view.\n     */\n    toArray() {\n        return new Uint8Array(this.buffer, this.byteOffset, this.lastWrittenByte);\n    }\n    /**\n     *  Get the total number of bytes written so far, regardless of the current offset.\n     * @returns - Total number of bytes.\n     */\n    getWrittenByteLength() {\n        return this.lastWrittenByte - this.byteOffset;\n    }\n    /**\n     * Update the last written byte offset\n     * @private\n     */\n    _updateLastWrittenByte() {\n        if (this.offset > this.lastWrittenByte) {\n            this.lastWrittenByte = this.offset;\n        }\n    }\n}\n//# sourceMappingURL=iobuffer.js.map","import { IOBuffer } from 'iobuffer';\nexport default class BMPDecoder {\n    bufferData;\n    pixelDataOffset;\n    width;\n    height;\n    bitsPerPixel;\n    xPixelsPerMeter;\n    yPixelsPerMeter;\n    compression;\n    colorMasks;\n    constructor(bufferData) {\n        this.bufferData = new IOBuffer(bufferData);\n        const formatCheck = this.bufferData.readBytes(2);\n        if (formatCheck[0] !== 0x42 && formatCheck[1] !== 0x4d) {\n            throw new Error('This is not a BMP image or the encoding is not correct.');\n        }\n        this.pixelDataOffset = this.bufferData.skip(8).readUint32();\n        this.width = this.bufferData.skip(4).readUint32();\n        this.height = this.bufferData.readUint32();\n        this.bitsPerPixel = this.bufferData.seek(28).readUint16();\n        if (this.bitsPerPixel !== 1 &&\n            this.bitsPerPixel !== 8 &&\n            this.bitsPerPixel !== 24 &&\n            this.bitsPerPixel !== 32) {\n            throw new Error(`Invalid number of bits per pixel. Supported number of bits per pixel: 1, 8, 24, 32. Received: ${this.bitsPerPixel}`);\n        }\n        this.compression = this.bufferData.readUint32();\n        if (this.compression !== 0 && this.compression !== 3) {\n            throw new Error(`Only BI_RGB and BI_BITFIELDS compression methods are allowed. `);\n        }\n        this.colorMasks = [\n            this.bufferData.seek(54).readUint32(),\n            this.bufferData.readUint32(),\n            this.bufferData.readUint32(),\n        ];\n        if (this.bitsPerPixel === 32 &&\n            (this.colorMasks[0] !== 0x00ff0000 ||\n                this.colorMasks[1] !== 0x0000ff00 ||\n                this.colorMasks[2] !== 0x000000ff)) {\n            throw new Error(`Unsupported color masks detected in 32-bit BMP image. Only standard RGBA (${(0x00ff0000).toString(16)}, ${(0x0000ff00).toString(16)}, ${(0x000000ff).toString(16)}) masks are supported. Received: ${this.colorMasks[0].toString(16)},${this.colorMasks[1].toString(16)},${this.colorMasks[2].toString(16)}.`);\n        }\n        this.bufferData.skip(1); // skipping image size.\n        this.xPixelsPerMeter = this.bufferData.seek(38).readInt32();\n        this.yPixelsPerMeter = this.bufferData.readInt32();\n        this.bufferData.skip(1);\n    }\n    decode() {\n        this.bufferData.seek(this.pixelDataOffset);\n        this.bufferData.setBigEndian();\n        const channels = Math.ceil(this.bitsPerPixel / 8);\n        const components = channels % 2 === 0 ? channels - 1 : channels;\n        const data = this.decodePixelData(channels, components);\n        return {\n            width: this.width,\n            height: this.height,\n            bitsPerPixel: this.bitsPerPixel,\n            compression: this.compression,\n            colorMasks: this.colorMasks,\n            channels,\n            components,\n            data,\n            yPixelsPerMeter: this.yPixelsPerMeter,\n            xPixelsPerMeter: this.xPixelsPerMeter,\n        };\n    }\n    decodePixelData(channels, components) {\n        const data = new Uint8Array(this.height * this.width * channels);\n        if (this.bitsPerPixel === 1) {\n            this.decodeBitDepth1Pixels(data);\n        }\n        else if (channels === components) {\n            this.decodeStandardPixels(data, channels);\n        }\n        else {\n            this.decodePixelsWithAlpha(data, channels, components);\n        }\n        return data;\n    }\n    decodeBitDepth1Pixels(data) {\n        let currentNumber = 0;\n        for (let row = 0; row < this.height; row++) {\n            for (let col = 0; col < this.width; col++) {\n                const bitIndex = col % 32;\n                if (bitIndex === 0) {\n                    currentNumber = this.bufferData.readUint32();\n                }\n                if (currentNumber & (1 << (31 - bitIndex))) {\n                    data[(this.height - row - 1) * this.width + col] = 1;\n                }\n            }\n        }\n    }\n    decodeStandardPixels(data, channels) {\n        const padding = this.calculatePadding(channels);\n        for (let row = 0; row < this.height; row++) {\n            const rowOffset = (this.height - row - 1) * this.width;\n            for (let col = 0; col < this.width; col++) {\n                for (let channel = channels - 1; channel >= 0; channel--) {\n                    data[(rowOffset + col) * channels + channel] =\n                        this.bufferData.readByte();\n                }\n            }\n            this.bufferData.skip(padding);\n        }\n    }\n    decodePixelsWithAlpha(data, channels, components) {\n        for (let row = 0; row < this.height; row++) {\n            const rowOffset = (this.height - row - 1) * this.width;\n            for (let col = 0; col < this.width; col++) {\n                const pixelBaseIndex = (rowOffset + col) * channels;\n                // Decode color components\n                for (let component = components - 1; component >= 0; component--) {\n                    data[pixelBaseIndex + component] = this.bufferData.readByte();\n                }\n                // Decode alpha channel\n                data[pixelBaseIndex + components] = this.bufferData.readByte();\n            }\n        }\n    }\n    calculatePadding(channels) {\n        return (this.width * channels) % 4 === 0\n            ? 0\n            : 4 - ((this.width * channels) % 4);\n    }\n}\n//# sourceMappingURL=bmp_decoder.js.map","export const BITMAPV5HEADER = {\n    LogicalColorSpace: {\n        // https://msdn.microsoft.com/en-us/library/cc250396.aspx\n        LCS_CALIBRATED_RGB: 0x00000000,\n        LCS_sRGB: 0x73524742, // eslint-disable-line camelcase\n        LCS_WINDOWS_COLOR_SPACE: 0x57696e20,\n    },\n    Compression: {\n        // https://msdn.microsoft.com/en-us/library/cc250415.aspx\n        BI_RGB: 0x0000, // No compression\n        BI_RLE8: 0x0001,\n        BI_RLE4: 0x0002,\n        BI_BITFIELDS: 0x0003,\n        BI_JPEG: 0x0004,\n        BI_PNG: 0x0005,\n        BI_CMYK: 0x000b,\n        BI_CMYKRLE8: 0x000c,\n        BI_CMYKRLE4: 0x000d,\n    },\n    GamutMappingIntent: {\n        // https://msdn.microsoft.com/en-us/library/cc250392.aspx\n        LCS_GM_ABS_COLORIMETRIC: 0x00000008,\n        LCS_GM_BUSINESS: 0x00000001,\n        LCS_GM_GRAPHICS: 0x00000002,\n        LCS_GM_IMAGES: 0x00000004,\n    },\n    // legacy resolution (72 dpi)\n    DEFAULT_PIXELS_PER_METER: 2835,\n};\n//# sourceMappingURL=constants.js.map","import { IOBuffer } from 'iobuffer';\nimport { BITMAPV5HEADER } from \"./constants.js\";\nexport default class BMPEncoder {\n    width;\n    height;\n    bitsPerPixel;\n    channels;\n    components;\n    data;\n    xPixelsPerMeter;\n    yPixelsPerMeter;\n    encoded = new IOBuffer();\n    compression;\n    colorMasks;\n    constructor(data) {\n        if (!data.height || !data.width) {\n            throw new Error('ImageData width and height are required.');\n        }\n        this.data = data.data;\n        this.width = data.width;\n        this.height = data.height;\n        if (this.data.length !== data.width * data.height * data.channels) {\n            throw new Error('Invalid data length.');\n        }\n        this.bitsPerPixel = data.bitsPerPixel;\n        if (this.bitsPerPixel !== 1 &&\n            this.bitsPerPixel !== 8 &&\n            this.bitsPerPixel !== 24 &&\n            this.bitsPerPixel !== 32) {\n            throw new Error(`Invalid number of bits per pixel. Supported number of bits per pixel: 1, 8, 24, 32. Received: ${this.bitsPerPixel}`);\n        }\n        this.channels = data.channels;\n        this.components =\n            this.channels % 2 === 0 ? this.channels - 1 : this.channels;\n        this.xPixelsPerMeter =\n            data.xPixelsPerMeter ?? BITMAPV5HEADER.DEFAULT_PIXELS_PER_METER;\n        this.yPixelsPerMeter =\n            data.yPixelsPerMeter ?? BITMAPV5HEADER.DEFAULT_PIXELS_PER_METER;\n        this.compression = data.compression ?? 0;\n        this.colorMasks = data.colorMasks ?? [\n            0x00ff0000, 0x0000ff00, 0x000000ff,\n        ];\n    }\n    encode() {\n        this.encoded = new IOBuffer();\n        this.encoded.skip(14);\n        this.writeBitmapV5Header();\n        if (this.bitsPerPixel <= 8) {\n            this.writeColorTable();\n        }\n        const offset = this.encoded.offset;\n        this.writePixelArray();\n        const imageSize = this.encoded.getWrittenByteLength();\n        this.encoded.rewind();\n        this.writeBitmapFileHeader(offset, imageSize);\n        return this.encoded.toArray();\n    }\n    writePixelArray() {\n        this.encoded.setBigEndian();\n        if (this.bitsPerPixel === 1) {\n            this.writeBitDepth1Pixels();\n        }\n        else if (this.channels === this.components) {\n            this.writeStandardPixels();\n        }\n        else {\n            this.writePixelsWithAlpha();\n        }\n        this.encoded.setLittleEndian();\n    }\n    writeBitDepth1Pixels() {\n        let byte = 0;\n        for (let row = this.height - 1; row >= 0; row--) {\n            for (let col = 0; col < this.width; col++) {\n                if (col % 32 === 0 && col !== 0) {\n                    this.encoded.writeUint32(byte);\n                    byte = 0;\n                }\n                byte |= this.data[row * this.width + col] << (31 - (col % 32));\n            }\n            this.encoded.writeUint32(byte);\n            byte = 0;\n        }\n    }\n    writeStandardPixels() {\n        for (let row = 0; row < this.height; row++) {\n            const rowOffset = this.width * (this.height - row - 1) * this.channels;\n            for (let col = 0; col < this.width; col++) {\n                for (let channel = this.channels - 1; channel >= 0; channel--) {\n                    this.encoded.writeByte(this.data[rowOffset + col * this.channels + channel]);\n                }\n            }\n            this.writePadding();\n        }\n    }\n    writePixelsWithAlpha() {\n        const pixel = 0;\n        for (let row = 0; row < this.height; row++) {\n            const rowOffset = this.width * (this.height - row - 1);\n            for (let col = 0; col < this.width; col++) {\n                const pixelIndex = (rowOffset + col) * this.channels;\n                this.encoded.writeUint32(pixel |\n                    (this.data[pixelIndex + 2] << (3 * 8)) |\n                    (this.data[pixelIndex + 1] << (2 * 8)) |\n                    (this.data[pixelIndex] << 8) |\n                    this.data[pixelIndex + 3]);\n            }\n        }\n    }\n    writePadding() {\n        const padding = (this.width * this.channels) % 4 === 0\n            ? 0\n            : 4 - ((this.width * this.channels) % 4);\n        for (let i = 0; i < padding; i++) {\n            this.encoded.writeByte(0);\n        }\n    }\n    writeColorTable() {\n        if (this.bitsPerPixel === 1) {\n            this.encoded\n                .writeUint32(0x00000000) // black\n                .writeUint32(0x00ffffff); // white\n        }\n        else {\n            //Grayscale 8 bit\n            for (let i = 0; i < 256; i++) {\n                this.encoded.writeUint32(0x00000000 | (i << (4 * 4)) | (i << (2 * 4)) | i);\n            }\n        }\n    }\n    writeBitmapFileHeader(imageOffset, fileSize) {\n        this.encoded\n            .writeChars('BM') // 14 bytes bitmap file header\n            .writeInt32(fileSize) // Size of BMP file in bytes\n            .writeUint16(0)\n            .writeUint16(0)\n            .writeUint32(imageOffset);\n    }\n    writeBitmapV5Header() {\n        const rowSize = Math.floor((this.bitsPerPixel * this.width + 31) / 32) * 4;\n        const totalBytes = rowSize * this.height;\n        // Size of the header\n        this.encoded\n            .writeUint32(124) // Header size, offset 14\n            .writeInt32(this.width) // bV5Width, offset 18\n            .writeInt32(this.height) // bV5Height, offset 22\n            .writeUint16(1) // bv5Planes - must be set to 1, offset 26\n            .writeUint16(this.bitsPerPixel) // bV5BitCount, offset 30\n            .writeUint32(this.compression) // bV5Compression - No compression, offset 34\n            .writeUint32(totalBytes) // bv5SizeImage - size of pixel buffer (can be 0 if uncompressed), offset 38\n            .writeInt32(this.xPixelsPerMeter) // bV5XPelsPerMeter - resolution, offset 42\n            .writeInt32(this.yPixelsPerMeter) // bV5YPelsPerMeter - resolution, offset 46\n            .writeUint32(this.bitsPerPixel <= 8 ? 2 ** this.bitsPerPixel : 0) // number of colors used, set to 0 if number of pixels is bigger than 8 set to 0, offset 50\n            .writeUint32(this.bitsPerPixel <= 8 ? 2 ** this.bitsPerPixel : 0); // number of important colors, set to 0 if number of pixels is bigger than 8 set to 0,  offset 54\n        if (this.bitsPerPixel === 32 &&\n            (this.colorMasks[0] !== 0x00ff0000 ||\n                this.colorMasks[1] !== 0x0000ff00 ||\n                this.colorMasks[2] !== 0x000000ff)) {\n            throw new Error(`Unsupported color masks detected in 32-bit BMP image. Only standard RGBA (${(0x00ff0000).toString(16)}, ${(0x0000ff00).toString(16)}, ${(0x000000ff).toString(16)}) masks are supported. Received: ${this.colorMasks[0].toString(16)},${this.colorMasks[1].toString(16)},${this.colorMasks[2].toString(16)}.`);\n        }\n        this.encoded\n            .writeUint32(this.colorMasks[0]) // bV5RedMask, offset 58\n            .writeUint32(this.colorMasks[1]) // bV5GreenMask, offset 62\n            .writeUint32(this.colorMasks[2]) // bV5BlueMask, offset 66\n            .writeUint32(this.channels === this.components ? 0x00000000 : 0xff000000) // bv5ReservedData\n            .writeUint32(BITMAPV5HEADER.LogicalColorSpace.LCS_sRGB)\n            .skip(36) // bV5Endpoints\n            .skip(12) // bV5GammaRed, Green, Blue\n            .writeUint32(BITMAPV5HEADER.GamutMappingIntent.LCS_GM_GRAPHICS)\n            .skip(12); // ProfileData, ProfileSize, Reserved\n    }\n}\n//# sourceMappingURL=bmp_encoder.js.map","import Decoder from \"./bmp_decoder.js\";\nimport Encoder from \"./bmp_encoder.js\";\n/**\n * Encodes data into BMP format.\n * @param data - Data for encoding.\n * @returns typed array buffer.\n */\nexport function encode(data) {\n    const encoder = new Encoder(data);\n    return encoder.encode();\n}\n/**\n * Decodes BMP format image into data.\n * @param data - Buffer with image data.\n * @returns - Decoded data.\n */\nexport function decode(data) {\n    const decoder = new Decoder(data);\n    return decoder.decode();\n}\n//# sourceMappingURL=index.js.map","import * as bmp from 'fast-bmp';\nimport { Image } from '../Image.js';\n/**\n * Creates a BMP buffer from a mask.\n * @param image - The mask instance.\n * @returns The buffer.\n */\nexport function encodeBmp(image) {\n    if (image instanceof Image) {\n        return bmp.encode({\n            width: image.width,\n            height: image.height,\n            components: image.components,\n            bitsPerPixel: image.channels * image.bitDepth,\n            channels: image.channels,\n            data: image.getRawImage().data,\n        });\n    }\n    else {\n        return bmp.encode({\n            width: image.width,\n            height: image.height,\n            components: 1,\n            bitsPerPixel: 1,\n            channels: 1,\n            data: image.getRawImage().data,\n        });\n    }\n}\n//# sourceMappingURL=encodeBmp.js.map","/*\n  Copyright (c) 2008, Adobe Systems Incorporated\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without \n  modification, are permitted provided that the following conditions are\n  met:\n\n  * Redistributions of source code must retain the above copyright notice, \n    this list of conditions and the following disclaimer.\n  \n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the \n    documentation and/or other materials provided with the distribution.\n  \n  * Neither the name of Adobe Systems Incorporated nor the names of its \n    contributors may be used to endorse or promote products derived from \n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR \n  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/*\nJPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009\n\nBasic GUI blocking jpeg encoder\n*/\n\nvar btoa = btoa || function(buf) {\n  return Buffer.from(buf).toString('base64');\n};\n\nfunction JPEGEncoder(quality) {\n  var self = this;\n\tvar fround = Math.round;\n\tvar ffloor = Math.floor;\n\tvar YTable = new Array(64);\n\tvar UVTable = new Array(64);\n\tvar fdtbl_Y = new Array(64);\n\tvar fdtbl_UV = new Array(64);\n\tvar YDC_HT;\n\tvar UVDC_HT;\n\tvar YAC_HT;\n\tvar UVAC_HT;\n\t\n\tvar bitcode = new Array(65535);\n\tvar category = new Array(65535);\n\tvar outputfDCTQuant = new Array(64);\n\tvar DU = new Array(64);\n\tvar byteout = [];\n\tvar bytenew = 0;\n\tvar bytepos = 7;\n\t\n\tvar YDU = new Array(64);\n\tvar UDU = new Array(64);\n\tvar VDU = new Array(64);\n\tvar clt = new Array(256);\n\tvar RGB_YUV_TABLE = new Array(2048);\n\tvar currentQuality;\n\t\n\tvar ZigZag = [\n\t\t\t 0, 1, 5, 6,14,15,27,28,\n\t\t\t 2, 4, 7,13,16,26,29,42,\n\t\t\t 3, 8,12,17,25,30,41,43,\n\t\t\t 9,11,18,24,31,40,44,53,\n\t\t\t10,19,23,32,39,45,52,54,\n\t\t\t20,22,33,38,46,51,55,60,\n\t\t\t21,34,37,47,50,56,59,61,\n\t\t\t35,36,48,49,57,58,62,63\n\t\t];\n\t\n\tvar std_dc_luminance_nrcodes = [0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0];\n\tvar std_dc_luminance_values = [0,1,2,3,4,5,6,7,8,9,10,11];\n\tvar std_ac_luminance_nrcodes = [0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,0x7d];\n\tvar std_ac_luminance_values = [\n\t\t\t0x01,0x02,0x03,0x00,0x04,0x11,0x05,0x12,\n\t\t\t0x21,0x31,0x41,0x06,0x13,0x51,0x61,0x07,\n\t\t\t0x22,0x71,0x14,0x32,0x81,0x91,0xa1,0x08,\n\t\t\t0x23,0x42,0xb1,0xc1,0x15,0x52,0xd1,0xf0,\n\t\t\t0x24,0x33,0x62,0x72,0x82,0x09,0x0a,0x16,\n\t\t\t0x17,0x18,0x19,0x1a,0x25,0x26,0x27,0x28,\n\t\t\t0x29,0x2a,0x34,0x35,0x36,0x37,0x38,0x39,\n\t\t\t0x3a,0x43,0x44,0x45,0x46,0x47,0x48,0x49,\n\t\t\t0x4a,0x53,0x54,0x55,0x56,0x57,0x58,0x59,\n\t\t\t0x5a,0x63,0x64,0x65,0x66,0x67,0x68,0x69,\n\t\t\t0x6a,0x73,0x74,0x75,0x76,0x77,0x78,0x79,\n\t\t\t0x7a,0x83,0x84,0x85,0x86,0x87,0x88,0x89,\n\t\t\t0x8a,0x92,0x93,0x94,0x95,0x96,0x97,0x98,\n\t\t\t0x99,0x9a,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,\n\t\t\t0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,0xb5,0xb6,\n\t\t\t0xb7,0xb8,0xb9,0xba,0xc2,0xc3,0xc4,0xc5,\n\t\t\t0xc6,0xc7,0xc8,0xc9,0xca,0xd2,0xd3,0xd4,\n\t\t\t0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xe1,0xe2,\n\t\t\t0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,\n\t\t\t0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,\n\t\t\t0xf9,0xfa\n\t\t];\n\t\n\tvar std_dc_chrominance_nrcodes = [0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0];\n\tvar std_dc_chrominance_values = [0,1,2,3,4,5,6,7,8,9,10,11];\n\tvar std_ac_chrominance_nrcodes = [0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,0x77];\n\tvar std_ac_chrominance_values = [\n\t\t\t0x00,0x01,0x02,0x03,0x11,0x04,0x05,0x21,\n\t\t\t0x31,0x06,0x12,0x41,0x51,0x07,0x61,0x71,\n\t\t\t0x13,0x22,0x32,0x81,0x08,0x14,0x42,0x91,\n\t\t\t0xa1,0xb1,0xc1,0x09,0x23,0x33,0x52,0xf0,\n\t\t\t0x15,0x62,0x72,0xd1,0x0a,0x16,0x24,0x34,\n\t\t\t0xe1,0x25,0xf1,0x17,0x18,0x19,0x1a,0x26,\n\t\t\t0x27,0x28,0x29,0x2a,0x35,0x36,0x37,0x38,\n\t\t\t0x39,0x3a,0x43,0x44,0x45,0x46,0x47,0x48,\n\t\t\t0x49,0x4a,0x53,0x54,0x55,0x56,0x57,0x58,\n\t\t\t0x59,0x5a,0x63,0x64,0x65,0x66,0x67,0x68,\n\t\t\t0x69,0x6a,0x73,0x74,0x75,0x76,0x77,0x78,\n\t\t\t0x79,0x7a,0x82,0x83,0x84,0x85,0x86,0x87,\n\t\t\t0x88,0x89,0x8a,0x92,0x93,0x94,0x95,0x96,\n\t\t\t0x97,0x98,0x99,0x9a,0xa2,0xa3,0xa4,0xa5,\n\t\t\t0xa6,0xa7,0xa8,0xa9,0xaa,0xb2,0xb3,0xb4,\n\t\t\t0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xc2,0xc3,\n\t\t\t0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xd2,\n\t\t\t0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,\n\t\t\t0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,\n\t\t\t0xea,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,\n\t\t\t0xf9,0xfa\n\t\t];\n\t\n\tfunction initQuantTables(sf){\n\t\t\tvar YQT = [\n\t\t\t\t16, 11, 10, 16, 24, 40, 51, 61,\n\t\t\t\t12, 12, 14, 19, 26, 58, 60, 55,\n\t\t\t\t14, 13, 16, 24, 40, 57, 69, 56,\n\t\t\t\t14, 17, 22, 29, 51, 87, 80, 62,\n\t\t\t\t18, 22, 37, 56, 68,109,103, 77,\n\t\t\t\t24, 35, 55, 64, 81,104,113, 92,\n\t\t\t\t49, 64, 78, 87,103,121,120,101,\n\t\t\t\t72, 92, 95, 98,112,100,103, 99\n\t\t\t];\n\t\t\t\n\t\t\tfor (var i = 0; i < 64; i++) {\n\t\t\t\tvar t = ffloor((YQT[i]*sf+50)/100);\n\t\t\t\tif (t < 1) {\n\t\t\t\t\tt = 1;\n\t\t\t\t} else if (t > 255) {\n\t\t\t\t\tt = 255;\n\t\t\t\t}\n\t\t\t\tYTable[ZigZag[i]] = t;\n\t\t\t}\n\t\t\tvar UVQT = [\n\t\t\t\t17, 18, 24, 47, 99, 99, 99, 99,\n\t\t\t\t18, 21, 26, 66, 99, 99, 99, 99,\n\t\t\t\t24, 26, 56, 99, 99, 99, 99, 99,\n\t\t\t\t47, 66, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99,\n\t\t\t\t99, 99, 99, 99, 99, 99, 99, 99\n\t\t\t];\n\t\t\tfor (var j = 0; j < 64; j++) {\n\t\t\t\tvar u = ffloor((UVQT[j]*sf+50)/100);\n\t\t\t\tif (u < 1) {\n\t\t\t\t\tu = 1;\n\t\t\t\t} else if (u > 255) {\n\t\t\t\t\tu = 255;\n\t\t\t\t}\n\t\t\t\tUVTable[ZigZag[j]] = u;\n\t\t\t}\n\t\t\tvar aasf = [\n\t\t\t\t1.0, 1.387039845, 1.306562965, 1.175875602,\n\t\t\t\t1.0, 0.785694958, 0.541196100, 0.275899379\n\t\t\t];\n\t\t\tvar k = 0;\n\t\t\tfor (var row = 0; row < 8; row++)\n\t\t\t{\n\t\t\t\tfor (var col = 0; col < 8; col++)\n\t\t\t\t{\n\t\t\t\t\tfdtbl_Y[k]  = (1.0 / (YTable [ZigZag[k]] * aasf[row] * aasf[col] * 8.0));\n\t\t\t\t\tfdtbl_UV[k] = (1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0));\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction computeHuffmanTbl(nrcodes, std_table){\n\t\t\tvar codevalue = 0;\n\t\t\tvar pos_in_table = 0;\n\t\t\tvar HT = new Array();\n\t\t\tfor (var k = 1; k <= 16; k++) {\n\t\t\t\tfor (var j = 1; j <= nrcodes[k]; j++) {\n\t\t\t\t\tHT[std_table[pos_in_table]] = [];\n\t\t\t\t\tHT[std_table[pos_in_table]][0] = codevalue;\n\t\t\t\t\tHT[std_table[pos_in_table]][1] = k;\n\t\t\t\t\tpos_in_table++;\n\t\t\t\t\tcodevalue++;\n\t\t\t\t}\n\t\t\t\tcodevalue*=2;\n\t\t\t}\n\t\t\treturn HT;\n\t\t}\n\t\t\n\t\tfunction initHuffmanTbl()\n\t\t{\n\t\t\tYDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes,std_dc_luminance_values);\n\t\t\tUVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes,std_dc_chrominance_values);\n\t\t\tYAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes,std_ac_luminance_values);\n\t\t\tUVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes,std_ac_chrominance_values);\n\t\t}\n\t\n\t\tfunction initCategoryNumber()\n\t\t{\n\t\t\tvar nrlower = 1;\n\t\t\tvar nrupper = 2;\n\t\t\tfor (var cat = 1; cat <= 15; cat++) {\n\t\t\t\t//Positive numbers\n\t\t\t\tfor (var nr = nrlower; nr<nrupper; nr++) {\n\t\t\t\t\tcategory[32767+nr] = cat;\n\t\t\t\t\tbitcode[32767+nr] = [];\n\t\t\t\t\tbitcode[32767+nr][1] = cat;\n\t\t\t\t\tbitcode[32767+nr][0] = nr;\n\t\t\t\t}\n\t\t\t\t//Negative numbers\n\t\t\t\tfor (var nrneg =-(nrupper-1); nrneg<=-nrlower; nrneg++) {\n\t\t\t\t\tcategory[32767+nrneg] = cat;\n\t\t\t\t\tbitcode[32767+nrneg] = [];\n\t\t\t\t\tbitcode[32767+nrneg][1] = cat;\n\t\t\t\t\tbitcode[32767+nrneg][0] = nrupper-1+nrneg;\n\t\t\t\t}\n\t\t\t\tnrlower <<= 1;\n\t\t\t\tnrupper <<= 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction initRGBYUVTable() {\n\t\t\tfor(var i = 0; i < 256;i++) {\n\t\t\t\tRGB_YUV_TABLE[i]      \t\t=  19595 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+ 256)>>0] \t=  38470 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+ 512)>>0] \t=   7471 * i + 0x8000;\n\t\t\t\tRGB_YUV_TABLE[(i+ 768)>>0] \t= -11059 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+1024)>>0] \t= -21709 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+1280)>>0] \t=  32768 * i + 0x807FFF;\n\t\t\t\tRGB_YUV_TABLE[(i+1536)>>0] \t= -27439 * i;\n\t\t\t\tRGB_YUV_TABLE[(i+1792)>>0] \t= - 5329 * i;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// IO functions\n\t\tfunction writeBits(bs)\n\t\t{\n\t\t\tvar value = bs[0];\n\t\t\tvar posval = bs[1]-1;\n\t\t\twhile ( posval >= 0 ) {\n\t\t\t\tif (value & (1 << posval) ) {\n\t\t\t\t\tbytenew |= (1 << bytepos);\n\t\t\t\t}\n\t\t\t\tposval--;\n\t\t\t\tbytepos--;\n\t\t\t\tif (bytepos < 0) {\n\t\t\t\t\tif (bytenew == 0xFF) {\n\t\t\t\t\t\twriteByte(0xFF);\n\t\t\t\t\t\twriteByte(0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\twriteByte(bytenew);\n\t\t\t\t\t}\n\t\t\t\t\tbytepos=7;\n\t\t\t\t\tbytenew=0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction writeByte(value)\n\t\t{\n\t\t\t//byteout.push(clt[value]); // write char directly instead of converting later\n      byteout.push(value);\n\t\t}\n\t\n\t\tfunction writeWord(value)\n\t\t{\n\t\t\twriteByte((value>>8)&0xFF);\n\t\t\twriteByte((value   )&0xFF);\n\t\t}\n\t\t\n\t\t// DCT & quantization core\n\t\tfunction fDCTQuant(data, fdtbl)\n\t\t{\n\t\t\tvar d0, d1, d2, d3, d4, d5, d6, d7;\n\t\t\t/* Pass 1: process rows. */\n\t\t\tvar dataOff=0;\n\t\t\tvar i;\n\t\t\tvar I8 = 8;\n\t\t\tvar I64 = 64;\n\t\t\tfor (i=0; i<I8; ++i)\n\t\t\t{\n\t\t\t\td0 = data[dataOff];\n\t\t\t\td1 = data[dataOff+1];\n\t\t\t\td2 = data[dataOff+2];\n\t\t\t\td3 = data[dataOff+3];\n\t\t\t\td4 = data[dataOff+4];\n\t\t\t\td5 = data[dataOff+5];\n\t\t\t\td6 = data[dataOff+6];\n\t\t\t\td7 = data[dataOff+7];\n\t\t\t\t\n\t\t\t\tvar tmp0 = d0 + d7;\n\t\t\t\tvar tmp7 = d0 - d7;\n\t\t\t\tvar tmp1 = d1 + d6;\n\t\t\t\tvar tmp6 = d1 - d6;\n\t\t\t\tvar tmp2 = d2 + d5;\n\t\t\t\tvar tmp5 = d2 - d5;\n\t\t\t\tvar tmp3 = d3 + d4;\n\t\t\t\tvar tmp4 = d3 - d4;\n\t\n\t\t\t\t/* Even part */\n\t\t\t\tvar tmp10 = tmp0 + tmp3;\t/* phase 2 */\n\t\t\t\tvar tmp13 = tmp0 - tmp3;\n\t\t\t\tvar tmp11 = tmp1 + tmp2;\n\t\t\t\tvar tmp12 = tmp1 - tmp2;\n\t\n\t\t\t\tdata[dataOff] = tmp10 + tmp11; /* phase 3 */\n\t\t\t\tdata[dataOff+4] = tmp10 - tmp11;\n\t\n\t\t\t\tvar z1 = (tmp12 + tmp13) * 0.707106781; /* c4 */\n\t\t\t\tdata[dataOff+2] = tmp13 + z1; /* phase 5 */\n\t\t\t\tdata[dataOff+6] = tmp13 - z1;\n\t\n\t\t\t\t/* Odd part */\n\t\t\t\ttmp10 = tmp4 + tmp5; /* phase 2 */\n\t\t\t\ttmp11 = tmp5 + tmp6;\n\t\t\t\ttmp12 = tmp6 + tmp7;\n\t\n\t\t\t\t/* The rotator is modified from fig 4-8 to avoid extra negations. */\n\t\t\t\tvar z5 = (tmp10 - tmp12) * 0.382683433; /* c6 */\n\t\t\t\tvar z2 = 0.541196100 * tmp10 + z5; /* c2-c6 */\n\t\t\t\tvar z4 = 1.306562965 * tmp12 + z5; /* c2+c6 */\n\t\t\t\tvar z3 = tmp11 * 0.707106781; /* c4 */\n\t\n\t\t\t\tvar z11 = tmp7 + z3;\t/* phase 5 */\n\t\t\t\tvar z13 = tmp7 - z3;\n\t\n\t\t\t\tdata[dataOff+5] = z13 + z2;\t/* phase 6 */\n\t\t\t\tdata[dataOff+3] = z13 - z2;\n\t\t\t\tdata[dataOff+1] = z11 + z4;\n\t\t\t\tdata[dataOff+7] = z11 - z4;\n\t\n\t\t\t\tdataOff += 8; /* advance pointer to next row */\n\t\t\t}\n\t\n\t\t\t/* Pass 2: process columns. */\n\t\t\tdataOff = 0;\n\t\t\tfor (i=0; i<I8; ++i)\n\t\t\t{\n\t\t\t\td0 = data[dataOff];\n\t\t\t\td1 = data[dataOff + 8];\n\t\t\t\td2 = data[dataOff + 16];\n\t\t\t\td3 = data[dataOff + 24];\n\t\t\t\td4 = data[dataOff + 32];\n\t\t\t\td5 = data[dataOff + 40];\n\t\t\t\td6 = data[dataOff + 48];\n\t\t\t\td7 = data[dataOff + 56];\n\t\t\t\t\n\t\t\t\tvar tmp0p2 = d0 + d7;\n\t\t\t\tvar tmp7p2 = d0 - d7;\n\t\t\t\tvar tmp1p2 = d1 + d6;\n\t\t\t\tvar tmp6p2 = d1 - d6;\n\t\t\t\tvar tmp2p2 = d2 + d5;\n\t\t\t\tvar tmp5p2 = d2 - d5;\n\t\t\t\tvar tmp3p2 = d3 + d4;\n\t\t\t\tvar tmp4p2 = d3 - d4;\n\t\n\t\t\t\t/* Even part */\n\t\t\t\tvar tmp10p2 = tmp0p2 + tmp3p2;\t/* phase 2 */\n\t\t\t\tvar tmp13p2 = tmp0p2 - tmp3p2;\n\t\t\t\tvar tmp11p2 = tmp1p2 + tmp2p2;\n\t\t\t\tvar tmp12p2 = tmp1p2 - tmp2p2;\n\t\n\t\t\t\tdata[dataOff] = tmp10p2 + tmp11p2; /* phase 3 */\n\t\t\t\tdata[dataOff+32] = tmp10p2 - tmp11p2;\n\t\n\t\t\t\tvar z1p2 = (tmp12p2 + tmp13p2) * 0.707106781; /* c4 */\n\t\t\t\tdata[dataOff+16] = tmp13p2 + z1p2; /* phase 5 */\n\t\t\t\tdata[dataOff+48] = tmp13p2 - z1p2;\n\t\n\t\t\t\t/* Odd part */\n\t\t\t\ttmp10p2 = tmp4p2 + tmp5p2; /* phase 2 */\n\t\t\t\ttmp11p2 = tmp5p2 + tmp6p2;\n\t\t\t\ttmp12p2 = tmp6p2 + tmp7p2;\n\t\n\t\t\t\t/* The rotator is modified from fig 4-8 to avoid extra negations. */\n\t\t\t\tvar z5p2 = (tmp10p2 - tmp12p2) * 0.382683433; /* c6 */\n\t\t\t\tvar z2p2 = 0.541196100 * tmp10p2 + z5p2; /* c2-c6 */\n\t\t\t\tvar z4p2 = 1.306562965 * tmp12p2 + z5p2; /* c2+c6 */\n\t\t\t\tvar z3p2 = tmp11p2 * 0.707106781; /* c4 */\n\t\n\t\t\t\tvar z11p2 = tmp7p2 + z3p2;\t/* phase 5 */\n\t\t\t\tvar z13p2 = tmp7p2 - z3p2;\n\t\n\t\t\t\tdata[dataOff+40] = z13p2 + z2p2; /* phase 6 */\n\t\t\t\tdata[dataOff+24] = z13p2 - z2p2;\n\t\t\t\tdata[dataOff+ 8] = z11p2 + z4p2;\n\t\t\t\tdata[dataOff+56] = z11p2 - z4p2;\n\t\n\t\t\t\tdataOff++; /* advance pointer to next column */\n\t\t\t}\n\t\n\t\t\t// Quantize/descale the coefficients\n\t\t\tvar fDCTQuant;\n\t\t\tfor (i=0; i<I64; ++i)\n\t\t\t{\n\t\t\t\t// Apply the quantization and scaling factor & Round to nearest integer\n\t\t\t\tfDCTQuant = data[i]*fdtbl[i];\n\t\t\t\toutputfDCTQuant[i] = (fDCTQuant > 0.0) ? ((fDCTQuant + 0.5)|0) : ((fDCTQuant - 0.5)|0);\n\t\t\t\t//outputfDCTQuant[i] = fround(fDCTQuant);\n\n\t\t\t}\n\t\t\treturn outputfDCTQuant;\n\t\t}\n\t\t\n\t\tfunction writeAPP0()\n\t\t{\n\t\t\twriteWord(0xFFE0); // marker\n\t\t\twriteWord(16); // length\n\t\t\twriteByte(0x4A); // J\n\t\t\twriteByte(0x46); // F\n\t\t\twriteByte(0x49); // I\n\t\t\twriteByte(0x46); // F\n\t\t\twriteByte(0); // = \"JFIF\",'\\0'\n\t\t\twriteByte(1); // versionhi\n\t\t\twriteByte(1); // versionlo\n\t\t\twriteByte(0); // xyunits\n\t\t\twriteWord(1); // xdensity\n\t\t\twriteWord(1); // ydensity\n\t\t\twriteByte(0); // thumbnwidth\n\t\t\twriteByte(0); // thumbnheight\n\t\t}\n\n\t\tfunction writeAPP1(exifBuffer) {\n\t\t\tif (!exifBuffer) return;\n\n\t\t\twriteWord(0xFFE1); // APP1 marker\n\n\t\t\tif (exifBuffer[0] === 0x45 &&\n\t\t\t\t\texifBuffer[1] === 0x78 &&\n\t\t\t\t\texifBuffer[2] === 0x69 &&\n\t\t\t\t\texifBuffer[3] === 0x66) {\n\t\t\t\t// Buffer already starts with EXIF, just use it directly\n\t\t\t\twriteWord(exifBuffer.length + 2); // length is buffer + length itself!\n\t\t\t} else {\n\t\t\t\t// Buffer doesn't start with EXIF, write it for them\n\t\t\t\twriteWord(exifBuffer.length + 5 + 2); // length is buffer + EXIF\\0 + length itself!\n\t\t\t\twriteByte(0x45); // E\n\t\t\t\twriteByte(0x78); // X\n\t\t\t\twriteByte(0x69); // I\n\t\t\t\twriteByte(0x66); // F\n\t\t\t\twriteByte(0); // = \"EXIF\",'\\0'\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < exifBuffer.length; i++) {\n\t\t\t\twriteByte(exifBuffer[i]);\n\t\t\t}\n\t\t}\n\n\t\tfunction writeSOF0(width, height)\n\t\t{\n\t\t\twriteWord(0xFFC0); // marker\n\t\t\twriteWord(17);   // length, truecolor YUV JPG\n\t\t\twriteByte(8);    // precision\n\t\t\twriteWord(height);\n\t\t\twriteWord(width);\n\t\t\twriteByte(3);    // nrofcomponents\n\t\t\twriteByte(1);    // IdY\n\t\t\twriteByte(0x11); // HVY\n\t\t\twriteByte(0);    // QTY\n\t\t\twriteByte(2);    // IdU\n\t\t\twriteByte(0x11); // HVU\n\t\t\twriteByte(1);    // QTU\n\t\t\twriteByte(3);    // IdV\n\t\t\twriteByte(0x11); // HVV\n\t\t\twriteByte(1);    // QTV\n\t\t}\n\t\n\t\tfunction writeDQT()\n\t\t{\n\t\t\twriteWord(0xFFDB); // marker\n\t\t\twriteWord(132);\t   // length\n\t\t\twriteByte(0);\n\t\t\tfor (var i=0; i<64; i++) {\n\t\t\t\twriteByte(YTable[i]);\n\t\t\t}\n\t\t\twriteByte(1);\n\t\t\tfor (var j=0; j<64; j++) {\n\t\t\t\twriteByte(UVTable[j]);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction writeDHT()\n\t\t{\n\t\t\twriteWord(0xFFC4); // marker\n\t\t\twriteWord(0x01A2); // length\n\t\n\t\t\twriteByte(0); // HTYDCinfo\n\t\t\tfor (var i=0; i<16; i++) {\n\t\t\t\twriteByte(std_dc_luminance_nrcodes[i+1]);\n\t\t\t}\n\t\t\tfor (var j=0; j<=11; j++) {\n\t\t\t\twriteByte(std_dc_luminance_values[j]);\n\t\t\t}\n\t\n\t\t\twriteByte(0x10); // HTYACinfo\n\t\t\tfor (var k=0; k<16; k++) {\n\t\t\t\twriteByte(std_ac_luminance_nrcodes[k+1]);\n\t\t\t}\n\t\t\tfor (var l=0; l<=161; l++) {\n\t\t\t\twriteByte(std_ac_luminance_values[l]);\n\t\t\t}\n\t\n\t\t\twriteByte(1); // HTUDCinfo\n\t\t\tfor (var m=0; m<16; m++) {\n\t\t\t\twriteByte(std_dc_chrominance_nrcodes[m+1]);\n\t\t\t}\n\t\t\tfor (var n=0; n<=11; n++) {\n\t\t\t\twriteByte(std_dc_chrominance_values[n]);\n\t\t\t}\n\t\n\t\t\twriteByte(0x11); // HTUACinfo\n\t\t\tfor (var o=0; o<16; o++) {\n\t\t\t\twriteByte(std_ac_chrominance_nrcodes[o+1]);\n\t\t\t}\n\t\t\tfor (var p=0; p<=161; p++) {\n\t\t\t\twriteByte(std_ac_chrominance_values[p]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunction writeCOM(comments)\n\t\t{\n\t\t\tif (typeof comments === \"undefined\" || comments.constructor !== Array) return;\n\t\t\tcomments.forEach(e => {\n\t\t\t\tif (typeof e !== \"string\") return;\n\t\t\t\twriteWord(0xFFFE); // marker\n\t\t\t\tvar l = e.length;\n\t\t\t\twriteWord(l + 2); // length itself as well\n\t\t\t\tvar i;\n\t\t\t\tfor (i = 0; i < l; i++)\n\t\t\t\t\twriteByte(e.charCodeAt(i));\n\t\t\t});\n\t\t}\n\t\n\t\tfunction writeSOS()\n\t\t{\n\t\t\twriteWord(0xFFDA); // marker\n\t\t\twriteWord(12); // length\n\t\t\twriteByte(3); // nrofcomponents\n\t\t\twriteByte(1); // IdY\n\t\t\twriteByte(0); // HTY\n\t\t\twriteByte(2); // IdU\n\t\t\twriteByte(0x11); // HTU\n\t\t\twriteByte(3); // IdV\n\t\t\twriteByte(0x11); // HTV\n\t\t\twriteByte(0); // Ss\n\t\t\twriteByte(0x3f); // Se\n\t\t\twriteByte(0); // Bf\n\t\t}\n\t\t\n\t\tfunction processDU(CDU, fdtbl, DC, HTDC, HTAC){\n\t\t\tvar EOB = HTAC[0x00];\n\t\t\tvar M16zeroes = HTAC[0xF0];\n\t\t\tvar pos;\n\t\t\tvar I16 = 16;\n\t\t\tvar I63 = 63;\n\t\t\tvar I64 = 64;\n\t\t\tvar DU_DCT = fDCTQuant(CDU, fdtbl);\n\t\t\t//ZigZag reorder\n\t\t\tfor (var j=0;j<I64;++j) {\n\t\t\t\tDU[ZigZag[j]]=DU_DCT[j];\n\t\t\t}\n\t\t\tvar Diff = DU[0] - DC; DC = DU[0];\n\t\t\t//Encode DC\n\t\t\tif (Diff==0) {\n\t\t\t\twriteBits(HTDC[0]); // Diff might be 0\n\t\t\t} else {\n\t\t\t\tpos = 32767+Diff;\n\t\t\t\twriteBits(HTDC[category[pos]]);\n\t\t\t\twriteBits(bitcode[pos]);\n\t\t\t}\n\t\t\t//Encode ACs\n\t\t\tvar end0pos = 63; // was const... which is crazy\n\t\t\tfor (; (end0pos>0)&&(DU[end0pos]==0); end0pos--) {};\n\t\t\t//end0pos = first element in reverse order !=0\n\t\t\tif ( end0pos == 0) {\n\t\t\t\twriteBits(EOB);\n\t\t\t\treturn DC;\n\t\t\t}\n\t\t\tvar i = 1;\n\t\t\tvar lng;\n\t\t\twhile ( i <= end0pos ) {\n\t\t\t\tvar startpos = i;\n\t\t\t\tfor (; (DU[i]==0) && (i<=end0pos); ++i) {}\n\t\t\t\tvar nrzeroes = i-startpos;\n\t\t\t\tif ( nrzeroes >= I16 ) {\n\t\t\t\t\tlng = nrzeroes>>4;\n\t\t\t\t\tfor (var nrmarker=1; nrmarker <= lng; ++nrmarker)\n\t\t\t\t\t\twriteBits(M16zeroes);\n\t\t\t\t\tnrzeroes = nrzeroes&0xF;\n\t\t\t\t}\n\t\t\t\tpos = 32767+DU[i];\n\t\t\t\twriteBits(HTAC[(nrzeroes<<4)+category[pos]]);\n\t\t\t\twriteBits(bitcode[pos]);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif ( end0pos != I63 ) {\n\t\t\t\twriteBits(EOB);\n\t\t\t}\n\t\t\treturn DC;\n\t\t}\n\n\t\tfunction initCharLookupTable(){\n\t\t\tvar sfcc = String.fromCharCode;\n\t\t\tfor(var i=0; i < 256; i++){ ///// ACHTUNG // 255\n\t\t\t\tclt[i] = sfcc(i);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.encode = function(image,quality) // image data object\n\t\t{\n\t\t\tvar time_start = new Date().getTime();\n\t\t\t\n\t\t\tif(quality) setQuality(quality);\n\t\t\t\n\t\t\t// Initialize bit writer\n\t\t\tbyteout = new Array();\n\t\t\tbytenew=0;\n\t\t\tbytepos=7;\n\t\n\t\t\t// Add JPEG headers\n\t\t\twriteWord(0xFFD8); // SOI\n\t\t\twriteAPP0();\n\t\t\twriteCOM(image.comments);\n\t\t\twriteAPP1(image.exifBuffer);\n\t\t\twriteDQT();\n\t\t\twriteSOF0(image.width,image.height);\n\t\t\twriteDHT();\n\t\t\twriteSOS();\n\n\t\n\t\t\t// Encode 8x8 macroblocks\n\t\t\tvar DCY=0;\n\t\t\tvar DCU=0;\n\t\t\tvar DCV=0;\n\t\t\t\n\t\t\tbytenew=0;\n\t\t\tbytepos=7;\n\t\t\t\n\t\t\t\n\t\t\tthis.encode.displayName = \"_encode_\";\n\n\t\t\tvar imageData = image.data;\n\t\t\tvar width = image.width;\n\t\t\tvar height = image.height;\n\n\t\t\tvar quadWidth = width*4;\n\t\t\tvar tripleWidth = width*3;\n\t\t\t\n\t\t\tvar x, y = 0;\n\t\t\tvar r, g, b;\n\t\t\tvar start,p, col,row,pos;\n\t\t\twhile(y < height){\n\t\t\t\tx = 0;\n\t\t\t\twhile(x < quadWidth){\n\t\t\t\tstart = quadWidth * y + x;\n\t\t\t\tp = start;\n\t\t\t\tcol = -1;\n\t\t\t\trow = 0;\n\t\t\t\t\n\t\t\t\tfor(pos=0; pos < 64; pos++){\n\t\t\t\t\trow = pos >> 3;// /8\n\t\t\t\t\tcol = ( pos & 7 ) * 4; // %8\n\t\t\t\t\tp = start + ( row * quadWidth ) + col;\t\t\n\t\t\t\t\t\n\t\t\t\t\tif(y+row >= height){ // padding bottom\n\t\t\t\t\t\tp-= (quadWidth*(y+1+row-height));\n\t\t\t\t\t}\n\n\t\t\t\t\tif(x+col >= quadWidth){ // padding right\t\n\t\t\t\t\t\tp-= ((x+col) - quadWidth +4)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tr = imageData[ p++ ];\n\t\t\t\t\tg = imageData[ p++ ];\n\t\t\t\t\tb = imageData[ p++ ];\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t/* // calculate YUV values dynamically\n\t\t\t\t\tYDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80\n\t\t\t\t\tUDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));\n\t\t\t\t\tVDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));\n\t\t\t\t\t*/\n\t\t\t\t\t\n\t\t\t\t\t// use lookup table (slightly faster)\n\t\t\t\t\tYDU[pos] = ((RGB_YUV_TABLE[r]             + RGB_YUV_TABLE[(g +  256)>>0] + RGB_YUV_TABLE[(b +  512)>>0]) >> 16)-128;\n\t\t\t\t\tUDU[pos] = ((RGB_YUV_TABLE[(r +  768)>>0] + RGB_YUV_TABLE[(g + 1024)>>0] + RGB_YUV_TABLE[(b + 1280)>>0]) >> 16)-128;\n\t\t\t\t\tVDU[pos] = ((RGB_YUV_TABLE[(r + 1280)>>0] + RGB_YUV_TABLE[(g + 1536)>>0] + RGB_YUV_TABLE[(b + 1792)>>0]) >> 16)-128;\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tDCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);\n\t\t\t\tDCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);\n\t\t\t\tDCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);\n\t\t\t\tx+=32;\n\t\t\t\t}\n\t\t\t\ty+=8;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t////////////////////////////////////////////////////////////////\n\t\n\t\t\t// Do the bit alignment of the EOI marker\n\t\t\tif ( bytepos >= 0 ) {\n\t\t\t\tvar fillbits = [];\n\t\t\t\tfillbits[1] = bytepos+1;\n\t\t\t\tfillbits[0] = (1<<(bytepos+1))-1;\n\t\t\t\twriteBits(fillbits);\n\t\t\t}\n\t\n\t\t\twriteWord(0xFFD9); //EOI\n\n\t\t\tif (typeof module === 'undefined') return new Uint8Array(byteout);\n      return Buffer.from(byteout);\n\n\t\t\tvar jpegDataUri = 'data:image/jpeg;base64,' + btoa(byteout.join(''));\n\t\t\t\n\t\t\tbyteout = [];\n\t\t\t\n\t\t\t// benchmarking\n\t\t\tvar duration = new Date().getTime() - time_start;\n    \t\t//console.log('Encoding time: '+ duration + 'ms');\n    \t\t//\n\t\t\t\n\t\t\treturn jpegDataUri\t\t\t\n\t}\n\t\n\tfunction setQuality(quality){\n\t\tif (quality <= 0) {\n\t\t\tquality = 1;\n\t\t}\n\t\tif (quality > 100) {\n\t\t\tquality = 100;\n\t\t}\n\t\t\n\t\tif(currentQuality == quality) return // don't recalc if unchanged\n\t\t\n\t\tvar sf = 0;\n\t\tif (quality < 50) {\n\t\t\tsf = Math.floor(5000 / quality);\n\t\t} else {\n\t\t\tsf = Math.floor(200 - quality*2);\n\t\t}\n\t\t\n\t\tinitQuantTables(sf);\n\t\tcurrentQuality = quality;\n\t\t//console.log('Quality set to: '+quality +'%');\n\t}\n\t\n\tfunction init(){\n\t\tvar time_start = new Date().getTime();\n\t\tif(!quality) quality = 50;\n\t\t// Create tables\n\t\tinitCharLookupTable()\n\t\tinitHuffmanTbl();\n\t\tinitCategoryNumber();\n\t\tinitRGBYUVTable();\n\t\t\n\t\tsetQuality(quality);\n\t\tvar duration = new Date().getTime() - time_start;\n    \t//console.log('Initialization '+ duration + 'ms');\n\t}\n\t\n\tinit();\n\t\n};\n\nif (typeof module !== 'undefined') {\n\tmodule.exports = encode;\n} else if (typeof window !== 'undefined') {\n\twindow['jpeg-js'] = window['jpeg-js'] || {};\n\twindow['jpeg-js'].encode = encode;\n}\n\nfunction encode(imgData, qu) {\n  if (typeof qu === 'undefined') qu = 50;\n  var encoder = new JPEGEncoder(qu);\n\tvar data = encoder.encode(imgData, qu);\n  return {\n    data: data,\n    width: imgData.width,\n    height: imgData.height,\n  };\n}\n\n// helper function to get the imageData of an existing image on the current page.\nfunction getImageDataFromImage(idOrElement){\n\tvar theImg = (typeof(idOrElement)=='string')? document.getElementById(idOrElement):idOrElement;\n\tvar cvs = document.createElement('canvas');\n\tcvs.width = theImg.width;\n\tcvs.height = theImg.height;\n\tvar ctx = cvs.getContext(\"2d\");\n\tctx.drawImage(theImg,0,0);\n\t\n\treturn (ctx.getImageData(0, 0, cvs.width, cvs.height));\n}\n","/* -*- tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /\n/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */\n/*\n   Copyright 2011 notmasteryet\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\n// - The JPEG specification can be found in the ITU CCITT Recommendation T.81\n//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)\n// - The JFIF specification can be found in the JPEG File Interchange Format\n//   (www.w3.org/Graphics/JPEG/jfif3.pdf)\n// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters\n//   in PostScript Level 2, Technical Note #5116\n//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\n\nvar JpegImage = (function jpegImage() {\n  \"use strict\";\n  var dctZigZag = new Int32Array([\n     0,\n     1,  8,\n    16,  9,  2,\n     3, 10, 17, 24,\n    32, 25, 18, 11, 4,\n     5, 12, 19, 26, 33, 40,\n    48, 41, 34, 27, 20, 13,  6,\n     7, 14, 21, 28, 35, 42, 49, 56,\n    57, 50, 43, 36, 29, 22, 15,\n    23, 30, 37, 44, 51, 58,\n    59, 52, 45, 38, 31,\n    39, 46, 53, 60,\n    61, 54, 47,\n    55, 62,\n    63\n  ]);\n\n  var dctCos1  =  4017   // cos(pi/16)\n  var dctSin1  =   799   // sin(pi/16)\n  var dctCos3  =  3406   // cos(3*pi/16)\n  var dctSin3  =  2276   // sin(3*pi/16)\n  var dctCos6  =  1567   // cos(6*pi/16)\n  var dctSin6  =  3784   // sin(6*pi/16)\n  var dctSqrt2 =  5793   // sqrt(2)\n  var dctSqrt1d2 = 2896  // sqrt(2) / 2\n\n  function constructor() {\n  }\n\n  function buildHuffmanTable(codeLengths, values) {\n    var k = 0, code = [], i, j, length = 16;\n    while (length > 0 && !codeLengths[length - 1])\n      length--;\n    code.push({children: [], index: 0});\n    var p = code[0], q;\n    for (i = 0; i < length; i++) {\n      for (j = 0; j < codeLengths[i]; j++) {\n        p = code.pop();\n        p.children[p.index] = values[k];\n        while (p.index > 0) {\n          if (code.length === 0)\n            throw new Error('Could not recreate Huffman Table');\n          p = code.pop();\n        }\n        p.index++;\n        code.push(p);\n        while (code.length <= i) {\n          code.push(q = {children: [], index: 0});\n          p.children[p.index] = q.children;\n          p = q;\n        }\n        k++;\n      }\n      if (i + 1 < length) {\n        // p here points to last code\n        code.push(q = {children: [], index: 0});\n        p.children[p.index] = q.children;\n        p = q;\n      }\n    }\n    return code[0].children;\n  }\n\n  function decodeScan(data, offset,\n                      frame, components, resetInterval,\n                      spectralStart, spectralEnd,\n                      successivePrev, successive, opts) {\n    var precision = frame.precision;\n    var samplesPerLine = frame.samplesPerLine;\n    var scanLines = frame.scanLines;\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n    var maxH = frame.maxH, maxV = frame.maxV;\n\n    var startOffset = offset, bitsData = 0, bitsCount = 0;\n    function readBit() {\n      if (bitsCount > 0) {\n        bitsCount--;\n        return (bitsData >> bitsCount) & 1;\n      }\n      bitsData = data[offset++];\n      if (bitsData == 0xFF) {\n        var nextByte = data[offset++];\n        if (nextByte) {\n          throw new Error(\"unexpected marker: \" + ((bitsData << 8) | nextByte).toString(16));\n        }\n        // unstuff 0\n      }\n      bitsCount = 7;\n      return bitsData >>> 7;\n    }\n    function decodeHuffman(tree) {\n      var node = tree, bit;\n      while ((bit = readBit()) !== null) {\n        node = node[bit];\n        if (typeof node === 'number')\n          return node;\n        if (typeof node !== 'object')\n          throw new Error(\"invalid huffman sequence\");\n      }\n      return null;\n    }\n    function receive(length) {\n      var n = 0;\n      while (length > 0) {\n        var bit = readBit();\n        if (bit === null) return;\n        n = (n << 1) | bit;\n        length--;\n      }\n      return n;\n    }\n    function receiveAndExtend(length) {\n      var n = receive(length);\n      if (n >= 1 << (length - 1))\n        return n;\n      return n + (-1 << length) + 1;\n    }\n    function decodeBaseline(component, zz) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : receiveAndExtend(t);\n      zz[0]= (component.pred += diff);\n      var k = 1;\n      while (k < 64) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15, r = rs >> 4;\n        if (s === 0) {\n          if (r < 15)\n            break;\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        zz[z] = receiveAndExtend(s);\n        k++;\n      }\n    }\n    function decodeDCFirst(component, zz) {\n      var t = decodeHuffman(component.huffmanTableDC);\n      var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);\n      zz[0] = (component.pred += diff);\n    }\n    function decodeDCSuccessive(component, zz) {\n      zz[0] |= readBit() << successive;\n    }\n    var eobrun = 0;\n    function decodeACFirst(component, zz) {\n      if (eobrun > 0) {\n        eobrun--;\n        return;\n      }\n      var k = spectralStart, e = spectralEnd;\n      while (k <= e) {\n        var rs = decodeHuffman(component.huffmanTableAC);\n        var s = rs & 15, r = rs >> 4;\n        if (s === 0) {\n          if (r < 15) {\n            eobrun = receive(r) + (1 << r) - 1;\n            break;\n          }\n          k += 16;\n          continue;\n        }\n        k += r;\n        var z = dctZigZag[k];\n        zz[z] = receiveAndExtend(s) * (1 << successive);\n        k++;\n      }\n    }\n    var successiveACState = 0, successiveACNextValue;\n    function decodeACSuccessive(component, zz) {\n      var k = spectralStart, e = spectralEnd, r = 0;\n      while (k <= e) {\n        var z = dctZigZag[k];\n        var direction = zz[z] < 0 ? -1 : 1;\n        switch (successiveACState) {\n        case 0: // initial state\n          var rs = decodeHuffman(component.huffmanTableAC);\n          var s = rs & 15, r = rs >> 4;\n          if (s === 0) {\n            if (r < 15) {\n              eobrun = receive(r) + (1 << r);\n              successiveACState = 4;\n            } else {\n              r = 16;\n              successiveACState = 1;\n            }\n          } else {\n            if (s !== 1)\n              throw new Error(\"invalid ACn encoding\");\n            successiveACNextValue = receiveAndExtend(s);\n            successiveACState = r ? 2 : 3;\n          }\n          continue;\n        case 1: // skipping r zero items\n        case 2:\n          if (zz[z])\n            zz[z] += (readBit() << successive) * direction;\n          else {\n            r--;\n            if (r === 0)\n              successiveACState = successiveACState == 2 ? 3 : 0;\n          }\n          break;\n        case 3: // set value for a zero item\n          if (zz[z])\n            zz[z] += (readBit() << successive) * direction;\n          else {\n            zz[z] = successiveACNextValue << successive;\n            successiveACState = 0;\n          }\n          break;\n        case 4: // eob\n          if (zz[z])\n            zz[z] += (readBit() << successive) * direction;\n          break;\n        }\n        k++;\n      }\n      if (successiveACState === 4) {\n        eobrun--;\n        if (eobrun === 0)\n          successiveACState = 0;\n      }\n    }\n    function decodeMcu(component, decode, mcu, row, col) {\n      var mcuRow = (mcu / mcusPerLine) | 0;\n      var mcuCol = mcu % mcusPerLine;\n      var blockRow = mcuRow * component.v + row;\n      var blockCol = mcuCol * component.h + col;\n      // If the block is missing and we're in tolerant mode, just skip it.\n      if (component.blocks[blockRow] === undefined && opts.tolerantDecoding)\n        return;\n      decode(component, component.blocks[blockRow][blockCol]);\n    }\n    function decodeBlock(component, decode, mcu) {\n      var blockRow = (mcu / component.blocksPerLine) | 0;\n      var blockCol = mcu % component.blocksPerLine;\n      // If the block is missing and we're in tolerant mode, just skip it.\n      if (component.blocks[blockRow] === undefined && opts.tolerantDecoding)\n        return;\n      decode(component, component.blocks[blockRow][blockCol]);\n    }\n\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n    if (progressive) {\n      if (spectralStart === 0)\n        decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n      else\n        decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n    } else {\n      decodeFn = decodeBaseline;\n    }\n\n    var mcu = 0, marker;\n    var mcuExpected;\n    if (componentsLength == 1) {\n      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    } else {\n      mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n    if (!resetInterval) resetInterval = mcuExpected;\n\n    var h, v;\n    while (mcu < mcuExpected) {\n      // reset interval stuff\n      for (i = 0; i < componentsLength; i++)\n        components[i].pred = 0;\n      eobrun = 0;\n\n      if (componentsLength == 1) {\n        component = components[0];\n        for (n = 0; n < resetInterval; n++) {\n          decodeBlock(component, decodeFn, mcu);\n          mcu++;\n        }\n      } else {\n        for (n = 0; n < resetInterval; n++) {\n          for (i = 0; i < componentsLength; i++) {\n            component = components[i];\n            h = component.h;\n            v = component.v;\n            for (j = 0; j < v; j++) {\n              for (k = 0; k < h; k++) {\n                decodeMcu(component, decodeFn, mcu, j, k);\n              }\n            }\n          }\n          mcu++;\n\n          // If we've reached our expected MCU's, stop decoding\n          if (mcu === mcuExpected) break;\n        }\n      }\n\n      if (mcu === mcuExpected) {\n        // Skip trailing bytes at the end of the scan - until we reach the next marker\n        do {\n          if (data[offset] === 0xFF) {\n            if (data[offset + 1] !== 0x00) {\n              break;\n            }\n          }\n          offset += 1;\n        } while (offset < data.length - 2);\n      }\n\n      // find marker\n      bitsCount = 0;\n      marker = (data[offset] << 8) | data[offset + 1];\n      if (marker < 0xFF00) {\n        throw new Error(\"marker was not found\");\n      }\n\n      if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx\n        offset += 2;\n      }\n      else\n        break;\n    }\n\n    return offset - startOffset;\n  }\n\n  function buildComponentData(frame, component) {\n    var lines = [];\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var samplesPerLine = blocksPerLine << 3;\n    // Only 1 used per invocation of this function and garbage collected after invocation, so no need to account for its memory footprint.\n    var R = new Int32Array(64), r = new Uint8Array(64);\n\n    // A port of poppler's IDCT method which in turn is taken from:\n    //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n    //   \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\",\n    //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\n    //   988-991.\n    function quantizeAndInverse(zz, dataOut, dataIn) {\n      var qt = component.quantizationTable;\n      var v0, v1, v2, v3, v4, v5, v6, v7, t;\n      var p = dataIn;\n      var i;\n\n      // dequant\n      for (i = 0; i < 64; i++)\n        p[i] = zz[i] * qt[i];\n\n      // inverse DCT on rows\n      for (i = 0; i < 8; ++i) {\n        var row = 8 * i;\n\n        // check for all-zero AC coefficients\n        if (p[1 + row] == 0 && p[2 + row] == 0 && p[3 + row] == 0 &&\n            p[4 + row] == 0 && p[5 + row] == 0 && p[6 + row] == 0 &&\n            p[7 + row] == 0) {\n          t = (dctSqrt2 * p[0 + row] + 512) >> 10;\n          p[0 + row] = t;\n          p[1 + row] = t;\n          p[2 + row] = t;\n          p[3 + row] = t;\n          p[4 + row] = t;\n          p[5 + row] = t;\n          p[6 + row] = t;\n          p[7 + row] = t;\n          continue;\n        }\n\n        // stage 4\n        v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;\n        v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;\n        v2 = p[2 + row];\n        v3 = p[6 + row];\n        v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;\n        v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;\n        v5 = p[3 + row] << 4;\n        v6 = p[5 + row] << 4;\n\n        // stage 3\n        t = (v0 - v1+ 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n\n        // stage 2\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n\n        // stage 1\n        p[0 + row] = v0 + v7;\n        p[7 + row] = v0 - v7;\n        p[1 + row] = v1 + v6;\n        p[6 + row] = v1 - v6;\n        p[2 + row] = v2 + v5;\n        p[5 + row] = v2 - v5;\n        p[3 + row] = v3 + v4;\n        p[4 + row] = v3 - v4;\n      }\n\n      // inverse DCT on columns\n      for (i = 0; i < 8; ++i) {\n        var col = i;\n\n        // check for all-zero AC coefficients\n        if (p[1*8 + col] == 0 && p[2*8 + col] == 0 && p[3*8 + col] == 0 &&\n            p[4*8 + col] == 0 && p[5*8 + col] == 0 && p[6*8 + col] == 0 &&\n            p[7*8 + col] == 0) {\n          t = (dctSqrt2 * dataIn[i+0] + 8192) >> 14;\n          p[0*8 + col] = t;\n          p[1*8 + col] = t;\n          p[2*8 + col] = t;\n          p[3*8 + col] = t;\n          p[4*8 + col] = t;\n          p[5*8 + col] = t;\n          p[6*8 + col] = t;\n          p[7*8 + col] = t;\n          continue;\n        }\n\n        // stage 4\n        v0 = (dctSqrt2 * p[0*8 + col] + 2048) >> 12;\n        v1 = (dctSqrt2 * p[4*8 + col] + 2048) >> 12;\n        v2 = p[2*8 + col];\n        v3 = p[6*8 + col];\n        v4 = (dctSqrt1d2 * (p[1*8 + col] - p[7*8 + col]) + 2048) >> 12;\n        v7 = (dctSqrt1d2 * (p[1*8 + col] + p[7*8 + col]) + 2048) >> 12;\n        v5 = p[3*8 + col];\n        v6 = p[5*8 + col];\n\n        // stage 3\n        t = (v0 - v1 + 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n\n        // stage 2\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n\n        // stage 1\n        p[0*8 + col] = v0 + v7;\n        p[7*8 + col] = v0 - v7;\n        p[1*8 + col] = v1 + v6;\n        p[6*8 + col] = v1 - v6;\n        p[2*8 + col] = v2 + v5;\n        p[5*8 + col] = v2 - v5;\n        p[3*8 + col] = v3 + v4;\n        p[4*8 + col] = v3 - v4;\n      }\n\n      // convert to 8-bit integers\n      for (i = 0; i < 64; ++i) {\n        var sample = 128 + ((p[i] + 8) >> 4);\n        dataOut[i] = sample < 0 ? 0 : sample > 0xFF ? 0xFF : sample;\n      }\n    }\n\n    requestMemoryAllocation(samplesPerLine * blocksPerColumn * 8);\n\n    var i, j;\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n      var scanLine = blockRow << 3;\n      for (i = 0; i < 8; i++)\n        lines.push(new Uint8Array(samplesPerLine));\n      for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n        quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);\n\n        var offset = 0, sample = blockCol << 3;\n        for (j = 0; j < 8; j++) {\n          var line = lines[scanLine + j];\n          for (i = 0; i < 8; i++)\n            line[sample + i] = r[offset++];\n        }\n      }\n    }\n    return lines;\n  }\n\n  function clampTo8bit(a) {\n    return a < 0 ? 0 : a > 255 ? 255 : a;\n  }\n\n  constructor.prototype = {\n    load: function load(path) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", path, true);\n      xhr.responseType = \"arraybuffer\";\n      xhr.onload = (function() {\n        // TODO catch parse error\n        var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);\n        this.parse(data);\n        if (this.onload)\n          this.onload();\n      }).bind(this);\n      xhr.send(null);\n    },\n    parse: function parse(data) {\n      var maxResolutionInPixels = this.opts.maxResolutionInMP * 1000 * 1000;\n      var offset = 0, length = data.length;\n      function readUint16() {\n        var value = (data[offset] << 8) | data[offset + 1];\n        offset += 2;\n        return value;\n      }\n      function readDataBlock() {\n        var length = readUint16();\n        var array = data.subarray(offset, offset + length - 2);\n        offset += array.length;\n        return array;\n      }\n      function prepareComponents(frame) {\n        // According to the JPEG standard, the sampling factor must be between 1 and 4\n        // See https://github.com/libjpeg-turbo/libjpeg-turbo/blob/9abeff46d87bd201a952e276f3e4339556a403a3/libjpeg.txt#L1138-L1146\n        var maxH = 1, maxV = 1;\n        var component, componentId;\n        for (componentId in frame.components) {\n          if (frame.components.hasOwnProperty(componentId)) {\n            component = frame.components[componentId];\n            if (maxH < component.h) maxH = component.h;\n            if (maxV < component.v) maxV = component.v;\n          }\n        }\n        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);\n        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);\n        for (componentId in frame.components) {\n          if (frame.components.hasOwnProperty(componentId)) {\n            component = frame.components[componentId];\n            var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);\n            var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines  / 8) * component.v / maxV);\n            var blocksPerLineForMcu = mcusPerLine * component.h;\n            var blocksPerColumnForMcu = mcusPerColumn * component.v;\n            var blocksToAllocate = blocksPerColumnForMcu * blocksPerLineForMcu;\n            var blocks = [];\n\n            // Each block is a Int32Array of length 64 (4 x 64 = 256 bytes)\n            requestMemoryAllocation(blocksToAllocate * 256);\n\n            for (var i = 0; i < blocksPerColumnForMcu; i++) {\n              var row = [];\n              for (var j = 0; j < blocksPerLineForMcu; j++)\n                row.push(new Int32Array(64));\n              blocks.push(row);\n            }\n            component.blocksPerLine = blocksPerLine;\n            component.blocksPerColumn = blocksPerColumn;\n            component.blocks = blocks;\n          }\n        }\n        frame.maxH = maxH;\n        frame.maxV = maxV;\n        frame.mcusPerLine = mcusPerLine;\n        frame.mcusPerColumn = mcusPerColumn;\n      }\n      var jfif = null;\n      var adobe = null;\n      var pixels = null;\n      var frame, resetInterval;\n      var quantizationTables = [], frames = [];\n      var huffmanTablesAC = [], huffmanTablesDC = [];\n      var fileMarker = readUint16();\n      var malformedDataOffset = -1;\n      this.comments = [];\n      if (fileMarker != 0xFFD8) { // SOI (Start of Image)\n        throw new Error(\"SOI not found\");\n      }\n\n      fileMarker = readUint16();\n      while (fileMarker != 0xFFD9) { // EOI (End of image)\n        var i, j, l;\n        switch(fileMarker) {\n          case 0xFF00: break;\n          case 0xFFE0: // APP0 (Application Specific)\n          case 0xFFE1: // APP1\n          case 0xFFE2: // APP2\n          case 0xFFE3: // APP3\n          case 0xFFE4: // APP4\n          case 0xFFE5: // APP5\n          case 0xFFE6: // APP6\n          case 0xFFE7: // APP7\n          case 0xFFE8: // APP8\n          case 0xFFE9: // APP9\n          case 0xFFEA: // APP10\n          case 0xFFEB: // APP11\n          case 0xFFEC: // APP12\n          case 0xFFED: // APP13\n          case 0xFFEE: // APP14\n          case 0xFFEF: // APP15\n          case 0xFFFE: // COM (Comment)\n            var appData = readDataBlock();\n\n            if (fileMarker === 0xFFFE) {\n              var comment = String.fromCharCode.apply(null, appData);\n              this.comments.push(comment);\n            }\n\n            if (fileMarker === 0xFFE0) {\n              if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 &&\n                appData[3] === 0x46 && appData[4] === 0) { // 'JFIF\\x00'\n                jfif = {\n                  version: { major: appData[5], minor: appData[6] },\n                  densityUnits: appData[7],\n                  xDensity: (appData[8] << 8) | appData[9],\n                  yDensity: (appData[10] << 8) | appData[11],\n                  thumbWidth: appData[12],\n                  thumbHeight: appData[13],\n                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                };\n              }\n            }\n            // TODO APP1 - Exif\n            if (fileMarker === 0xFFE1) {\n              if (appData[0] === 0x45 &&\n                appData[1] === 0x78 &&\n                appData[2] === 0x69 &&\n                appData[3] === 0x66 &&\n                appData[4] === 0) { // 'EXIF\\x00'\n                this.exifBuffer = appData.subarray(5, appData.length);\n              }\n            }\n\n            if (fileMarker === 0xFFEE) {\n              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F &&\n                appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) { // 'Adobe\\x00'\n                adobe = {\n                  version: appData[6],\n                  flags0: (appData[7] << 8) | appData[8],\n                  flags1: (appData[9] << 8) | appData[10],\n                  transformCode: appData[11]\n                };\n              }\n            }\n            break;\n\n          case 0xFFDB: // DQT (Define Quantization Tables)\n            var quantizationTablesLength = readUint16();\n            var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n            while (offset < quantizationTablesEnd) {\n              var quantizationTableSpec = data[offset++];\n              requestMemoryAllocation(64 * 4);\n              var tableData = new Int32Array(64);\n              if ((quantizationTableSpec >> 4) === 0) { // 8 bit values\n                for (j = 0; j < 64; j++) {\n                  var z = dctZigZag[j];\n                  tableData[z] = data[offset++];\n                }\n              } else if ((quantizationTableSpec >> 4) === 1) { //16 bit\n                for (j = 0; j < 64; j++) {\n                  var z = dctZigZag[j];\n                  tableData[z] = readUint16();\n                }\n              } else\n                throw new Error(\"DQT: invalid table spec\");\n              quantizationTables[quantizationTableSpec & 15] = tableData;\n            }\n            break;\n\n          case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)\n          case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)\n          case 0xFFC2: // SOF2 (Start of Frame, Progressive DCT)\n            readUint16(); // skip data length\n            frame = {};\n            frame.extended = (fileMarker === 0xFFC1);\n            frame.progressive = (fileMarker === 0xFFC2);\n            frame.precision = data[offset++];\n            frame.scanLines = readUint16();\n            frame.samplesPerLine = readUint16();\n            frame.components = {};\n            frame.componentsOrder = [];\n\n            var pixelsInFrame = frame.scanLines * frame.samplesPerLine;\n            if (pixelsInFrame > maxResolutionInPixels) {\n              var exceededAmount = Math.ceil((pixelsInFrame - maxResolutionInPixels) / 1e6);\n              throw new Error(`maxResolutionInMP limit exceeded by ${exceededAmount}MP`);\n            }\n\n            var componentsCount = data[offset++], componentId;\n            var maxH = 0, maxV = 0;\n            for (i = 0; i < componentsCount; i++) {\n              componentId = data[offset];\n              var h = data[offset + 1] >> 4;\n              var v = data[offset + 1] & 15;\n              var qId = data[offset + 2];\n\n              if ( h <= 0 || v <= 0 ) {\n                throw new Error('Invalid sampling factor, expected values above 0');\n              }\n\n              frame.componentsOrder.push(componentId);\n              frame.components[componentId] = {\n                h: h,\n                v: v,\n                quantizationIdx: qId\n              };\n              offset += 3;\n            }\n            prepareComponents(frame);\n            frames.push(frame);\n            break;\n\n          case 0xFFC4: // DHT (Define Huffman Tables)\n            var huffmanLength = readUint16();\n            for (i = 2; i < huffmanLength;) {\n              var huffmanTableSpec = data[offset++];\n              var codeLengths = new Uint8Array(16);\n              var codeLengthSum = 0;\n              for (j = 0; j < 16; j++, offset++) {\n                codeLengthSum += (codeLengths[j] = data[offset]);\n              }\n              requestMemoryAllocation(16 + codeLengthSum);\n              var huffmanValues = new Uint8Array(codeLengthSum);\n              for (j = 0; j < codeLengthSum; j++, offset++)\n                huffmanValues[j] = data[offset];\n              i += 17 + codeLengthSum;\n\n              ((huffmanTableSpec >> 4) === 0 ?\n                huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] =\n                buildHuffmanTable(codeLengths, huffmanValues);\n            }\n            break;\n\n          case 0xFFDD: // DRI (Define Restart Interval)\n            readUint16(); // skip data length\n            resetInterval = readUint16();\n            break;\n\n          case 0xFFDC: // Number of Lines marker\n            readUint16() // skip data length\n            readUint16() // Ignore this data since it represents the image height\n            break;\n            \n          case 0xFFDA: // SOS (Start of Scan)\n            var scanLength = readUint16();\n            var selectorsCount = data[offset++];\n            var components = [], component;\n            for (i = 0; i < selectorsCount; i++) {\n              component = frame.components[data[offset++]];\n              var tableSpec = data[offset++];\n              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n              components.push(component);\n            }\n            var spectralStart = data[offset++];\n            var spectralEnd = data[offset++];\n            var successiveApproximation = data[offset++];\n            var processed = decodeScan(data, offset,\n              frame, components, resetInterval,\n              spectralStart, spectralEnd,\n              successiveApproximation >> 4, successiveApproximation & 15, this.opts);\n            offset += processed;\n            break;\n\n          case 0xFFFF: // Fill bytes\n            if (data[offset] !== 0xFF) { // Avoid skipping a valid marker.\n              offset--;\n            }\n            break;\n          default:\n            if (data[offset - 3] == 0xFF &&\n                data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {\n              // could be incorrect encoding -- last 0xFF byte of the previous\n              // block was eaten by the encoder\n              offset -= 3;\n              break;\n            }\n            else if (fileMarker === 0xE0 || fileMarker == 0xE1) {\n              // Recover from malformed APP1 markers popular in some phone models.\n              // See https://github.com/eugeneware/jpeg-js/issues/82\n              if (malformedDataOffset !== -1) {\n                throw new Error(`first unknown JPEG marker at offset ${malformedDataOffset.toString(16)}, second unknown JPEG marker ${fileMarker.toString(16)} at offset ${(offset - 1).toString(16)}`);\n              }\n              malformedDataOffset = offset - 1;\n              const nextOffset = readUint16();\n              if (data[offset + nextOffset - 2] === 0xFF) {\n                offset += nextOffset - 2;\n                break;\n              }\n            }\n            throw new Error(\"unknown JPEG marker \" + fileMarker.toString(16));\n        }\n        fileMarker = readUint16();\n      }\n      if (frames.length != 1)\n        throw new Error(\"only single frame JPEGs supported\");\n\n      // set each frame's components quantization table\n      for (var i = 0; i < frames.length; i++) {\n        var cp = frames[i].components;\n        for (var j in cp) {\n          cp[j].quantizationTable = quantizationTables[cp[j].quantizationIdx];\n          delete cp[j].quantizationIdx;\n        }\n      }\n\n      this.width = frame.samplesPerLine;\n      this.height = frame.scanLines;\n      this.jfif = jfif;\n      this.adobe = adobe;\n      this.components = [];\n      for (var i = 0; i < frame.componentsOrder.length; i++) {\n        var component = frame.components[frame.componentsOrder[i]];\n        this.components.push({\n          lines: buildComponentData(frame, component),\n          scaleX: component.h / frame.maxH,\n          scaleY: component.v / frame.maxV\n        });\n      }\n    },\n    getData: function getData(width, height) {\n      var scaleX = this.width / width, scaleY = this.height / height;\n\n      var component1, component2, component3, component4;\n      var component1Line, component2Line, component3Line, component4Line;\n      var x, y;\n      var offset = 0;\n      var Y, Cb, Cr, K, C, M, Ye, R, G, B;\n      var colorTransform;\n      var dataLength = width * height * this.components.length;\n      requestMemoryAllocation(dataLength);\n      var data = new Uint8Array(dataLength);\n      switch (this.components.length) {\n        case 1:\n          component1 = this.components[0];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n\n              data[offset++] = Y;\n            }\n          }\n          break;\n        case 2:\n          // PDF might compress two component data in custom colorspace\n          component1 = this.components[0];\n          component2 = this.components[1];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n              data[offset++] = Y;\n              Y = component2Line[0 | (x * component2.scaleX * scaleX)];\n              data[offset++] = Y;\n            }\n          }\n          break;\n        case 3:\n          // The default transform for three components is true\n          colorTransform = true;\n          // The adobe transform marker overrides any previous setting\n          if (this.adobe && this.adobe.transformCode)\n            colorTransform = true;\n          else if (typeof this.opts.colorTransform !== 'undefined')\n            colorTransform = !!this.opts.colorTransform;\n\n          component1 = this.components[0];\n          component2 = this.components[1];\n          component3 = this.components[2];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];\n            component3Line = component3.lines[0 | (y * component3.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              if (!colorTransform) {\n                R = component1Line[0 | (x * component1.scaleX * scaleX)];\n                G = component2Line[0 | (x * component2.scaleX * scaleX)];\n                B = component3Line[0 | (x * component3.scaleX * scaleX)];\n              } else {\n                Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n                Cb = component2Line[0 | (x * component2.scaleX * scaleX)];\n                Cr = component3Line[0 | (x * component3.scaleX * scaleX)];\n\n                R = clampTo8bit(Y + 1.402 * (Cr - 128));\n                G = clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));\n                B = clampTo8bit(Y + 1.772 * (Cb - 128));\n              }\n\n              data[offset++] = R;\n              data[offset++] = G;\n              data[offset++] = B;\n            }\n          }\n          break;\n        case 4:\n          if (!this.adobe)\n            throw new Error('Unsupported color mode (4 components)');\n          // The default transform for four components is false\n          colorTransform = false;\n          // The adobe transform marker overrides any previous setting\n          if (this.adobe && this.adobe.transformCode)\n            colorTransform = true;\n          else if (typeof this.opts.colorTransform !== 'undefined')\n            colorTransform = !!this.opts.colorTransform;\n\n          component1 = this.components[0];\n          component2 = this.components[1];\n          component3 = this.components[2];\n          component4 = this.components[3];\n          for (y = 0; y < height; y++) {\n            component1Line = component1.lines[0 | (y * component1.scaleY * scaleY)];\n            component2Line = component2.lines[0 | (y * component2.scaleY * scaleY)];\n            component3Line = component3.lines[0 | (y * component3.scaleY * scaleY)];\n            component4Line = component4.lines[0 | (y * component4.scaleY * scaleY)];\n            for (x = 0; x < width; x++) {\n              if (!colorTransform) {\n                C = component1Line[0 | (x * component1.scaleX * scaleX)];\n                M = component2Line[0 | (x * component2.scaleX * scaleX)];\n                Ye = component3Line[0 | (x * component3.scaleX * scaleX)];\n                K = component4Line[0 | (x * component4.scaleX * scaleX)];\n              } else {\n                Y = component1Line[0 | (x * component1.scaleX * scaleX)];\n                Cb = component2Line[0 | (x * component2.scaleX * scaleX)];\n                Cr = component3Line[0 | (x * component3.scaleX * scaleX)];\n                K = component4Line[0 | (x * component4.scaleX * scaleX)];\n\n                C = 255 - clampTo8bit(Y + 1.402 * (Cr - 128));\n                M = 255 - clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));\n                Ye = 255 - clampTo8bit(Y + 1.772 * (Cb - 128));\n              }\n              data[offset++] = 255-C;\n              data[offset++] = 255-M;\n              data[offset++] = 255-Ye;\n              data[offset++] = 255-K;\n            }\n          }\n          break;\n        default:\n          throw new Error('Unsupported color mode');\n      }\n      return data;\n    },\n    copyToImageData: function copyToImageData(imageData, formatAsRGBA) {\n      var width = imageData.width, height = imageData.height;\n      var imageDataArray = imageData.data;\n      var data = this.getData(width, height);\n      var i = 0, j = 0, x, y;\n      var Y, K, C, M, R, G, B;\n      switch (this.components.length) {\n        case 1:\n          for (y = 0; y < height; y++) {\n            for (x = 0; x < width; x++) {\n              Y = data[i++];\n\n              imageDataArray[j++] = Y;\n              imageDataArray[j++] = Y;\n              imageDataArray[j++] = Y;\n              if (formatAsRGBA) {\n                imageDataArray[j++] = 255;\n              }\n            }\n          }\n          break;\n        case 3:\n          for (y = 0; y < height; y++) {\n            for (x = 0; x < width; x++) {\n              R = data[i++];\n              G = data[i++];\n              B = data[i++];\n\n              imageDataArray[j++] = R;\n              imageDataArray[j++] = G;\n              imageDataArray[j++] = B;\n              if (formatAsRGBA) {\n                imageDataArray[j++] = 255;\n              }\n            }\n          }\n          break;\n        case 4:\n          for (y = 0; y < height; y++) {\n            for (x = 0; x < width; x++) {\n              C = data[i++];\n              M = data[i++];\n              Y = data[i++];\n              K = data[i++];\n\n              R = 255 - clampTo8bit(C * (1 - K / 255) + K);\n              G = 255 - clampTo8bit(M * (1 - K / 255) + K);\n              B = 255 - clampTo8bit(Y * (1 - K / 255) + K);\n\n              imageDataArray[j++] = R;\n              imageDataArray[j++] = G;\n              imageDataArray[j++] = B;\n              if (formatAsRGBA) {\n                imageDataArray[j++] = 255;\n              }\n            }\n          }\n          break;\n        default:\n          throw new Error('Unsupported color mode');\n      }\n    }\n  };\n\n\n  // We cap the amount of memory used by jpeg-js to avoid unexpected OOMs from untrusted content.\n  var totalBytesAllocated = 0;\n  var maxMemoryUsageBytes = 0;\n  function requestMemoryAllocation(increaseAmount = 0) {\n    var totalMemoryImpactBytes = totalBytesAllocated + increaseAmount;\n    if (totalMemoryImpactBytes > maxMemoryUsageBytes) {\n      var exceededAmount = Math.ceil((totalMemoryImpactBytes - maxMemoryUsageBytes) / 1024 / 1024);\n      throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${exceededAmount}MB`);\n    }\n\n    totalBytesAllocated = totalMemoryImpactBytes;\n  }\n\n  constructor.resetMaxMemoryUsage = function (maxMemoryUsageBytes_) {\n    totalBytesAllocated = 0;\n    maxMemoryUsageBytes = maxMemoryUsageBytes_;\n  };\n\n  constructor.getBytesAllocated = function () {\n    return totalBytesAllocated;\n  };\n\n  constructor.requestMemoryAllocation = requestMemoryAllocation;\n\n  return constructor;\n})();\n\nif (typeof module !== 'undefined') {\n\tmodule.exports = decode;\n} else if (typeof window !== 'undefined') {\n\twindow['jpeg-js'] = window['jpeg-js'] || {};\n\twindow['jpeg-js'].decode = decode;\n}\n\nfunction decode(jpegData, userOpts = {}) {\n  var defaultOpts = {\n    // \"undefined\" means \"Choose whether to transform colors based on the image’s color model.\"\n    colorTransform: undefined,\n    useTArray: false,\n    formatAsRGBA: true,\n    tolerantDecoding: true,\n    maxResolutionInMP: 100, // Don't decode more than 100 megapixels\n    maxMemoryUsageInMB: 512, // Don't decode if memory footprint is more than 512MB\n  };\n\n  var opts = {...defaultOpts, ...userOpts};\n  var arr = new Uint8Array(jpegData);\n  var decoder = new JpegImage();\n  decoder.opts = opts;\n  // If this constructor ever supports async decoding this will need to be done differently.\n  // Until then, treating as singleton limit is fine.\n  JpegImage.resetMaxMemoryUsage(opts.maxMemoryUsageInMB * 1024 * 1024);\n  decoder.parse(arr);\n\n  var channels = (opts.formatAsRGBA) ? 4 : 3;\n  var bytesNeeded = decoder.width * decoder.height * channels;\n  try {\n    JpegImage.requestMemoryAllocation(bytesNeeded);\n    var image = {\n      width: decoder.width,\n      height: decoder.height,\n      exifBuffer: decoder.exifBuffer,\n      data: opts.useTArray ?\n        new Uint8Array(bytesNeeded) :\n        Buffer.alloc(bytesNeeded)\n    };\n    if(decoder.comments.length > 0) {\n      image[\"comments\"] = decoder.comments;\n    }\n  } catch (err) {\n    if (err instanceof RangeError) {\n      throw new Error(\"Could not allocate enough memory for the image. \" +\n                      \"Required: \" + bytesNeeded);\n    } \n    \n    if (err instanceof ReferenceError) {\n      if (err.message === \"Buffer is not defined\") {\n        throw new Error(\"Buffer is not globally defined in this environment. \" +\n                        \"Consider setting useTArray to true\");\n      }\n    }\n    throw err;\n  }\n\n  decoder.copyToImageData(image, opts.formatAsRGBA);\n\n  return image;\n}\n","var encode = require('./lib/encoder'),\n    decode = require('./lib/decoder');\n\nmodule.exports = {\n  encode: encode,\n  decode: decode\n};\n","import { encode } from 'jpeg-js';\nimport { Mask } from '../Mask.js';\n/**\n * Creates a JPEG buffer from an image.\n * @param image - The image instance.\n * @param options - JPEG encoding options.\n * @returns The buffer.\n */\nexport function encodeJpeg(image, options = {}) {\n    const { quality = 50 } = options;\n    if (image.colorModel !== 'RGBA' || image instanceof Mask) {\n        image = image.convertColor('RGBA');\n    }\n    if (image.bitDepth !== 8) {\n        image = image.convertBitDepth(8);\n    }\n    // Image data after bit depth conversion will always be UInt8Array.\n    const buffer = encode(image.getRawImage(), quality).data;\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n}\n//# sourceMappingURL=encodeJpeg.js.map","\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n","const crcTable = [];\nfor (let n = 0; n < 256; n++) {\n    let c = n;\n    for (let k = 0; k < 8; k++) {\n        if (c & 1) {\n            c = 0xedb88320 ^ (c >>> 1);\n        }\n        else {\n            c = c >>> 1;\n        }\n    }\n    crcTable[n] = c;\n}\nconst initialCrc = 0xffffffff;\nfunction updateCrc(currentCrc, data, length) {\n    let c = currentCrc;\n    for (let n = 0; n < length; n++) {\n        c = crcTable[(c ^ data[n]) & 0xff] ^ (c >>> 8);\n    }\n    return c;\n}\nfunction crc(data, length) {\n    return (updateCrc(initialCrc, data, length) ^ initialCrc) >>> 0;\n}\nexport function checkCrc(buffer, crcLength, chunkName) {\n    const expectedCrc = buffer.readUint32();\n    const actualCrc = crc(new Uint8Array(buffer.buffer, buffer.byteOffset + buffer.offset - crcLength - 4, crcLength), crcLength); // \"- 4\" because we already advanced by reading the CRC\n    if (actualCrc !== expectedCrc) {\n        throw new Error(`CRC mismatch for chunk ${chunkName}. Expected ${expectedCrc}, found ${actualCrc}`);\n    }\n}\nexport function writeCrc(buffer, length) {\n    buffer.writeUint32(crc(new Uint8Array(buffer.buffer, buffer.byteOffset + buffer.offset - length, length), length));\n}\n//# sourceMappingURL=crc.js.map","export function unfilterNone(currentLine, newLine, bytesPerLine) {\n    for (let i = 0; i < bytesPerLine; i++) {\n        newLine[i] = currentLine[i];\n    }\n}\nexport function unfilterSub(currentLine, newLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    for (; i < bytesPerPixel; i++) {\n        // just copy first bytes\n        newLine[i] = currentLine[i];\n    }\n    for (; i < bytesPerLine; i++) {\n        newLine[i] = (currentLine[i] + newLine[i - bytesPerPixel]) & 0xff;\n    }\n}\nexport function unfilterUp(currentLine, newLine, prevLine, bytesPerLine) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        // just copy bytes for first line\n        for (; i < bytesPerLine; i++) {\n            newLine[i] = currentLine[i];\n        }\n    }\n    else {\n        for (; i < bytesPerLine; i++) {\n            newLine[i] = (currentLine[i] + prevLine[i]) & 0xff;\n        }\n    }\n}\nexport function unfilterAverage(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        for (; i < bytesPerPixel; i++) {\n            newLine[i] = currentLine[i];\n        }\n        for (; i < bytesPerLine; i++) {\n            newLine[i] = (currentLine[i] + (newLine[i - bytesPerPixel] >> 1)) & 0xff;\n        }\n    }\n    else {\n        for (; i < bytesPerPixel; i++) {\n            newLine[i] = (currentLine[i] + (prevLine[i] >> 1)) & 0xff;\n        }\n        for (; i < bytesPerLine; i++) {\n            newLine[i] =\n                (currentLine[i] + ((newLine[i - bytesPerPixel] + prevLine[i]) >> 1)) &\n                    0xff;\n        }\n    }\n}\nexport function unfilterPaeth(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n    let i = 0;\n    if (prevLine.length === 0) {\n        for (; i < bytesPerPixel; i++) {\n            newLine[i] = currentLine[i];\n        }\n        for (; i < bytesPerLine; i++) {\n            newLine[i] = (currentLine[i] + newLine[i - bytesPerPixel]) & 0xff;\n        }\n    }\n    else {\n        for (; i < bytesPerPixel; i++) {\n            newLine[i] = (currentLine[i] + prevLine[i]) & 0xff;\n        }\n        for (; i < bytesPerLine; i++) {\n            newLine[i] =\n                (currentLine[i] +\n                    paethPredictor(newLine[i - bytesPerPixel], prevLine[i], prevLine[i - bytesPerPixel])) &\n                    0xff;\n        }\n    }\n}\nfunction paethPredictor(a, b, c) {\n    const p = a + b - c;\n    const pa = Math.abs(p - a);\n    const pb = Math.abs(p - b);\n    const pc = Math.abs(p - c);\n    if (pa <= pb && pa <= pc)\n        return a;\n    else if (pb <= pc)\n        return b;\n    else\n        return c;\n}\n//# sourceMappingURL=unfilter.js.map","import { unfilterAverage, unfilterNone, unfilterPaeth, unfilterSub, unfilterUp, } from \"./unfilter.js\";\n/**\n * Apllies filter on scanline based on the filter type.\n * @param filterType - The filter type to apply.\n * @param currentLine - The current line of pixel data.\n * @param newLine - The new line of pixel data.\n * @param prevLine - The previous line of pixel data.\n * @param passLineBytes - The number of bytes in the pass line.\n * @param bytesPerPixel - The number of bytes per pixel.\n */\nexport function applyUnfilter(filterType, currentLine, newLine, prevLine, passLineBytes, bytesPerPixel) {\n    switch (filterType) {\n        case 0:\n            unfilterNone(currentLine, newLine, passLineBytes);\n            break;\n        case 1:\n            unfilterSub(currentLine, newLine, passLineBytes, bytesPerPixel);\n            break;\n        case 2:\n            unfilterUp(currentLine, newLine, prevLine, passLineBytes);\n            break;\n        case 3:\n            unfilterAverage(currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            break;\n        case 4:\n            unfilterPaeth(currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            break;\n        default:\n            throw new Error(`Unsupported filter: ${filterType}`);\n    }\n}\n//# sourceMappingURL=apply_unfilter.js.map","import { applyUnfilter } from \"./apply_unfilter.js\";\nconst uint16 = new Uint16Array([0x00ff]);\nconst uint8 = new Uint8Array(uint16.buffer);\nconst osIsLittleEndian = uint8[0] === 0xff;\n/**\n * Decodes the Adam7 interlaced PNG data.\n * @param params - DecodeInterlaceNullParams\n * @returns - array of pixel data.\n */\nexport function decodeInterlaceAdam7(params) {\n    const { data, width, height, channels, depth } = params;\n    // Adam7 interlacing pattern\n    const passes = [\n        { x: 0, y: 0, xStep: 8, yStep: 8 }, // Pass 1\n        { x: 4, y: 0, xStep: 8, yStep: 8 }, // Pass 2\n        { x: 0, y: 4, xStep: 4, yStep: 8 }, // Pass 3\n        { x: 2, y: 0, xStep: 4, yStep: 4 }, // Pass 4\n        { x: 0, y: 2, xStep: 2, yStep: 4 }, // Pass 5\n        { x: 1, y: 0, xStep: 2, yStep: 2 }, // Pass 6\n        { x: 0, y: 1, xStep: 1, yStep: 2 }, // Pass 7\n    ];\n    const bytesPerPixel = Math.ceil(depth / 8) * channels;\n    const resultData = new Uint8Array(height * width * bytesPerPixel);\n    let offset = 0;\n    // Process each pass\n    for (let passIndex = 0; passIndex < 7; passIndex++) {\n        const pass = passes[passIndex];\n        // Calculate pass dimensions\n        const passWidth = Math.ceil((width - pass.x) / pass.xStep);\n        const passHeight = Math.ceil((height - pass.y) / pass.yStep);\n        if (passWidth <= 0 || passHeight <= 0)\n            continue;\n        const passLineBytes = passWidth * bytesPerPixel;\n        const prevLine = new Uint8Array(passLineBytes);\n        // Process each scanline in this pass\n        for (let y = 0; y < passHeight; y++) {\n            // First byte is the filter type\n            const filterType = data[offset++];\n            const currentLine = data.subarray(offset, offset + passLineBytes);\n            offset += passLineBytes;\n            // Create a new line for the unfiltered data\n            const newLine = new Uint8Array(passLineBytes);\n            // Apply the appropriate unfilter\n            applyUnfilter(filterType, currentLine, newLine, prevLine, passLineBytes, bytesPerPixel);\n            prevLine.set(newLine);\n            for (let x = 0; x < passWidth; x++) {\n                const outputX = pass.x + x * pass.xStep;\n                const outputY = pass.y + y * pass.yStep;\n                if (outputX >= width || outputY >= height)\n                    continue;\n                for (let i = 0; i < bytesPerPixel; i++) {\n                    resultData[(outputY * width + outputX) * bytesPerPixel + i] =\n                        newLine[x * bytesPerPixel + i];\n                }\n            }\n        }\n    }\n    if (depth === 16) {\n        const uint16Data = new Uint16Array(resultData.buffer);\n        if (osIsLittleEndian) {\n            for (let k = 0; k < uint16Data.length; k++) {\n                // PNG is always big endian. Swap the bytes.\n                uint16Data[k] = swap16(uint16Data[k]);\n            }\n        }\n        return uint16Data;\n    }\n    else {\n        return resultData;\n    }\n}\nfunction swap16(val) {\n    return ((val & 0xff) << 8) | ((val >> 8) & 0xff);\n}\n//# sourceMappingURL=decode_interlace_adam7.js.map","import { unfilterAverage, unfilterNone, unfilterPaeth, unfilterSub, unfilterUp, } from \"./unfilter.js\";\nconst uint16 = new Uint16Array([0x00ff]);\nconst uint8 = new Uint8Array(uint16.buffer);\nconst osIsLittleEndian = uint8[0] === 0xff;\nconst empty = new Uint8Array(0);\nexport function decodeInterlaceNull(params) {\n    const { data, width, height, channels, depth } = params;\n    const bytesPerPixel = Math.ceil(depth / 8) * channels;\n    const bytesPerLine = Math.ceil((depth / 8) * channels * width);\n    const newData = new Uint8Array(height * bytesPerLine);\n    let prevLine = empty;\n    let offset = 0;\n    let currentLine;\n    let newLine;\n    for (let i = 0; i < height; i++) {\n        currentLine = data.subarray(offset + 1, offset + 1 + bytesPerLine);\n        newLine = newData.subarray(i * bytesPerLine, (i + 1) * bytesPerLine);\n        switch (data[offset]) {\n            case 0:\n                unfilterNone(currentLine, newLine, bytesPerLine);\n                break;\n            case 1:\n                unfilterSub(currentLine, newLine, bytesPerLine, bytesPerPixel);\n                break;\n            case 2:\n                unfilterUp(currentLine, newLine, prevLine, bytesPerLine);\n                break;\n            case 3:\n                unfilterAverage(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n                break;\n            case 4:\n                unfilterPaeth(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n                break;\n            default:\n                throw new Error(`Unsupported filter: ${data[offset]}`);\n        }\n        prevLine = newLine;\n        offset += bytesPerLine + 1;\n    }\n    if (depth === 16) {\n        const uint16Data = new Uint16Array(newData.buffer);\n        if (osIsLittleEndian) {\n            for (let k = 0; k < uint16Data.length; k++) {\n                // PNG is always big endian. Swap the bytes.\n                uint16Data[k] = swap16(uint16Data[k]);\n            }\n        }\n        return uint16Data;\n    }\n    else {\n        return newData;\n    }\n}\nfunction swap16(val) {\n    return ((val & 0xff) << 8) | ((val >> 8) & 0xff);\n}\n//# sourceMappingURL=decode_interlace_null.js.map","// https://www.w3.org/TR/PNG/#5PNG-file-signature\nconst pngSignature = Uint8Array.of(137, 80, 78, 71, 13, 10, 26, 10);\nexport function writeSignature(buffer) {\n    buffer.writeBytes(pngSignature);\n}\nexport function checkSignature(buffer) {\n    if (!hasPngSignature(buffer.readBytes(pngSignature.length))) {\n        throw new Error('wrong PNG signature');\n    }\n}\nexport function hasPngSignature(array) {\n    if (array.length < pngSignature.length) {\n        return false;\n    }\n    for (let i = 0; i < pngSignature.length; i++) {\n        if (array[i] !== pngSignature[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=signature.js.map","import { writeCrc } from \"./crc.js\";\n// https://www.w3.org/TR/png/#11tEXt\nexport const textChunkName = 'tEXt';\nconst NULL = 0;\nconst latin1Decoder = new TextDecoder('latin1');\nfunction validateKeyword(keyword) {\n    validateLatin1(keyword);\n    if (keyword.length === 0 || keyword.length > 79) {\n        throw new Error('keyword length must be between 1 and 79');\n    }\n}\n// eslint-disable-next-line no-control-regex\nconst latin1Regex = /^[\\u0000-\\u00FF]*$/;\nfunction validateLatin1(text) {\n    if (!latin1Regex.test(text)) {\n        throw new Error('invalid latin1 text');\n    }\n}\nexport function decodetEXt(text, buffer, length) {\n    const keyword = readKeyword(buffer);\n    text[keyword] = readLatin1(buffer, length - keyword.length - 1);\n}\nexport function encodetEXt(buffer, keyword, text) {\n    validateKeyword(keyword);\n    validateLatin1(text);\n    const length = keyword.length + 1 /* NULL */ + text.length;\n    buffer.writeUint32(length);\n    buffer.writeChars(textChunkName);\n    buffer.writeChars(keyword);\n    buffer.writeByte(NULL);\n    buffer.writeChars(text);\n    writeCrc(buffer, length + 4);\n}\n// https://www.w3.org/TR/png/#11keywords\nexport function readKeyword(buffer) {\n    buffer.mark();\n    while (buffer.readByte() !== NULL) {\n        /* advance */\n    }\n    const end = buffer.offset;\n    buffer.reset();\n    const keyword = latin1Decoder.decode(buffer.readBytes(end - buffer.offset - 1));\n    // NULL\n    buffer.skip(1);\n    validateKeyword(keyword);\n    return keyword;\n}\nexport function readLatin1(buffer, length) {\n    return latin1Decoder.decode(buffer.readBytes(length));\n}\n//# sourceMappingURL=text.js.map","export const ColorType = {\n    UNKNOWN: -1,\n    GREYSCALE: 0,\n    TRUECOLOUR: 2,\n    INDEXED_COLOUR: 3,\n    GREYSCALE_ALPHA: 4,\n    TRUECOLOUR_ALPHA: 6,\n};\nexport const CompressionMethod = {\n    UNKNOWN: -1,\n    DEFLATE: 0,\n};\nexport const FilterMethod = {\n    UNKNOWN: -1,\n    ADAPTIVE: 0,\n};\nexport const InterlaceMethod = {\n    UNKNOWN: -1,\n    NO_INTERLACE: 0,\n    ADAM7: 1,\n};\nexport const DisposeOpType = {\n    NONE: 0,\n    BACKGROUND: 1,\n    PREVIOUS: 2,\n};\nexport const BlendOpType = {\n    SOURCE: 0,\n    OVER: 1,\n};\n//# sourceMappingURL=internal_types.js.map","import { IOBuffer } from 'iobuffer';\nimport { Inflate as Inflator, inflate } from 'pako';\nimport { checkCrc } from \"./helpers/crc.js\";\nimport { decodeInterlaceAdam7 } from \"./helpers/decode_interlace_adam7.js\";\nimport { decodeInterlaceNull } from \"./helpers/decode_interlace_null.js\";\nimport { checkSignature } from \"./helpers/signature.js\";\nimport { decodetEXt, readKeyword, textChunkName } from \"./helpers/text.js\";\nimport { BlendOpType, ColorType, CompressionMethod, DisposeOpType, FilterMethod, InterlaceMethod, } from \"./internal_types.js\";\nexport default class PngDecoder extends IOBuffer {\n    _checkCrc;\n    _inflator;\n    _png;\n    _apng;\n    _end;\n    _hasPalette;\n    _palette;\n    _hasTransparency;\n    _transparency;\n    _compressionMethod;\n    _filterMethod;\n    _interlaceMethod;\n    _colorType;\n    _isAnimated;\n    _numberOfFrames;\n    _numberOfPlays;\n    _frames;\n    _writingDataChunks;\n    constructor(data, options = {}) {\n        super(data);\n        const { checkCrc = false } = options;\n        this._checkCrc = checkCrc;\n        this._inflator = new Inflator();\n        this._png = {\n            width: -1,\n            height: -1,\n            channels: -1,\n            data: new Uint8Array(0),\n            depth: 1,\n            text: {},\n        };\n        this._apng = {\n            width: -1,\n            height: -1,\n            channels: -1,\n            depth: 1,\n            numberOfFrames: 1,\n            numberOfPlays: 0,\n            text: {},\n            frames: [],\n        };\n        this._end = false;\n        this._hasPalette = false;\n        this._palette = [];\n        this._hasTransparency = false;\n        this._transparency = new Uint16Array(0);\n        this._compressionMethod = CompressionMethod.UNKNOWN;\n        this._filterMethod = FilterMethod.UNKNOWN;\n        this._interlaceMethod = InterlaceMethod.UNKNOWN;\n        this._colorType = ColorType.UNKNOWN;\n        this._isAnimated = false;\n        this._numberOfFrames = 1;\n        this._numberOfPlays = 0;\n        this._frames = [];\n        this._writingDataChunks = false;\n        // PNG is always big endian\n        // https://www.w3.org/TR/PNG/#7Integers-and-byte-order\n        this.setBigEndian();\n    }\n    decode() {\n        checkSignature(this);\n        while (!this._end) {\n            const length = this.readUint32();\n            const type = this.readChars(4);\n            this.decodeChunk(length, type);\n        }\n        this.decodeImage();\n        return this._png;\n    }\n    decodeApng() {\n        checkSignature(this);\n        while (!this._end) {\n            const length = this.readUint32();\n            const type = this.readChars(4);\n            this.decodeApngChunk(length, type);\n        }\n        this.decodeApngImage();\n        return this._apng;\n    }\n    // https://www.w3.org/TR/PNG/#5Chunk-layout\n    decodeChunk(length, type) {\n        const offset = this.offset;\n        switch (type) {\n            // 11.2 Critical chunks\n            case 'IHDR': // 11.2.2 IHDR Image header\n                this.decodeIHDR();\n                break;\n            case 'PLTE': // 11.2.3 PLTE Palette\n                this.decodePLTE(length);\n                break;\n            case 'IDAT': // 11.2.4 IDAT Image data\n                this.decodeIDAT(length);\n                break;\n            case 'IEND': // 11.2.5 IEND Image trailer\n                this._end = true;\n                break;\n            // 11.3 Ancillary chunks\n            case 'tRNS': // 11.3.2.1 tRNS Transparency\n                this.decodetRNS(length);\n                break;\n            case 'iCCP': // 11.3.3.3 iCCP Embedded ICC profile\n                this.decodeiCCP(length);\n                break;\n            case textChunkName: // 11.3.4.3 tEXt Textual data\n                decodetEXt(this._png.text, this, length);\n                break;\n            case 'pHYs': // 11.3.5.3 pHYs Physical pixel dimensions\n                this.decodepHYs();\n                break;\n            default:\n                this.skip(length);\n                break;\n        }\n        if (this.offset - offset !== length) {\n            throw new Error(`Length mismatch while decoding chunk ${type}`);\n        }\n        if (this._checkCrc) {\n            checkCrc(this, length + 4, type);\n        }\n        else {\n            this.skip(4);\n        }\n    }\n    decodeApngChunk(length, type) {\n        const offset = this.offset;\n        if (type !== 'fdAT' && type !== 'IDAT' && this._writingDataChunks) {\n            this.pushDataToFrame();\n        }\n        switch (type) {\n            case 'acTL':\n                this.decodeACTL();\n                break;\n            case 'fcTL':\n                this.decodeFCTL();\n                break;\n            case 'fdAT':\n                this.decodeFDAT(length);\n                break;\n            default:\n                this.decodeChunk(length, type);\n                this.offset = offset + length;\n                break;\n        }\n        if (this.offset - offset !== length) {\n            throw new Error(`Length mismatch while decoding chunk ${type}`);\n        }\n        if (this._checkCrc) {\n            checkCrc(this, length + 4, type);\n        }\n        else {\n            this.skip(4);\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11IHDR\n    decodeIHDR() {\n        const image = this._png;\n        image.width = this.readUint32();\n        image.height = this.readUint32();\n        image.depth = checkBitDepth(this.readUint8());\n        const colorType = this.readUint8();\n        this._colorType = colorType;\n        let channels;\n        switch (colorType) {\n            case ColorType.GREYSCALE:\n                channels = 1;\n                break;\n            case ColorType.TRUECOLOUR:\n                channels = 3;\n                break;\n            case ColorType.INDEXED_COLOUR:\n                channels = 1;\n                break;\n            case ColorType.GREYSCALE_ALPHA:\n                channels = 2;\n                break;\n            case ColorType.TRUECOLOUR_ALPHA:\n                channels = 4;\n                break;\n            // Kept for exhaustiveness.\n            // eslint-disable-next-line unicorn/no-useless-switch-case\n            case ColorType.UNKNOWN:\n            default:\n                throw new Error(`Unknown color type: ${colorType}`);\n        }\n        this._png.channels = channels;\n        this._compressionMethod = this.readUint8();\n        if (this._compressionMethod !== CompressionMethod.DEFLATE) {\n            throw new Error(`Unsupported compression method: ${this._compressionMethod}`);\n        }\n        this._filterMethod = this.readUint8();\n        this._interlaceMethod = this.readUint8();\n    }\n    decodeACTL() {\n        this._numberOfFrames = this.readUint32();\n        this._numberOfPlays = this.readUint32();\n        this._isAnimated = true;\n    }\n    decodeFCTL() {\n        const image = {\n            sequenceNumber: this.readUint32(),\n            width: this.readUint32(),\n            height: this.readUint32(),\n            xOffset: this.readUint32(),\n            yOffset: this.readUint32(),\n            delayNumber: this.readUint16(),\n            delayDenominator: this.readUint16(),\n            disposeOp: this.readUint8(),\n            blendOp: this.readUint8(),\n            data: new Uint8Array(0),\n        };\n        this._frames.push(image);\n    }\n    // https://www.w3.org/TR/PNG/#11PLTE\n    decodePLTE(length) {\n        if (length % 3 !== 0) {\n            throw new RangeError(`PLTE field length must be a multiple of 3. Got ${length}`);\n        }\n        const l = length / 3;\n        this._hasPalette = true;\n        const palette = [];\n        this._palette = palette;\n        for (let i = 0; i < l; i++) {\n            palette.push([this.readUint8(), this.readUint8(), this.readUint8()]);\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11IDAT\n    decodeIDAT(length) {\n        this._writingDataChunks = true;\n        const dataLength = length;\n        const dataOffset = this.offset + this.byteOffset;\n        this._inflator.push(new Uint8Array(this.buffer, dataOffset, dataLength));\n        if (this._inflator.err) {\n            throw new Error(`Error while decompressing the data: ${this._inflator.err}`);\n        }\n        this.skip(length);\n    }\n    decodeFDAT(length) {\n        this._writingDataChunks = true;\n        let dataLength = length;\n        let dataOffset = this.offset + this.byteOffset;\n        dataOffset += 4;\n        dataLength -= 4;\n        this._inflator.push(new Uint8Array(this.buffer, dataOffset, dataLength));\n        if (this._inflator.err) {\n            throw new Error(`Error while decompressing the data: ${this._inflator.err}`);\n        }\n        this.skip(length);\n    }\n    // https://www.w3.org/TR/PNG/#11tRNS\n    decodetRNS(length) {\n        switch (this._colorType) {\n            case ColorType.GREYSCALE:\n            case ColorType.TRUECOLOUR: {\n                if (length % 2 !== 0) {\n                    throw new RangeError(`tRNS chunk length must be a multiple of 2. Got ${length}`);\n                }\n                if (length / 2 > this._png.width * this._png.height) {\n                    throw new Error(`tRNS chunk contains more alpha values than there are pixels (${length / 2} vs ${this._png.width * this._png.height})`);\n                }\n                this._hasTransparency = true;\n                this._transparency = new Uint16Array(length / 2);\n                for (let i = 0; i < length / 2; i++) {\n                    this._transparency[i] = this.readUint16();\n                }\n                break;\n            }\n            case ColorType.INDEXED_COLOUR: {\n                if (length > this._palette.length) {\n                    throw new Error(`tRNS chunk contains more alpha values than there are palette colors (${length} vs ${this._palette.length})`);\n                }\n                let i = 0;\n                for (; i < length; i++) {\n                    const alpha = this.readByte();\n                    this._palette[i].push(alpha);\n                }\n                for (; i < this._palette.length; i++) {\n                    this._palette[i].push(255);\n                }\n                break;\n            }\n            // Kept for exhaustiveness.\n            /* eslint-disable unicorn/no-useless-switch-case */\n            case ColorType.UNKNOWN:\n            case ColorType.GREYSCALE_ALPHA:\n            case ColorType.TRUECOLOUR_ALPHA:\n            default: {\n                throw new Error(`tRNS chunk is not supported for color type ${this._colorType}`);\n            }\n            /* eslint-enable unicorn/no-useless-switch-case */\n        }\n    }\n    // https://www.w3.org/TR/PNG/#11iCCP\n    decodeiCCP(length) {\n        const name = readKeyword(this);\n        const compressionMethod = this.readUint8();\n        if (compressionMethod !== CompressionMethod.DEFLATE) {\n            throw new Error(`Unsupported iCCP compression method: ${compressionMethod}`);\n        }\n        const compressedProfile = this.readBytes(length - name.length - 2);\n        this._png.iccEmbeddedProfile = {\n            name,\n            profile: inflate(compressedProfile),\n        };\n    }\n    // https://www.w3.org/TR/PNG/#11pHYs\n    decodepHYs() {\n        const ppuX = this.readUint32();\n        const ppuY = this.readUint32();\n        const unitSpecifier = this.readByte();\n        this._png.resolution = {\n            x: ppuX,\n            y: ppuY,\n            unit: unitSpecifier,\n        };\n    }\n    decodeApngImage() {\n        this._apng.width = this._png.width;\n        this._apng.height = this._png.height;\n        this._apng.channels = this._png.channels;\n        this._apng.depth = this._png.depth;\n        this._apng.numberOfFrames = this._numberOfFrames;\n        this._apng.numberOfPlays = this._numberOfPlays;\n        this._apng.text = this._png.text;\n        this._apng.resolution = this._png.resolution;\n        for (let i = 0; i < this._numberOfFrames; i++) {\n            const newFrame = {\n                sequenceNumber: this._frames[i].sequenceNumber,\n                delayNumber: this._frames[i].delayNumber,\n                delayDenominator: this._frames[i].delayDenominator,\n                data: this._apng.depth === 8\n                    ? new Uint8Array(this._apng.width * this._apng.height * this._apng.channels)\n                    : new Uint16Array(this._apng.width * this._apng.height * this._apng.channels),\n            };\n            const frame = this._frames.at(i);\n            if (frame) {\n                frame.data = decodeInterlaceNull({\n                    data: frame.data,\n                    width: frame.width,\n                    height: frame.height,\n                    channels: this._apng.channels,\n                    depth: this._apng.depth,\n                });\n                if (this._hasPalette) {\n                    this._apng.palette = this._palette;\n                }\n                if (this._hasTransparency) {\n                    this._apng.transparency = this._transparency;\n                }\n                if (i === 0 ||\n                    (frame.xOffset === 0 &&\n                        frame.yOffset === 0 &&\n                        frame.width === this._png.width &&\n                        frame.height === this._png.height)) {\n                    newFrame.data = frame.data;\n                }\n                else {\n                    const prevFrame = this._apng.frames.at(i - 1);\n                    this.disposeFrame(frame, prevFrame, newFrame);\n                    this.addFrameDataToCanvas(newFrame, frame);\n                }\n                this._apng.frames.push(newFrame);\n            }\n        }\n        return this._apng;\n    }\n    disposeFrame(frame, prevFrame, imageFrame) {\n        switch (frame.disposeOp) {\n            case DisposeOpType.NONE:\n                break;\n            case DisposeOpType.BACKGROUND:\n                for (let row = 0; row < this._png.height; row++) {\n                    for (let col = 0; col < this._png.width; col++) {\n                        const index = (row * frame.width + col) * this._png.channels;\n                        for (let channel = 0; channel < this._png.channels; channel++) {\n                            imageFrame.data[index + channel] = 0;\n                        }\n                    }\n                }\n                break;\n            case DisposeOpType.PREVIOUS:\n                imageFrame.data.set(prevFrame.data);\n                break;\n            default:\n                throw new Error('Unknown disposeOp');\n        }\n    }\n    addFrameDataToCanvas(imageFrame, frame) {\n        const maxValue = 1 << this._png.depth;\n        const calculatePixelIndices = (row, col) => {\n            const index = ((row + frame.yOffset) * this._png.width + frame.xOffset + col) *\n                this._png.channels;\n            const frameIndex = (row * frame.width + col) * this._png.channels;\n            return { index, frameIndex };\n        };\n        switch (frame.blendOp) {\n            case BlendOpType.SOURCE:\n                for (let row = 0; row < frame.height; row++) {\n                    for (let col = 0; col < frame.width; col++) {\n                        const { index, frameIndex } = calculatePixelIndices(row, col);\n                        for (let channel = 0; channel < this._png.channels; channel++) {\n                            imageFrame.data[index + channel] =\n                                frame.data[frameIndex + channel];\n                        }\n                    }\n                }\n                break;\n            // https://www.w3.org/TR/png-3/#13Alpha-channel-processing\n            case BlendOpType.OVER:\n                for (let row = 0; row < frame.height; row++) {\n                    for (let col = 0; col < frame.width; col++) {\n                        const { index, frameIndex } = calculatePixelIndices(row, col);\n                        for (let channel = 0; channel < this._png.channels; channel++) {\n                            const sourceAlpha = frame.data[frameIndex + this._png.channels - 1] / maxValue;\n                            const foregroundValue = channel % (this._png.channels - 1) === 0\n                                ? 1\n                                : frame.data[frameIndex + channel];\n                            const value = Math.floor(sourceAlpha * foregroundValue +\n                                (1 - sourceAlpha) * imageFrame.data[index + channel]);\n                            imageFrame.data[index + channel] += value;\n                        }\n                    }\n                }\n                break;\n            default:\n                throw new Error('Unknown blendOp');\n        }\n    }\n    decodeImage() {\n        if (this._inflator.err) {\n            throw new Error(`Error while decompressing the data: ${this._inflator.err}`);\n        }\n        const data = this._isAnimated\n            ? (this._frames?.at(0)).data\n            : this._inflator.result;\n        if (this._filterMethod !== FilterMethod.ADAPTIVE) {\n            throw new Error(`Filter method ${this._filterMethod} not supported`);\n        }\n        if (this._interlaceMethod === InterlaceMethod.NO_INTERLACE) {\n            this._png.data = decodeInterlaceNull({\n                data: data,\n                width: this._png.width,\n                height: this._png.height,\n                channels: this._png.channels,\n                depth: this._png.depth,\n            });\n        }\n        else if (this._interlaceMethod === InterlaceMethod.ADAM7) {\n            this._png.data = decodeInterlaceAdam7({\n                data: data,\n                width: this._png.width,\n                height: this._png.height,\n                channels: this._png.channels,\n                depth: this._png.depth,\n            });\n        }\n        else {\n            throw new Error(`Interlace method ${this._interlaceMethod} not supported`);\n        }\n        if (this._hasPalette) {\n            this._png.palette = this._palette;\n        }\n        if (this._hasTransparency) {\n            this._png.transparency = this._transparency;\n        }\n    }\n    pushDataToFrame() {\n        const result = this._inflator.result;\n        const lastFrame = this._frames.at(-1);\n        if (lastFrame) {\n            lastFrame.data = result;\n        }\n        else {\n            this._frames.push({\n                sequenceNumber: 0,\n                width: this._png.width,\n                height: this._png.height,\n                xOffset: 0,\n                yOffset: 0,\n                delayNumber: 0,\n                delayDenominator: 0,\n                disposeOp: DisposeOpType.NONE,\n                blendOp: BlendOpType.SOURCE,\n                data: result,\n            });\n        }\n        this._inflator = new Inflator();\n        this._writingDataChunks = false;\n    }\n}\nfunction checkBitDepth(value) {\n    if (value !== 1 &&\n        value !== 2 &&\n        value !== 4 &&\n        value !== 8 &&\n        value !== 16) {\n        throw new Error(`invalid bit depth: ${value}`);\n    }\n    return value;\n}\n//# sourceMappingURL=png_decoder.js.map","import { IOBuffer } from 'iobuffer';\nimport { deflate } from 'pako';\nimport { writeCrc } from \"./helpers/crc.js\";\nimport { writeSignature } from \"./helpers/signature.js\";\nimport { encodetEXt } from \"./helpers/text.js\";\nimport { ColorType, CompressionMethod, FilterMethod, InterlaceMethod, } from \"./internal_types.js\";\nconst defaultZlibOptions = {\n    level: 3,\n};\nexport default class PngEncoder extends IOBuffer {\n    _png;\n    _zlibOptions;\n    _colorType;\n    _interlaceMethod;\n    constructor(data, options = {}) {\n        super();\n        this._colorType = ColorType.UNKNOWN;\n        this._zlibOptions = { ...defaultZlibOptions, ...options.zlib };\n        this._png = this._checkData(data);\n        this._interlaceMethod =\n            (options.interlace === 'Adam7'\n                ? InterlaceMethod.ADAM7\n                : InterlaceMethod.NO_INTERLACE) ?? InterlaceMethod.NO_INTERLACE;\n        this.setBigEndian();\n    }\n    encode() {\n        writeSignature(this);\n        this.encodeIHDR();\n        if (this._png.palette) {\n            this.encodePLTE();\n            if (this._png.palette[0].length === 4) {\n                this.encodeTRNS();\n            }\n        }\n        this.encodeData();\n        if (this._png.text) {\n            for (const [keyword, text] of Object.entries(this._png.text)) {\n                encodetEXt(this, keyword, text);\n            }\n        }\n        this.encodeIEND();\n        return this.toArray();\n    }\n    // https://www.w3.org/TR/PNG/#11IHDR\n    encodeIHDR() {\n        this.writeUint32(13);\n        this.writeChars('IHDR');\n        this.writeUint32(this._png.width);\n        this.writeUint32(this._png.height);\n        this.writeByte(this._png.depth);\n        this.writeByte(this._colorType);\n        this.writeByte(CompressionMethod.DEFLATE);\n        this.writeByte(FilterMethod.ADAPTIVE);\n        this.writeByte(this._interlaceMethod);\n        writeCrc(this, 17);\n    }\n    // https://www.w3.org/TR/PNG/#11IEND\n    encodeIEND() {\n        this.writeUint32(0);\n        this.writeChars('IEND');\n        writeCrc(this, 4);\n    }\n    encodePLTE() {\n        const paletteLength = this._png.palette?.length * 3;\n        this.writeUint32(paletteLength);\n        this.writeChars('PLTE');\n        for (const color of this._png.palette) {\n            this.writeByte(color[0]);\n            this.writeByte(color[1]);\n            this.writeByte(color[2]);\n        }\n        writeCrc(this, 4 + paletteLength);\n    }\n    encodeTRNS() {\n        const alpha = this._png.palette.filter((color) => {\n            return color.at(-1) !== 255;\n        });\n        this.writeUint32(alpha.length);\n        this.writeChars('tRNS');\n        for (const el of alpha) {\n            this.writeByte(el.at(-1));\n        }\n        writeCrc(this, 4 + alpha.length);\n    }\n    // https://www.w3.org/TR/PNG/#11IDAT\n    encodeIDAT(data) {\n        this.writeUint32(data.length);\n        this.writeChars('IDAT');\n        this.writeBytes(data);\n        writeCrc(this, data.length + 4);\n    }\n    encodeData() {\n        const { width, height, channels, depth, data } = this._png;\n        const slotsPerLine = depth <= 8\n            ? Math.ceil((width * depth) / 8) * channels\n            : Math.ceil((((width * depth) / 8) * channels) / 2);\n        const newData = new IOBuffer().setBigEndian();\n        let offset = 0;\n        if (this._interlaceMethod === InterlaceMethod.NO_INTERLACE) {\n            for (let i = 0; i < height; i++) {\n                newData.writeByte(0); // no filter\n                if (depth === 16) {\n                    offset = writeDataUint16(data, newData, slotsPerLine, offset);\n                }\n                else {\n                    offset = writeDataBytes(data, newData, slotsPerLine, offset);\n                }\n            }\n        }\n        else if (this._interlaceMethod === InterlaceMethod.ADAM7) {\n            // Adam7 interlacing\n            offset = writeDataInterlaced(this._png, data, newData, offset);\n        }\n        const buffer = newData.toArray();\n        const compressed = deflate(buffer, this._zlibOptions);\n        this.encodeIDAT(compressed);\n    }\n    _checkData(data) {\n        const { colorType, channels, depth } = getColorType(data, data.palette);\n        const png = {\n            width: checkInteger(data.width, 'width'),\n            height: checkInteger(data.height, 'height'),\n            channels,\n            data: data.data,\n            depth,\n            text: data.text,\n            palette: data.palette,\n        };\n        this._colorType = colorType;\n        const expectedSize = depth < 8\n            ? Math.ceil((png.width * depth) / 8) * png.height * channels\n            : png.width * png.height * channels;\n        if (png.data.length !== expectedSize) {\n            throw new RangeError(`wrong data size. Found ${png.data.length}, expected ${expectedSize}`);\n        }\n        return png;\n    }\n}\nfunction checkInteger(value, name) {\n    if (Number.isInteger(value) && value > 0) {\n        return value;\n    }\n    throw new TypeError(`${name} must be a positive integer`);\n}\nfunction getColorType(data, palette) {\n    const { channels = 4, depth = 8 } = data;\n    if (channels !== 4 && channels !== 3 && channels !== 2 && channels !== 1) {\n        throw new RangeError(`unsupported number of channels: ${channels}`);\n    }\n    const returnValue = {\n        channels,\n        depth,\n        colorType: ColorType.UNKNOWN,\n    };\n    switch (channels) {\n        case 4:\n            returnValue.colorType = ColorType.TRUECOLOUR_ALPHA;\n            break;\n        case 3:\n            returnValue.colorType = ColorType.TRUECOLOUR;\n            break;\n        case 1:\n            if (palette) {\n                returnValue.colorType = ColorType.INDEXED_COLOUR;\n            }\n            else {\n                returnValue.colorType = ColorType.GREYSCALE;\n            }\n            break;\n        case 2:\n            returnValue.colorType = ColorType.GREYSCALE_ALPHA;\n            break;\n        default:\n            throw new Error('unsupported number of channels');\n    }\n    return returnValue;\n}\nfunction writeDataBytes(data, newData, slotsPerLine, offset) {\n    for (let j = 0; j < slotsPerLine; j++) {\n        newData.writeByte(data[offset++]);\n    }\n    return offset;\n}\nfunction writeDataInterlaced(imageData, data, newData, offset) {\n    const passes = [\n        { x: 0, y: 0, xStep: 8, yStep: 8 },\n        { x: 4, y: 0, xStep: 8, yStep: 8 },\n        { x: 0, y: 4, xStep: 4, yStep: 8 },\n        { x: 2, y: 0, xStep: 4, yStep: 4 },\n        { x: 0, y: 2, xStep: 2, yStep: 4 },\n        { x: 1, y: 0, xStep: 2, yStep: 2 },\n        { x: 0, y: 1, xStep: 1, yStep: 2 },\n    ];\n    const { width, height, channels, depth } = imageData;\n    let pixelSize;\n    if (depth === 16) {\n        pixelSize = (channels * depth) / 8 / 2;\n    }\n    else {\n        pixelSize = (channels * depth) / 8;\n    }\n    // Process each pass\n    for (let passIndex = 0; passIndex < 7; passIndex++) {\n        const pass = passes[passIndex];\n        const passWidth = Math.floor((width - pass.x + pass.xStep - 1) / pass.xStep);\n        const passHeight = Math.floor((height - pass.y + pass.yStep - 1) / pass.yStep);\n        if (passWidth <= 0 || passHeight <= 0)\n            continue;\n        const passLineBytes = passWidth * pixelSize;\n        // For each scanline in this pass\n        for (let y = 0; y < passHeight; y++) {\n            const imageY = pass.y + y * pass.yStep;\n            // Extract raw scanline data\n            const rawScanline = depth <= 8\n                ? new Uint8Array(passLineBytes)\n                : new Uint16Array(passLineBytes);\n            let rawOffset = 0;\n            for (let x = 0; x < passWidth; x++) {\n                const imageX = pass.x + x * pass.xStep;\n                if (imageX < width && imageY < height) {\n                    const srcPos = (imageY * width + imageX) * pixelSize;\n                    for (let i = 0; i < pixelSize; i++) {\n                        rawScanline[rawOffset++] = data[srcPos + i];\n                    }\n                }\n            }\n            newData.writeByte(0); // no filter\n            if (depth === 8) {\n                newData.writeBytes(rawScanline);\n            }\n            else if (depth === 16) {\n                for (const value of rawScanline) {\n                    newData.writeByte((value >> 8) & 0xff); // High byte\n                    newData.writeByte(value & 0xff);\n                }\n            }\n        }\n    }\n    return offset;\n}\nfunction writeDataUint16(data, newData, slotsPerLine, offset) {\n    for (let j = 0; j < slotsPerLine; j++) {\n        newData.writeUint16(data[offset++]);\n    }\n    return offset;\n}\n//# sourceMappingURL=png_encoder.js.map","import PngDecoder from \"./png_decoder.js\";\nimport PngEncoder from \"./png_encoder.js\";\nexport { hasPngSignature } from \"./helpers/signature.js\";\nexport * from \"./types.js\";\nfunction decodePng(data, options) {\n    const decoder = new PngDecoder(data, options);\n    return decoder.decode();\n}\nfunction encodePng(png, options) {\n    const encoder = new PngEncoder(png, options);\n    return encoder.encode();\n}\nfunction decodeApng(data, options) {\n    const decoder = new PngDecoder(data, options);\n    return decoder.decodeApng();\n}\nexport { decodeApng, decodePng as decode, encodePng as encode };\nexport { convertIndexedToRgb } from \"./convert_indexed_to_rgb.js\";\n//# sourceMappingURL=index.js.map","import { encode } from 'fast-png';\nimport { Mask } from '../Mask.js';\n/**\n * Creates a PNG buffer from an image.\n * @param image - The image instance.\n * @param options - PNG encoding options.\n * @returns The buffer.\n */\nexport function encodePng(image, options) {\n    if ((image.colorModel !== 'RGB' &&\n        image.colorModel !== 'RGBA' &&\n        image.colorModel !== 'GREY' &&\n        image.colorModel !== 'GREYA') ||\n        image instanceof Mask) {\n        image = image.convertColor('GREY');\n    }\n    const { bitDepth: depth, ...other } = image.getRawImage();\n    return encode({\n        depth,\n        ...other,\n    }, options);\n}\n//# sourceMappingURL=encodePng.js.map","import { P, match } from 'ts-pattern';\nimport { encodeBmp } from './encodeBmp.js';\nimport { encodeJpeg } from './encodeJpeg.js';\nimport { encodePng } from './encodePng.js';\nexport const ImageFormat = {\n    PNG: 'png',\n    JPG: 'jpg',\n    JPEG: 'jpeg',\n    BMP: 'bmp',\n};\nexport const defaultPng = { format: 'png' };\n/**\n * Encodes the image to the specified format\n * @param image - Image to encode.\n * @param options - Format and options passed to the encoder.\n * @returns The encoded image.\n */\nexport function encode(image, options = defaultPng) {\n    return match(options)\n        .with({ format: 'png' }, (options) => encodePng(image, options.encoderOptions))\n        .with({ format: P.union('jpg', 'jpeg') }, (options) => encodeJpeg(image, options.encoderOptions))\n        .with({ format: 'bmp' }, () => encodeBmp(image))\n        .exhaustive();\n}\n//# sourceMappingURL=encode.js.map","/**\n * Returns builtin Node.js modules or throws an error saying that the method is only implemented in Node.js.\n * @param methodName - Name of the method that calls this function\n * @returns - The `fs`, `path` and `url` Node.js modules.\n */\nexport function getNodeApiOrThrow(methodName) {\n    if (typeof process === 'undefined' ||\n        typeof process.getBuiltinModule !== 'function') {\n        throw new Error(`${methodName} is only implemented for Node.js`);\n    }\n    return {\n        fs: process.getBuiltinModule('node:fs'),\n        path: process.getBuiltinModule('node:path'),\n        url: process.getBuiltinModule('node:url'),\n    };\n}\n//# sourceMappingURL=cross_platform.js.map","import { Mask } from '../Mask.js';\nimport { getNodeApiOrThrow } from '../utils/cross_platform.js';\nimport { encode } from './encode.js';\n/**\n * Asynchronously write an image to the disk.\n * This method is only implemented for Node.js.\n * @param path - Path where the image should be written.\n * @param image - Image to save.\n * @param options - Encode options.\n */\nexport async function write(path, image, options) {\n    const nodeApi = getNodeApiOrThrow('write');\n    if (typeof path !== 'string') {\n        path = nodeApi.url.fileURLToPath(path);\n    }\n    if (image instanceof Mask) {\n        image = image.convertColor('GREY');\n    }\n    const toWrite = getDataToWrite(path, image, options, nodeApi);\n    if (options?.recursive) {\n        const dir = nodeApi.path.dirname(path);\n        await nodeApi.fs.promises.mkdir(dir, { recursive: true });\n    }\n    await nodeApi.fs.promises.writeFile(path, toWrite);\n}\n/**\n * Synchronous version of @see {@link write}.\n * This method is only implemented for Node.js.\n * @param path - Path where the image should be written.\n * @param image - Image to save.\n * @param options - Encode options.\n */\nexport function writeSync(path, image, options) {\n    const nodeApi = getNodeApiOrThrow('writeSync');\n    if (typeof path !== 'string') {\n        path = nodeApi.url.fileURLToPath(path);\n    }\n    const toWrite = getDataToWrite(path, image, options, nodeApi);\n    if (options?.recursive) {\n        const dir = nodeApi.path.dirname(path);\n        nodeApi.fs.mkdirSync(dir, { recursive: true });\n    }\n    nodeApi.fs.writeFileSync(path, toWrite);\n}\n/**\n * Encode the image to the format specified by the file's extension.\n * @param destinationPath - Image destination.\n * @param image - Image to save.\n * @param options - Encode options.\n * @param nodeApi - Object with Node.js APIs.\n * @returns Buffer containing the encoded image.\n */\nfunction getDataToWrite(destinationPath, image, options, nodeApi) {\n    if (!options || !('format' in options)) {\n        const extension = nodeApi.path\n            .extname(destinationPath)\n            .slice(1)\n            .toLowerCase();\n        if (extension === 'png' ||\n            extension === 'jpg' ||\n            extension === 'jpeg' ||\n            extension === 'bmp') {\n            return encode(image, { ...options, format: extension });\n        }\n        else {\n            throw new RangeError('image format could not be determined from file extension. Use a supported extension or specify the format option');\n        }\n    }\n    else {\n        return encode(image, options);\n    }\n}\n//# sourceMappingURL=write.js.map","import { Image } from '../Image.js';\nimport { assert } from '../utils/validators/assert.js';\n// TODO: Create nodejs version that throws an error\n/**\n * Draw the image in an HTML canvas.\n * @param image - The image to draw.\n * @param canvas - The HTML canvas.\n * @param options - Write canvas options.\n */\nexport function writeCanvas(image, canvas, options = {}) {\n    if (image.colorModel !== 'RGBA') {\n        image = image.convertColor('RGBA');\n    }\n    if (image.bitDepth !== 8 && image instanceof Image) {\n        image = image.convertBitDepth(8);\n    }\n    const { resizeCanvas = true, dx = 0, dy = 0, dirtyX = 0, dirtyY = 0, dirtyWidth = image.width, dirtyHeight = image.height, } = options;\n    if (resizeCanvas) {\n        canvas.width = image.width;\n        canvas.height = image.height;\n    }\n    const ctx = canvas.getContext('2d');\n    assert(ctx);\n    const data = image.getRawImage().data;\n    ctx.putImageData(new ImageData(\n    // @ts-expect-error ImageData types don't support SharedArrayBuffer.\n    new Uint8ClampedArray(data.buffer, data.byteOffset, data.byteLength), image.width, image.height), dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n}\n//# sourceMappingURL=writeCanvas.js.map","const base64codes = Uint8Array.from([\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,\n    255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 255,\n    255, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 0, 255, 255,\n    255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n    21, 22, 23, 24, 25, 255, 255, 255, 255, 255, 255, 26, 27, 28, 29, 30, 31, 32,\n    33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n]);\n/**\n * Convert a Uint8Array containing a base64 encoded bytes to a Uint8Array containing decoded values\n * @param input\n * @returns a Uint8Array containing the decoded bytes\n */\nexport function decode(input) {\n    if (!ArrayBuffer.isView(input)) {\n        input = new Uint8Array(input);\n    }\n    if (input.length % 4 !== 0) {\n        throw new Error('Unable to parse base64 string.');\n    }\n    const output = new Uint8Array(3 * (input.length / 4));\n    if (input.length === 0)\n        return output;\n    const missingOctets = input.at(-2) === 61 ? 2 : input.at(-1) === 61 ? 1 : 0;\n    for (let i = 0, j = 0; i < input.length; i += 4, j += 3) {\n        const buffer = (base64codes[input[i]] << 18) |\n            (base64codes[input[i + 1]] << 12) |\n            (base64codes[input[i + 2]] << 6) |\n            base64codes[input[i + 3]];\n        output[j] = buffer >> 16;\n        output[j + 1] = (buffer >> 8) & 0xff;\n        output[j + 2] = buffer & 0xff;\n    }\n    return output.subarray(0, output.length - missingOctets);\n}\n//# sourceMappingURL=decode.js.map","export const base64codes = Uint8Array.from([\n    65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n    84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,\n    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,\n    122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47,\n]);\n//# sourceMappingURL=base64codes.js.map","import { base64codes } from './base64codes';\n/*\n3 bytes are encoded in 4 bytes of base64\n11111122 22223333 33444444\nWe want to be the fastest possible, so we will use a lookup table to convert 12 bits to 2 bytes of base64\nBut in order still to avoid one operation we will create 2 of those lookup tables.\n- One for 2222 11111122\n- One for 3333 33444444\n*/\n// 2222 11111122\nconst base64codes1 = new Uint32Array(64 * 64);\nfor (let i = 0; i < 64; i++) {\n    for (let j = 0; j < 64; j++) {\n        const index = (i << 2) | ((j & 0x30) >> 4) | ((j & 0x0f) << 8);\n        base64codes1[index] = base64codes[i] | (base64codes[j] << 8);\n    }\n}\n// 3333 33444444 that we store on the bits 16->31 just to allow to make directly the OR with the previous value\nconst base64codes2 = new Uint32Array(64 * 64);\nfor (let i = 0; i < 64; i++) {\n    for (let j = 0; j < 64; j++) {\n        const index = (i << 6) | j;\n        base64codes2[index] = (base64codes[i] << 16) | (base64codes[j] << 24);\n    }\n}\n/**\n * Convert a Uint8Array containing bytes to a Uint8Array containing the base64 encoded values\n * @param input\n * @returns a Uint8Array containing the encoded bytes\n */\nexport function encodeFast(input) {\n    const output32 = new Uint32Array(Math.ceil(input.length / 3));\n    let i, j;\n    for (i = 2, j = 0; i < input.length; i += 3, j++) {\n        output32[j] =\n            base64codes1[input[i - 2] | ((input[i - 1] & 0xf0) << 4)] |\n                base64codes2[input[i] | ((input[i - 1] & 0x0f) << 8)];\n    }\n    if (i === input.length + 1) {\n        // 1 octet yet to write\n        output32[j] =\n            base64codes[input[i - 2] >> 2] |\n                (base64codes[(input[i - 2] & 0x03) << 4] << 8) |\n                (15677 << 16);\n    }\n    if (i === input.length) {\n        // 2 octets yet to write\n        output32[j] =\n            base64codes[input[i - 2] >> 2] |\n                (base64codes[((input[i - 2] & 0x03) << 4) | (input[i - 1] >> 4)] << 8) |\n                (base64codes[(input[i - 1] & 0x0f) << 2] << 16) |\n                (61 << 24);\n    }\n    const output8 = new Uint8Array(output32.buffer);\n    return output8;\n}\n//# sourceMappingURL=encodeFast.js.map","import { encode as uint8encode } from 'uint8-base64';\nimport { defaultPng, encode } from './encode.js';\n/**\n * Converts image into Data URL string.\n * @param image - Image to get base64 encoding from.\n * @param options - Encoding options.\n * @returns base64 string.\n */\nexport function encodeDataURL(image, options = defaultPng) {\n    const buffer = encode(image, options);\n    const base64 = uint8encode(buffer);\n    const base64Data = new TextDecoder().decode(base64);\n    return `data:image/${options.format};base64,${base64Data}`;\n}\n//# sourceMappingURL=encodeDataURL.js.map","import { Matrix } from 'ml-matrix';\n/**\n * Convert row/column points to a matrix.\n * Last row is padded with **ones** (ignore third dimension).\n * @param points - Points to process.\n * @returns The matrix.\n */\nexport function getMatrixFromPoints(points) {\n    const matrix = new Matrix(3, points.length);\n    for (let i = 0; i < points.length; i++) {\n        matrix.set(0, i, points[i].column);\n        matrix.set(1, i, points[i].row);\n        matrix.set(2, i, 1);\n    }\n    return matrix;\n}\n//# sourceMappingURL=getMatrixFromPoints.js.map","import { getAffineTransform } from 'ml-affine-transform';\nimport { getMatrixFromPoints } from './getMatrixFromPoints.js';\n/**\n * The fit function for an affine transformation.\n * Get the best transformation parameters for the given source and destination.\n * @param source - Source points.\n * @param destination - Destination points.\n * @returns The model parameters in the format [angle, xTranslation, yTranslation]\n */\nexport function affineFitFunction(source, destination) {\n    const sourceMatrix = getMatrixFromPoints(source);\n    const destinationMatrix = getMatrixFromPoints(destination);\n    const result = getAffineTransform(sourceMatrix, destinationMatrix);\n    return [\n        result.rotation,\n        result.translation.x,\n        result.translation.y,\n        result.scale,\n    ];\n}\n//# sourceMappingURL=affineFitFunction.js.map","/**\n * Generate a function that applies the given transformation parameters to a point.\n * The transform is an array of number in the format: [angle, x, y, scale].\n * @param transform - Transformation to apply.\n * @returns Function to transform a point.\n */\nexport function createAffineTransformModel(transform) {\n    if (transform.length !== 4) {\n        throw new Error('Transform had wrong number of parameters');\n    }\n    return (point) => {\n        const angle = (transform[0] * Math.PI) / 180;\n        const xTranslation = transform[1];\n        const yTranslation = transform[2];\n        const scale = transform[3];\n        const column = scale * (Math.cos(angle) * point.column - Math.sin(angle) * point.row) +\n            xTranslation;\n        const row = scale * (Math.sin(angle) * point.column + Math.cos(angle) * point.row) +\n            yTranslation;\n        return { column, row };\n    };\n}\n//# sourceMappingURL=createAffineTransformModel.js.map","/**\n * Compute the distance between point 1 and point 2.\n * @param point1 - First point.\n * @param point2 - Second  point.\n * @returns Euclidean distance.\n */\nexport function getEuclideanDistance(point1, point2) {\n    return Math.hypot(point1.row - point2.row, point1.column - point2.column);\n}\n//# sourceMappingURL=getEuclideanDistance.js.map","/**\n * Crop source image for contrast enhancement.\n * @param source - Source image enlarged compared to the destination image.\n * @param destination - Destination image.\n * @param destinationOrigin - Estimated origin of the destination image in the source image (relative to top-left corner).\n * @returns The source image without margins.\n */\nexport function getSourceWithoutMargins(source, destination, destinationOrigin) {\n    const width = Math.min(destination.width, source.width - destinationOrigin.column);\n    const height = Math.min(destination.height, source.height - destinationOrigin.row);\n    return source.crop({\n        origin: { row: destinationOrigin.row, column: destinationOrigin.column },\n        width,\n        height,\n    });\n}\n//# sourceMappingURL=getSourceWithoutMargins.js.map","import { getAffineTransform as matrixGetAffineTransform } from 'ml-affine-transform';\nimport { ransac } from 'ml-ransac';\nimport { getBrief } from '../../featureMatching/descriptors/getBrief.js';\nimport { Montage, MontageDisposition, bruteForceOneMatch, getCrosscheckMatches, } from '../../featureMatching/index.js';\nimport { filterEuclideanDistance } from '../../featureMatching/matching/filterEuclideanDistance.js';\nimport { writeSync } from '../../save/index.js';\nimport { ImageColorModel } from '../../utils/constants/colorModels.js';\nimport { getMinMax } from '../../utils/getMinMax.js';\nimport { affineFitFunction } from './affineFitFunction.js';\nimport { createAffineTransformModel } from './createAffineTransformModel.js';\nimport { getEuclideanDistance } from './getEuclideanDistance.js';\nimport { getMatrixFromPoints } from './getMatrixFromPoints.js';\nimport { getSourceWithoutMargins } from './utils/getSourceWithoutMargins.js';\n/**\n * Get the affine transformation from the source to the destination image.\n * @param source - Source image. Should be the image to align on the reference image.\n * It can have an additional margin, specified in the options.\n * @param destination - Destination image. Should be the reference image.\n * @param options - Get destination translation options.\n * @returns The affine transformation from source to destination image.\n */\nexport function getAffineTransform(source, destination, options = {}) {\n    const { centroidPatchDiameter = 31, bestKeypointRadius = 5, enhanceContrast = true, crosscheck = true, destinationOrigin = { column: 0, row: 0 }, maxRansacNbIterations, debug = false, debugImagePath = `${import.meta.dirname}/montage.png`, } = options;\n    if (source.colorModel !== ImageColorModel.GREY) {\n        source = source.grey();\n    }\n    if (destination.colorModel !== ImageColorModel.GREY) {\n        destination = destination.grey();\n    }\n    // enhance images contrast\n    if (enhanceContrast) {\n        const sourceWithoutMargin = getSourceWithoutMargins(source, destination, destinationOrigin);\n        const sourceExtremums = getMinMax(sourceWithoutMargin);\n        source.level({\n            inputMin: sourceExtremums.min[0],\n            inputMax: sourceExtremums.max[0],\n            out: source,\n        });\n        const destinationExtremums = getMinMax(destination);\n        destination.level({\n            inputMin: destinationExtremums.min[0],\n            inputMax: destinationExtremums.max[0],\n            out: destination,\n        });\n    }\n    // compute briefs\n    const sourceBrief = getBrief(source, {\n        centroidPatchDiameter,\n        bestKptRadius: bestKeypointRadius,\n    });\n    const destinationBrief = getBrief(destination, {\n        centroidPatchDiameter,\n        bestKptRadius: bestKeypointRadius,\n    });\n    const nbSourceKeypoints = sourceBrief.keypoints.length;\n    const nbDestinationKeypoints = destinationBrief.keypoints.length;\n    // match reference and destination keypoints\n    let matches = [];\n    if (crosscheck) {\n        matches = getCrosscheckMatches(sourceBrief.descriptors, destinationBrief.descriptors);\n    }\n    else {\n        matches = bruteForceOneMatch(sourceBrief.descriptors, destinationBrief.descriptors);\n        matches = filterEuclideanDistance(matches, sourceBrief.keypoints, destinationBrief.keypoints, { origin: destinationOrigin });\n    }\n    if (matches.length < 2) {\n        throw new Error('Insufficient number of matches found to compute affine transform (less than 2).');\n    }\n    // extract source and destination points\n    let sourcePoints = [];\n    let destinationPoints = [];\n    for (const match of matches) {\n        sourcePoints.push(sourceBrief.keypoints[match.sourceIndex].origin);\n        destinationPoints.push(destinationBrief.keypoints[match.destinationIndex].origin);\n    }\n    // find inliers with ransac\n    let nbInliers = sourcePoints.length;\n    let nbRansacIterations = 0;\n    let inliers = [0, 1];\n    if (sourcePoints.length > 2) {\n        const ransacResult = ransac(sourcePoints, destinationPoints, {\n            distanceFunction: getEuclideanDistance,\n            modelFunction: createAffineTransformModel,\n            fitFunction: affineFitFunction,\n            maxNbIterations: maxRansacNbIterations,\n        });\n        nbRansacIterations = ransacResult.nbIterations;\n        inliers = ransacResult.inliers;\n        nbInliers = inliers.length;\n        const newSrcPoints = [];\n        const newDstPoints = [];\n        for (const inlier of inliers) {\n            newSrcPoints.push(sourcePoints[inlier]);\n            newDstPoints.push(destinationPoints[inlier]);\n        }\n        sourcePoints = newSrcPoints;\n        destinationPoints = newDstPoints;\n    }\n    // create debug image\n    if (debug) {\n        const montage = new Montage(source, destination, {\n            disposition: MontageDisposition.VERTICAL,\n        });\n        montage.drawMatches(matches, sourceBrief.keypoints, destinationBrief.keypoints, { showDistance: true });\n        const inlierMatches = [];\n        for (const inlier of inliers) {\n            inlierMatches.push(matches[inlier]);\n        }\n        montage.drawMatches(inlierMatches, sourceBrief.keypoints, destinationBrief.keypoints, { strokeColor: [0, 0, 255] });\n        const drawKeypointsBaseOptions = {\n            fill: true,\n            color: [0, 255, 0],\n            showScore: true,\n            markerSize: 3,\n        };\n        montage.drawKeypoints(sourceBrief.keypoints, drawKeypointsBaseOptions);\n        montage.drawKeypoints(destinationBrief.keypoints, {\n            origin: montage.destinationOrigin,\n            ...drawKeypointsBaseOptions,\n        });\n        writeSync(debugImagePath, montage.image);\n    }\n    // compute affine transform from destination to reference\n    const sourceMatrix = getMatrixFromPoints(sourcePoints);\n    const destinationMatrix = getMatrixFromPoints(destinationPoints);\n    const affineTransform = matrixGetAffineTransform(sourceMatrix, destinationMatrix);\n    return {\n        transform: {\n            rotation: affineTransform.rotation,\n            scale: affineTransform.scale,\n            translation: {\n                column: Math.round(affineTransform.translation.x),\n                row: Math.round(affineTransform.translation.y),\n            },\n        },\n        stats: {\n            nbMatches: matches.length,\n            nbInliers,\n            nbRansacIterations,\n            nbSourceKeypoints,\n            nbDestinationKeypoints,\n        },\n    };\n}\n//# sourceMappingURL=getAffineTransform.js.map","import checkProcessable from '../utils/validators/checkProcessable.js';\n/**\n * Aligns two images by finding the translation that minimizes the mean difference of all channels.\n * between them. The source image should fit entirely in the destination image.\n * @param source - Image to align.\n * @param destination - Image to align to.\n * @param options - Align images min difference options.\n * @returns Translation that minimizes the mean difference between the images.\n * Gives the origin of the source image relatively to the top-left corner of the destination image.\n */\nexport function alignMinDifference(source, destination, options = {}) {\n    checkProcessable(source, {\n        bitDepth: [8, 16],\n    });\n    const xSpan = destination.width - source.width;\n    const ySpan = destination.height - source.height;\n    const { startStep = Math.max(Math.round(Math.min(source.width, source.height, Math.max(xSpan, ySpan)) / 4), 1), mask, } = options;\n    if (xSpan < 0 || ySpan < 0) {\n        throw new Error('Source image must fit entirely in destination image');\n    }\n    let bestDifference = Number.POSITIVE_INFINITY;\n    let bestShiftX = 0;\n    let bestShiftY = 0;\n    let step = startStep;\n    let startX = 0;\n    let startY = 0;\n    let endX = xSpan;\n    let endY = ySpan;\n    if (mask && mask.size !== source.size) {\n        throw new Error('Mask size must be equal to source size');\n    }\n    const nbPixelsToCheck = mask ? mask.getNbNonZeroPixels() : source.size;\n    while (step >= 1) {\n        step = Math.round(step);\n        for (let shiftX = startX; shiftX <= endX; shiftX += step) {\n            for (let shiftY = startY; shiftY <= endY; shiftY += step) {\n                let currentDifference = 0;\n                next: for (let column = 0; column < source.width; column++) {\n                    for (let row = 0; row < source.height; row++) {\n                        if (mask && !mask.getBit(column, row)) {\n                            continue;\n                        }\n                        for (let channel = 0; channel < source.channels; channel++) {\n                            const sourceValue = source.getValue(column, row, channel);\n                            const destinationValue = destination.getValue(column + shiftX, row + shiftY, channel);\n                            const difference = sourceValue - destinationValue;\n                            if (difference < 0) {\n                                // Math.abs is super slow, this simple trick is 5x faster\n                                currentDifference -= difference;\n                            }\n                            else {\n                                currentDifference += difference;\n                            }\n                            if (currentDifference > bestDifference) {\n                                break next;\n                            }\n                        }\n                    }\n                }\n                if (currentDifference < bestDifference) {\n                    bestDifference = currentDifference;\n                    bestShiftX = shiftX;\n                    bestShiftY = shiftY;\n                }\n            }\n        }\n        step /= 2;\n        startX = Math.round(Math.max(0, bestShiftX - step));\n        startY = Math.round(Math.max(0, bestShiftY - step));\n        endX = Math.round(Math.min(xSpan, bestShiftX + step));\n        endY = Math.round(Math.min(ySpan, bestShiftY + step));\n    }\n    return {\n        row: bestShiftY,\n        column: bestShiftX,\n        similarity: 1 - bestDifference / (nbPixelsToCheck * source.maxValue),\n    };\n}\n//# sourceMappingURL=alignMinDifference.js.map","/**\n * Finds extreme values of an image which are not stacked together.\n * @param points - Array of points that should be combined to improve.\n * @param image - Image which extrema are calculated from.\n * @param options - FilterPointsOptions\n * @returns Array of Points.\n */\nexport function removeClosePoints(points, image, options) {\n    const distance = options?.distance || 0;\n    const kind = options?.kind || 'maximum';\n    if (options?.channel === undefined && image.channels > 1) {\n        throw new Error('image channel must be specified or image must have only one channel');\n    }\n    const channel = options?.channel || 0;\n    const isMax = kind === 'maximum';\n    const sortedPoints = points.slice();\n    sortedPoints.sort(getSort(image, channel, isMax));\n    if (distance > 0) {\n        for (let i = 0; i < sortedPoints.length; i++) {\n            for (let j = i + 1; j < sortedPoints.length; j++) {\n                if (Math.hypot(sortedPoints[i].column - sortedPoints[j].column, sortedPoints[i].row - sortedPoints[j].row) < distance) {\n                    sortedPoints.splice(j, 1);\n                    j--;\n                }\n            }\n        }\n    }\n    return sortedPoints;\n}\nfunction getSort(image, channel, isDescending) {\n    if (isDescending) {\n        return function sortDescending(a, b) {\n            return (image.getValue(b.column, b.row, channel) -\n                image.getValue(a.column, a.row, channel));\n        };\n    }\n    else {\n        return function sortAscending(a, b) {\n            return (image.getValue(a.column, a.row, channel) -\n                image.getValue(b.column, b.row, channel));\n        };\n    }\n}\n//# sourceMappingURL=removeClosePoints.js.map","'use strict';\nconst toBytes = s => [...s].map(c => c.charCodeAt(0));\nconst xpiZipFilename = toBytes('META-INF/mozilla.rsa');\nconst oxmlContentTypes = toBytes('[Content_Types].xml');\nconst oxmlRels = toBytes('_rels/.rels');\n\nfunction readUInt64LE(buf, offset = 0) {\n\tlet n = buf[offset];\n\tlet mul = 1;\n\tlet i = 0;\n\twhile (++i < 8) {\n\t\tmul *= 0x100;\n\t\tn += buf[offset + i] * mul;\n\t}\n\n\treturn n;\n}\n\nconst fileType = input => {\n\tif (!(input instanceof Uint8Array || input instanceof ArrayBuffer || Buffer.isBuffer(input))) {\n\t\tthrow new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`Buffer\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\n\t}\n\n\tconst buf = input instanceof Uint8Array ? input : new Uint8Array(input);\n\n\tif (!(buf && buf.length > 1)) {\n\t\treturn null;\n\t}\n\n\tconst check = (header, options) => {\n\t\toptions = Object.assign({\n\t\t\toffset: 0\n\t\t}, options);\n\n\t\tfor (let i = 0; i < header.length; i++) {\n\t\t\t// If a bitmask is set\n\t\t\tif (options.mask) {\n\t\t\t\t// If header doesn't equal `buf` with bits masked off\n\t\t\t\tif (header[i] !== (options.mask[i] & buf[i + options.offset])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (header[i] !== buf[i + options.offset]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tconst checkString = (header, options) => check(toBytes(header), options);\n\n\tif (check([0xFF, 0xD8, 0xFF])) {\n\t\treturn {\n\t\t\text: 'jpg',\n\t\t\tmime: 'image/jpeg'\n\t\t};\n\t}\n\n\tif (check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\treturn {\n\t\t\text: 'png',\n\t\t\tmime: 'image/png'\n\t\t};\n\t}\n\n\tif (check([0x47, 0x49, 0x46])) {\n\t\treturn {\n\t\t\text: 'gif',\n\t\t\tmime: 'image/gif'\n\t\t};\n\t}\n\n\tif (check([0x57, 0x45, 0x42, 0x50], {offset: 8})) {\n\t\treturn {\n\t\t\text: 'webp',\n\t\t\tmime: 'image/webp'\n\t\t};\n\t}\n\n\tif (check([0x46, 0x4C, 0x49, 0x46])) {\n\t\treturn {\n\t\t\text: 'flif',\n\t\t\tmime: 'image/flif'\n\t\t};\n\t}\n\n\t// Needs to be before `tif` check\n\tif (\n\t\t(check([0x49, 0x49, 0x2A, 0x0]) || check([0x4D, 0x4D, 0x0, 0x2A])) &&\n\t\tcheck([0x43, 0x52], {offset: 8})\n\t) {\n\t\treturn {\n\t\t\text: 'cr2',\n\t\t\tmime: 'image/x-canon-cr2'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x49, 0x49, 0x2A, 0x0]) ||\n\t\tcheck([0x4D, 0x4D, 0x0, 0x2A])\n\t) {\n\t\treturn {\n\t\t\text: 'tif',\n\t\t\tmime: 'image/tiff'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x4D])) {\n\t\treturn {\n\t\t\text: 'bmp',\n\t\t\tmime: 'image/bmp'\n\t\t};\n\t}\n\n\tif (check([0x49, 0x49, 0xBC])) {\n\t\treturn {\n\t\t\text: 'jxr',\n\t\t\tmime: 'image/vnd.ms-photo'\n\t\t};\n\t}\n\n\tif (check([0x38, 0x42, 0x50, 0x53])) {\n\t\treturn {\n\t\t\text: 'psd',\n\t\t\tmime: 'image/vnd.adobe.photoshop'\n\t\t};\n\t}\n\n\t// Zip-based file formats\n\t// Need to be before the `zip` check\n\tif (check([0x50, 0x4B, 0x3, 0x4])) {\n\t\tif (\n\t\t\tcheck([0x6D, 0x69, 0x6D, 0x65, 0x74, 0x79, 0x70, 0x65, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x65, 0x70, 0x75, 0x62, 0x2B, 0x7A, 0x69, 0x70], {offset: 30})\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'epub',\n\t\t\t\tmime: 'application/epub+zip'\n\t\t\t};\n\t\t}\n\n\t\t// Assumes signed `.xpi` from addons.mozilla.org\n\t\tif (check(xpiZipFilename, {offset: 30})) {\n\t\t\treturn {\n\t\t\t\text: 'xpi',\n\t\t\t\tmime: 'application/x-xpinstall'\n\t\t\t};\n\t\t}\n\n\t\tif (checkString('mimetypeapplication/vnd.oasis.opendocument.text', {offset: 30})) {\n\t\t\treturn {\n\t\t\t\text: 'odt',\n\t\t\t\tmime: 'application/vnd.oasis.opendocument.text'\n\t\t\t};\n\t\t}\n\n\t\tif (checkString('mimetypeapplication/vnd.oasis.opendocument.spreadsheet', {offset: 30})) {\n\t\t\treturn {\n\t\t\t\text: 'ods',\n\t\t\t\tmime: 'application/vnd.oasis.opendocument.spreadsheet'\n\t\t\t};\n\t\t}\n\n\t\tif (checkString('mimetypeapplication/vnd.oasis.opendocument.presentation', {offset: 30})) {\n\t\t\treturn {\n\t\t\t\text: 'odp',\n\t\t\t\tmime: 'application/vnd.oasis.opendocument.presentation'\n\t\t\t};\n\t\t}\n\n\t\t// The docx, xlsx and pptx file types extend the Office Open XML file format:\n\t\t// https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n\t\t// We look for:\n\t\t// - one entry named '[Content_Types].xml' or '_rels/.rels',\n\t\t// - one entry indicating specific type of file.\n\t\t// MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\n\t\tconst findNextZipHeaderIndex = (arr, startAt = 0) => arr.findIndex((el, i, arr) => i >= startAt && arr[i] === 0x50 && arr[i + 1] === 0x4B && arr[i + 2] === 0x3 && arr[i + 3] === 0x4);\n\n\t\tlet zipHeaderIndex = 0; // The first zip header was already found at index 0\n\t\tlet oxmlFound = false;\n\t\tlet type = null;\n\n\t\tdo {\n\t\t\tconst offset = zipHeaderIndex + 30;\n\n\t\t\tif (!oxmlFound) {\n\t\t\t\toxmlFound = (check(oxmlContentTypes, {offset}) || check(oxmlRels, {offset}));\n\t\t\t}\n\n\t\t\tif (!type) {\n\t\t\t\tif (checkString('word/', {offset})) {\n\t\t\t\t\ttype = {\n\t\t\t\t\t\text: 'docx',\n\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n\t\t\t\t\t};\n\t\t\t\t} else if (checkString('ppt/', {offset})) {\n\t\t\t\t\ttype = {\n\t\t\t\t\t\text: 'pptx',\n\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n\t\t\t\t\t};\n\t\t\t\t} else if (checkString('xl/', {offset})) {\n\t\t\t\t\ttype = {\n\t\t\t\t\t\text: 'xlsx',\n\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (oxmlFound && type) {\n\t\t\t\treturn type;\n\t\t\t}\n\n\t\t\tzipHeaderIndex = findNextZipHeaderIndex(buf, offset);\n\t\t} while (zipHeaderIndex >= 0);\n\n\t\t// No more zip parts available in the buffer, but maybe we are almost certain about the type?\n\t\tif (type) {\n\t\t\treturn type;\n\t\t}\n\t}\n\n\tif (\n\t\tcheck([0x50, 0x4B]) &&\n\t\t(buf[2] === 0x3 || buf[2] === 0x5 || buf[2] === 0x7) &&\n\t\t(buf[3] === 0x4 || buf[3] === 0x6 || buf[3] === 0x8)\n\t) {\n\t\treturn {\n\t\t\text: 'zip',\n\t\t\tmime: 'application/zip'\n\t\t};\n\t}\n\n\tif (check([0x75, 0x73, 0x74, 0x61, 0x72], {offset: 257})) {\n\t\treturn {\n\t\t\text: 'tar',\n\t\t\tmime: 'application/x-tar'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7]) &&\n\t\t(buf[6] === 0x0 || buf[6] === 0x1)\n\t) {\n\t\treturn {\n\t\t\text: 'rar',\n\t\t\tmime: 'application/x-rar-compressed'\n\t\t};\n\t}\n\n\tif (check([0x1F, 0x8B, 0x8])) {\n\t\treturn {\n\t\t\text: 'gz',\n\t\t\tmime: 'application/gzip'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x5A, 0x68])) {\n\t\treturn {\n\t\t\text: 'bz2',\n\t\t\tmime: 'application/x-bzip2'\n\t\t};\n\t}\n\n\tif (check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\n\t\treturn {\n\t\t\text: '7z',\n\t\t\tmime: 'application/x-7z-compressed'\n\t\t};\n\t}\n\n\tif (check([0x78, 0x01])) {\n\t\treturn {\n\t\t\text: 'dmg',\n\t\t\tmime: 'application/x-apple-diskimage'\n\t\t};\n\t}\n\n\tif (check([0x33, 0x67, 0x70, 0x35]) || // 3gp5\n\t\t(\n\t\t\tcheck([0x0, 0x0, 0x0]) && check([0x66, 0x74, 0x79, 0x70], {offset: 4}) &&\n\t\t\t\t(\n\t\t\t\t\tcheck([0x6D, 0x70, 0x34, 0x31], {offset: 8}) || // MP41\n\t\t\t\t\tcheck([0x6D, 0x70, 0x34, 0x32], {offset: 8}) || // MP42\n\t\t\t\t\tcheck([0x69, 0x73, 0x6F, 0x6D], {offset: 8}) || // ISOM\n\t\t\t\t\tcheck([0x69, 0x73, 0x6F, 0x32], {offset: 8}) || // ISO2\n\t\t\t\t\tcheck([0x6D, 0x6D, 0x70, 0x34], {offset: 8}) || // MMP4\n\t\t\t\t\tcheck([0x4D, 0x34, 0x56], {offset: 8}) || // M4V\n\t\t\t\t\tcheck([0x64, 0x61, 0x73, 0x68], {offset: 8}) // DASH\n\t\t\t\t)\n\t\t)) {\n\t\treturn {\n\t\t\text: 'mp4',\n\t\t\tmime: 'video/mp4'\n\t\t};\n\t}\n\n\tif (check([0x4D, 0x54, 0x68, 0x64])) {\n\t\treturn {\n\t\t\text: 'mid',\n\t\t\tmime: 'audio/midi'\n\t\t};\n\t}\n\n\t// https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n\tif (check([0x1A, 0x45, 0xDF, 0xA3])) {\n\t\tconst sliced = buf.subarray(4, 4 + 4096);\n\t\tconst idPos = sliced.findIndex((el, i, arr) => arr[i] === 0x42 && arr[i + 1] === 0x82);\n\n\t\tif (idPos !== -1) {\n\t\t\tconst docTypePos = idPos + 3;\n\t\t\tconst findDocType = type => [...type].every((c, i) => sliced[docTypePos + i] === c.charCodeAt(0));\n\n\t\t\tif (findDocType('matroska')) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'mkv',\n\t\t\t\t\tmime: 'video/x-matroska'\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (findDocType('webm')) {\n\t\t\t\treturn {\n\t\t\t\t\text: 'webm',\n\t\t\t\t\tmime: 'video/webm'\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tif (check([0x0, 0x0, 0x0, 0x14, 0x66, 0x74, 0x79, 0x70, 0x71, 0x74, 0x20, 0x20]) ||\n\t\tcheck([0x66, 0x72, 0x65, 0x65], {offset: 4}) || // Type: `free`\n\t\tcheck([0x66, 0x74, 0x79, 0x70, 0x71, 0x74, 0x20, 0x20], {offset: 4}) ||\n\t\tcheck([0x6D, 0x64, 0x61, 0x74], {offset: 4}) || // MJPEG\n\t\tcheck([0x6D, 0x6F, 0x6F, 0x76], {offset: 4}) || // Type: `moov`\n\t\tcheck([0x77, 0x69, 0x64, 0x65], {offset: 4})) {\n\t\treturn {\n\t\t\text: 'mov',\n\t\t\tmime: 'video/quicktime'\n\t\t};\n\t}\n\n\t// RIFF file format which might be AVI, WAV, QCP, etc\n\tif (check([0x52, 0x49, 0x46, 0x46])) {\n\t\tif (check([0x41, 0x56, 0x49], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'avi',\n\t\t\t\tmime: 'video/vnd.avi'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x57, 0x41, 0x56, 0x45], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'wav',\n\t\t\t\tmime: 'audio/vnd.wave'\n\t\t\t};\n\t\t}\n\n\t\t// QLCM, QCP file\n\t\tif (check([0x51, 0x4C, 0x43, 0x4D], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'qcp',\n\t\t\t\tmime: 'audio/qcelp'\n\t\t\t};\n\t\t}\n\t}\n\n\t// ASF_Header_Object first 80 bytes\n\tif (check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\n\t\t// Search for header should be in first 1KB of file.\n\n\t\tlet offset = 30;\n\t\tdo {\n\t\t\tconst objectSize = readUInt64LE(buf, offset + 16);\n\t\t\tif (check([0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65], {offset})) {\n\t\t\t\t// Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\n\t\t\t\tif (check([0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B], {offset: offset + 24})) {\n\t\t\t\t\t// Found audio:\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'wma',\n\t\t\t\t\t\tmime: 'audio/x-ms-wma'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (check([0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B], {offset: offset + 24})) {\n\t\t\t\t\t// Found video:\n\t\t\t\t\treturn {\n\t\t\t\t\t\text: 'wmv',\n\t\t\t\t\t\tmime: 'video/x-ms-asf'\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\toffset += objectSize;\n\t\t} while (offset + 24 <= buf.length);\n\n\t\t// Default to ASF generic extension\n\t\treturn {\n\t\t\text: 'asf',\n\t\t\tmime: 'application/vnd.ms-asf'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x0, 0x0, 0x1, 0xBA]) ||\n\t\tcheck([0x0, 0x0, 0x1, 0xB3])\n\t) {\n\t\treturn {\n\t\t\text: 'mpg',\n\t\t\tmime: 'video/mpeg'\n\t\t};\n\t}\n\n\tif (check([0x66, 0x74, 0x79, 0x70, 0x33, 0x67], {offset: 4})) {\n\t\treturn {\n\t\t\text: '3gp',\n\t\t\tmime: 'video/3gpp'\n\t\t};\n\t}\n\n\t// Check for MPEG header at different starting offsets\n\tfor (let start = 0; start < 2 && start < (buf.length - 16); start++) {\n\t\tif (\n\t\t\tcheck([0x49, 0x44, 0x33], {offset: start}) || // ID3 header\n\t\t\tcheck([0xFF, 0xE2], {offset: start, mask: [0xFF, 0xE2]}) // MPEG 1 or 2 Layer 3 header\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'mp3',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tcheck([0xFF, 0xE4], {offset: start, mask: [0xFF, 0xE4]}) // MPEG 1 or 2 Layer 2 header\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'mp2',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tcheck([0xFF, 0xF8], {offset: start, mask: [0xFF, 0xFC]}) // MPEG 2 layer 0 using ADTS\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'mp2',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tcheck([0xFF, 0xF0], {offset: start, mask: [0xFF, 0xFC]}) // MPEG 4 layer 0 using ADTS\n\t\t) {\n\t\t\treturn {\n\t\t\t\text: 'mp4',\n\t\t\t\tmime: 'audio/mpeg'\n\t\t\t};\n\t\t}\n\t}\n\n\tif (\n\t\tcheck([0x66, 0x74, 0x79, 0x70, 0x4D, 0x34, 0x41], {offset: 4})\n\t) {\n\t\treturn { // MPEG-4 layer 3 (audio)\n\t\t\text: 'm4a',\n\t\t\tmime: 'audio/mp4' // RFC 4337\n\t\t};\n\t}\n\n\t// Needs to be before `ogg` check\n\tif (check([0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64], {offset: 28})) {\n\t\treturn {\n\t\t\text: 'opus',\n\t\t\tmime: 'audio/opus'\n\t\t};\n\t}\n\n\t// If 'OggS' in first  bytes, then OGG container\n\tif (check([0x4F, 0x67, 0x67, 0x53])) {\n\t\t// This is a OGG container\n\n\t\t// If ' theora' in header.\n\t\tif (check([0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61], {offset: 28})) {\n\t\t\treturn {\n\t\t\t\text: 'ogv',\n\t\t\t\tmime: 'video/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If '\\x01video' in header.\n\t\tif (check([0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00], {offset: 28})) {\n\t\t\treturn {\n\t\t\t\text: 'ogm',\n\t\t\t\tmime: 'video/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If ' FLAC' in header  https://xiph.org/flac/faq.html\n\t\tif (check([0x7F, 0x46, 0x4C, 0x41, 0x43], {offset: 28})) {\n\t\t\treturn {\n\t\t\t\text: 'oga',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\n\t\tif (check([0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20], {offset: 28})) {\n\t\t\treturn {\n\t\t\t\text: 'spx',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// If '\\x01vorbis' in header\n\t\tif (check([0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73], {offset: 28})) {\n\t\t\treturn {\n\t\t\t\text: 'ogg',\n\t\t\t\tmime: 'audio/ogg'\n\t\t\t};\n\t\t}\n\n\t\t// Default OGG container https://www.iana.org/assignments/media-types/application/ogg\n\t\treturn {\n\t\t\text: 'ogx',\n\t\t\tmime: 'application/ogg'\n\t\t};\n\t}\n\n\tif (check([0x66, 0x4C, 0x61, 0x43])) {\n\t\treturn {\n\t\t\text: 'flac',\n\t\t\tmime: 'audio/x-flac'\n\t\t};\n\t}\n\n\tif (check([0x4D, 0x41, 0x43, 0x20])) { // 'MAC '\n\t\treturn {\n\t\t\text: 'ape',\n\t\t\tmime: 'audio/ape'\n\t\t};\n\t}\n\n\tif (check([0x77, 0x76, 0x70, 0x6B])) { // 'wvpk'\n\t\treturn {\n\t\t\text: 'wv',\n\t\t\tmime: 'audio/wavpack'\n\t\t};\n\t}\n\n\tif (check([0x23, 0x21, 0x41, 0x4D, 0x52, 0x0A])) {\n\t\treturn {\n\t\t\text: 'amr',\n\t\t\tmime: 'audio/amr'\n\t\t};\n\t}\n\n\tif (check([0x25, 0x50, 0x44, 0x46])) {\n\t\treturn {\n\t\t\text: 'pdf',\n\t\t\tmime: 'application/pdf'\n\t\t};\n\t}\n\n\tif (check([0x4D, 0x5A])) {\n\t\treturn {\n\t\t\text: 'exe',\n\t\t\tmime: 'application/x-msdownload'\n\t\t};\n\t}\n\n\tif (\n\t\t(buf[0] === 0x43 || buf[0] === 0x46) &&\n\t\tcheck([0x57, 0x53], {offset: 1})\n\t) {\n\t\treturn {\n\t\t\text: 'swf',\n\t\t\tmime: 'application/x-shockwave-flash'\n\t\t};\n\t}\n\n\tif (check([0x7B, 0x5C, 0x72, 0x74, 0x66])) {\n\t\treturn {\n\t\t\text: 'rtf',\n\t\t\tmime: 'application/rtf'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x61, 0x73, 0x6D])) {\n\t\treturn {\n\t\t\text: 'wasm',\n\t\t\tmime: 'application/wasm'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x77, 0x4F, 0x46, 0x46]) &&\n\t\t(\n\t\t\tcheck([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||\n\t\t\tcheck([0x4F, 0x54, 0x54, 0x4F], {offset: 4})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'woff',\n\t\t\tmime: 'font/woff'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x77, 0x4F, 0x46, 0x32]) &&\n\t\t(\n\t\t\tcheck([0x00, 0x01, 0x00, 0x00], {offset: 4}) ||\n\t\t\tcheck([0x4F, 0x54, 0x54, 0x4F], {offset: 4})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'woff2',\n\t\t\tmime: 'font/woff2'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x4C, 0x50], {offset: 34}) &&\n\t\t(\n\t\t\tcheck([0x00, 0x00, 0x01], {offset: 8}) ||\n\t\t\tcheck([0x01, 0x00, 0x02], {offset: 8}) ||\n\t\t\tcheck([0x02, 0x00, 0x02], {offset: 8})\n\t\t)\n\t) {\n\t\treturn {\n\t\t\text: 'eot',\n\t\t\tmime: 'application/vnd.ms-fontobject'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x01, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'ttf',\n\t\t\tmime: 'font/ttf'\n\t\t};\n\t}\n\n\tif (check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\n\t\treturn {\n\t\t\text: 'otf',\n\t\t\tmime: 'font/otf'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x01, 0x00])) {\n\t\treturn {\n\t\t\text: 'ico',\n\t\t\tmime: 'image/x-icon'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x02, 0x00])) {\n\t\treturn {\n\t\t\text: 'cur',\n\t\t\tmime: 'image/x-icon'\n\t\t};\n\t}\n\n\tif (check([0x46, 0x4C, 0x56, 0x01])) {\n\t\treturn {\n\t\t\text: 'flv',\n\t\t\tmime: 'video/x-flv'\n\t\t};\n\t}\n\n\tif (check([0x25, 0x21])) {\n\t\treturn {\n\t\t\text: 'ps',\n\t\t\tmime: 'application/postscript'\n\t\t};\n\t}\n\n\tif (check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\n\t\treturn {\n\t\t\text: 'xz',\n\t\t\tmime: 'application/x-xz'\n\t\t};\n\t}\n\n\tif (check([0x53, 0x51, 0x4C, 0x69])) {\n\t\treturn {\n\t\t\text: 'sqlite',\n\t\t\tmime: 'application/x-sqlite3'\n\t\t};\n\t}\n\n\tif (check([0x4E, 0x45, 0x53, 0x1A])) {\n\t\treturn {\n\t\t\text: 'nes',\n\t\t\tmime: 'application/x-nintendo-nes-rom'\n\t\t};\n\t}\n\n\tif (check([0x43, 0x72, 0x32, 0x34])) {\n\t\treturn {\n\t\t\text: 'crx',\n\t\t\tmime: 'application/x-google-chrome-extension'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x4D, 0x53, 0x43, 0x46]) ||\n\t\tcheck([0x49, 0x53, 0x63, 0x28])\n\t) {\n\t\treturn {\n\t\t\text: 'cab',\n\t\t\tmime: 'application/vnd.ms-cab-compressed'\n\t\t};\n\t}\n\n\t// Needs to be before `ar` check\n\tif (check([0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E, 0x0A, 0x64, 0x65, 0x62, 0x69, 0x61, 0x6E, 0x2D, 0x62, 0x69, 0x6E, 0x61, 0x72, 0x79])) {\n\t\treturn {\n\t\t\text: 'deb',\n\t\t\tmime: 'application/x-deb'\n\t\t};\n\t}\n\n\tif (check([0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E])) {\n\t\treturn {\n\t\t\text: 'ar',\n\t\t\tmime: 'application/x-unix-archive'\n\t\t};\n\t}\n\n\tif (check([0xED, 0xAB, 0xEE, 0xDB])) {\n\t\treturn {\n\t\t\text: 'rpm',\n\t\t\tmime: 'application/x-rpm'\n\t\t};\n\t}\n\n\tif (\n\t\tcheck([0x1F, 0xA0]) ||\n\t\tcheck([0x1F, 0x9D])\n\t) {\n\t\treturn {\n\t\t\text: 'Z',\n\t\t\tmime: 'application/x-compress'\n\t\t};\n\t}\n\n\tif (check([0x4C, 0x5A, 0x49, 0x50])) {\n\t\treturn {\n\t\t\text: 'lz',\n\t\t\tmime: 'application/x-lzip'\n\t\t};\n\t}\n\n\tif (check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\n\t\treturn {\n\t\t\text: 'msi',\n\t\t\tmime: 'application/x-msi'\n\t\t};\n\t}\n\n\tif (check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\n\t\treturn {\n\t\t\text: 'mxf',\n\t\t\tmime: 'application/mxf'\n\t\t};\n\t}\n\n\tif (check([0x47], {offset: 4}) && (check([0x47], {offset: 192}) || check([0x47], {offset: 196}))) {\n\t\treturn {\n\t\t\text: 'mts',\n\t\t\tmime: 'video/mp2t'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x4C, 0x45, 0x4E, 0x44, 0x45, 0x52])) {\n\t\treturn {\n\t\t\text: 'blend',\n\t\t\tmime: 'application/x-blender'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x50, 0x47, 0xFB])) {\n\t\treturn {\n\t\t\text: 'bpg',\n\t\t\tmime: 'image/bpg'\n\t\t};\n\t}\n\n\tif (check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\n\t\t// JPEG-2000 family\n\n\t\tif (check([0x6A, 0x70, 0x32, 0x20], {offset: 20})) {\n\t\t\treturn {\n\t\t\t\text: 'jp2',\n\t\t\t\tmime: 'image/jp2'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x6A, 0x70, 0x78, 0x20], {offset: 20})) {\n\t\t\treturn {\n\t\t\t\text: 'jpx',\n\t\t\t\tmime: 'image/jpx'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x6A, 0x70, 0x6D, 0x20], {offset: 20})) {\n\t\t\treturn {\n\t\t\t\text: 'jpm',\n\t\t\t\tmime: 'image/jpm'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x6D, 0x6A, 0x70, 0x32], {offset: 20})) {\n\t\t\treturn {\n\t\t\t\text: 'mj2',\n\t\t\t\tmime: 'image/mj2'\n\t\t\t};\n\t\t}\n\t}\n\n\tif (check([0x46, 0x4F, 0x52, 0x4D])) {\n\t\treturn {\n\t\t\text: 'aif',\n\t\t\tmime: 'audio/aiff'\n\t\t};\n\t}\n\n\tif (checkString('<?xml ')) {\n\t\treturn {\n\t\t\text: 'xml',\n\t\t\tmime: 'application/xml'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {offset: 60})) {\n\t\treturn {\n\t\t\text: 'mobi',\n\t\t\tmime: 'application/x-mobipocket-ebook'\n\t\t};\n\t}\n\n\t// File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\n\tif (check([0x66, 0x74, 0x79, 0x70], {offset: 4})) {\n\t\tif (check([0x6D, 0x69, 0x66, 0x31], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'heic',\n\t\t\t\tmime: 'image/heif'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x6D, 0x73, 0x66, 0x31], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'heic',\n\t\t\t\tmime: 'image/heif-sequence'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x68, 0x65, 0x69, 0x63], {offset: 8}) || check([0x68, 0x65, 0x69, 0x78], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'heic',\n\t\t\t\tmime: 'image/heic'\n\t\t\t};\n\t\t}\n\n\t\tif (check([0x68, 0x65, 0x76, 0x63], {offset: 8}) || check([0x68, 0x65, 0x76, 0x78], {offset: 8})) {\n\t\t\treturn {\n\t\t\t\text: 'heic',\n\t\t\t\tmime: 'image/heic-sequence'\n\t\t\t};\n\t\t}\n\t}\n\n\tif (check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\n\t\treturn {\n\t\t\text: 'ktx',\n\t\t\tmime: 'image/ktx'\n\t\t};\n\t}\n\n\tif (check([0x44, 0x49, 0x43, 0x4D], {offset: 128})) {\n\t\treturn {\n\t\t\text: 'dcm',\n\t\t\tmime: 'application/dicom'\n\t\t};\n\t}\n\n\t// Musepack, SV7\n\tif (check([0x4D, 0x50, 0x2B])) {\n\t\treturn {\n\t\t\text: 'mpc',\n\t\t\tmime: 'audio/x-musepack'\n\t\t};\n\t}\n\n\t// Musepack, SV8\n\tif (check([0x4D, 0x50, 0x43, 0x4B])) {\n\t\treturn {\n\t\t\text: 'mpc',\n\t\t\tmime: 'audio/x-musepack'\n\t\t};\n\t}\n\n\tif (check([0x42, 0x45, 0x47, 0x49, 0x4E, 0x3A])) {\n\t\treturn {\n\t\t\text: 'ics',\n\t\t\tmime: 'text/calendar'\n\t\t};\n\t}\n\n\tif (check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\n\t\treturn {\n\t\t\text: 'glb',\n\t\t\tmime: 'model/gltf-binary'\n\t\t};\n\t}\n\n\tif (check([0xD4, 0xC3, 0xB2, 0xA1]) || check([0xA1, 0xB2, 0xC3, 0xD4])) {\n\t\treturn {\n\t\t\text: 'pcap',\n\t\t\tmime: 'application/vnd.tcpdump.pcap'\n\t\t};\n\t}\n\n\treturn null;\n};\n\nmodule.exports = fileType;\n// TODO: Remove this for the next major release\nmodule.exports.default = fileType;\n\nObject.defineProperty(fileType, 'minimumBytes', {value: 4100});\n\nmodule.exports.stream = readableStream => new Promise((resolve, reject) => {\n\t// Using `eval` to work around issues when bundling with Webpack\n\tconst stream = eval('require')('stream'); // eslint-disable-line no-eval\n\n\treadableStream.once('readable', () => {\n\t\tconst pass = new stream.PassThrough();\n\t\tconst chunk = readableStream.read(module.exports.minimumBytes) || readableStream.read();\n\t\ttry {\n\t\t\tpass.fileType = fileType(chunk);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\n\t\treadableStream.unshift(chunk);\n\n\t\tif (stream.pipeline) {\n\t\t\tresolve(stream.pipeline(readableStream, pass, () => {}));\n\t\t} else {\n\t\t\tresolve(readableStream.pipe(pass));\n\t\t}\n\t});\n});\n","'use strict';\nconst fileType = require('file-type');\n\nconst imageExts = new Set([\n\t'jpg',\n\t'png',\n\t'gif',\n\t'webp',\n\t'flif',\n\t'cr2',\n\t'tif',\n\t'bmp',\n\t'jxr',\n\t'psd',\n\t'ico',\n\t'bpg',\n\t'jp2',\n\t'jpm',\n\t'jpx',\n\t'heic',\n\t'cur',\n\t'dcm'\n]);\n\nconst imageType = input => {\n\tconst ret = fileType(input);\n\treturn imageExts.has(ret && ret.ext) ? ret : null;\n};\n\nmodule.exports = imageType;\n// TODO: Remove this for the next major release\nmodule.exports.default = imageType;\n\nObject.defineProperty(imageType, 'minimumBytes', {value: fileType.minimumBytes});\n","import { decode } from 'fast-bmp';\nimport { Image } from \"../Image.js\";\nimport { Mask } from \"../Mask.js\";\n/**\n * Decode a BMP. See the fast-bmp npm module.\n * @param data - The data to decode.\n * @returns The decoded image or mask.\n */\nexport function decodeBmp(data) {\n    const decodedData = decode(data);\n    if (decodedData.bitsPerPixel === 1) {\n        const mask = new Mask(decodedData.width, decodedData.height, {\n            data: decodedData.data,\n        });\n        return mask.convertColor('GREY');\n    }\n    else {\n        let colorModel;\n        switch (decodedData.channels) {\n            case 1:\n                colorModel = 'GREY';\n                break;\n            case 3:\n                colorModel = 'RGB';\n                break;\n            default:\n                colorModel = 'RGBA';\n                break;\n        }\n        return new Image(decodedData.width, decodedData.height, {\n            colorModel,\n            data: decodedData.data,\n        });\n    }\n}\n//# sourceMappingURL=decodeBmp.js.map","const tagsById = {\n    0x829a: 'ExposureTime',\n    0x829d: 'FNumber',\n    0x8822: 'ExposureProgram',\n    0x8824: 'SpectralSensitivity',\n    0x8827: 'ISOSpeedRatings',\n    0x8828: 'OECF',\n    0x8830: 'SensitivityType',\n    0x8831: 'StandardOutputSensitivity',\n    0x8832: 'RecommendedExposureIndex',\n    0x8833: 'ISOSpeed',\n    0x8834: 'ISOSpeedLatitudeyyy',\n    0x8835: 'ISOSpeedLatitudezzz',\n    0x9000: 'ExifVersion',\n    0x9003: 'DateTimeOriginal',\n    0x9004: 'DateTimeDigitized',\n    0x9101: 'ComponentsConfiguration',\n    0x9102: 'CompressedBitsPerPixel',\n    0x9201: 'ShutterSpeedValue',\n    0x9202: 'ApertureValue',\n    0x9203: 'BrightnessValue',\n    0x9204: 'ExposureBiasValue',\n    0x9205: 'MaxApertureValue',\n    0x9206: 'SubjectDistance',\n    0x9207: 'MeteringMode',\n    0x9208: 'LightSource',\n    0x9209: 'Flash',\n    0x920a: 'FocalLength',\n    0x9214: 'SubjectArea',\n    0x927c: 'MakerNote',\n    0x9286: 'UserComment',\n    0x9290: 'SubsecTime',\n    0x9291: 'SubsecTimeOriginal',\n    0x9292: 'SubsecTimeDigitized',\n    0xa000: 'FlashpixVersion',\n    0xa001: 'ColorSpace',\n    0xa002: 'PixelXDimension',\n    0xa003: 'PixelYDimension',\n    0xa004: 'RelatedSoundFile',\n    0xa20b: 'FlashEnergy',\n    0xa20c: 'SpatialFrequencyResponse',\n    0xa20e: 'FocalPlaneXResolution',\n    0xa20f: 'FocalPlaneYResolution',\n    0xa210: 'FocalPlaneResolutionUnit',\n    0xa214: 'SubjectLocation',\n    0xa215: 'ExposureIndex',\n    0xa217: 'SensingMethod',\n    0xa300: 'FileSource',\n    0xa301: 'SceneType',\n    0xa302: 'CFAPattern',\n    0xa401: 'CustomRendered',\n    0xa402: 'ExposureMode',\n    0xa403: 'WhiteBalance',\n    0xa404: 'DigitalZoomRatio',\n    0xa405: 'FocalLengthIn35mmFilm',\n    0xa406: 'SceneCaptureType',\n    0xa407: 'GainControl',\n    0xa408: 'Contrast',\n    0xa409: 'Saturation',\n    0xa40a: 'Sharpness',\n    0xa40b: 'DeviceSettingDescription',\n    0xa40c: 'SubjectDistanceRange',\n    0xa420: 'ImageUniqueID',\n    0xa430: 'CameraOwnerName',\n    0xa431: 'BodySerialNumber',\n    0xa432: 'LensSpecification',\n    0xa433: 'LensMake',\n    0xa434: 'LensModel',\n    0xa435: 'LensSerialNumber',\n    0xa500: 'Gamma',\n};\nconst tagsByName = {};\nfor (const i in tagsById) {\n    tagsByName[tagsById[i]] = Number(i);\n}\nexport { tagsById, tagsByName };\n//# sourceMappingURL=exif.js.map","const tagsById = {\n    0x0000: 'GPSVersionID',\n    0x0001: 'GPSLatitudeRef',\n    0x0002: 'GPSLatitude',\n    0x0003: 'GPSLongitudeRef',\n    0x0004: 'GPSLongitude',\n    0x0005: 'GPSAltitudeRef',\n    0x0006: 'GPSAltitude',\n    0x0007: 'GPSTimeStamp',\n    0x0008: 'GPSSatellites',\n    0x0009: 'GPSStatus',\n    0x000a: 'GPSMeasureMode',\n    0x000b: 'GPSDOP',\n    0x000c: 'GPSSpeedRef',\n    0x000d: 'GPSSpeed',\n    0x000e: 'GPSTrackRef',\n    0x000f: 'GPSTrack',\n    0x0010: 'GPSImgDirectionRef',\n    0x0011: 'GPSImgDirection',\n    0x0012: 'GPSMapDatum',\n    0x0013: 'GPSDestLatitudeRef',\n    0x0014: 'GPSDestLatitude',\n    0x0015: 'GPSDestLongitudeRef',\n    0x0016: 'GPSDestLongitude',\n    0x0017: 'GPSDestBearingRef',\n    0x0018: 'GPSDestBearing',\n    0x0019: 'GPSDestDistanceRef',\n    0x001a: 'GPSDestDistance',\n    0x001b: 'GPSProcessingMethod',\n    0x001c: 'GPSAreaInformation',\n    0x001d: 'GPSDateStamp',\n    0x001e: 'GPSDifferential',\n    0x001f: 'GPSHPositioningError',\n};\nconst tagsByName = {};\nfor (const i in tagsById) {\n    tagsByName[tagsById[i]] = Number(i);\n}\nexport { tagsById, tagsByName };\n//# sourceMappingURL=gps.js.map","const tagsById = {\n    // Baseline tags\n    0x00fe: 'NewSubfileType',\n    0x00ff: 'SubfileType',\n    0x0100: 'ImageWidth',\n    0x0101: 'ImageLength',\n    0x0102: 'BitsPerSample',\n    0x0103: 'Compression',\n    0x0106: 'PhotometricInterpretation',\n    0x0107: 'Threshholding',\n    0x0108: 'CellWidth',\n    0x0109: 'CellLength',\n    0x010a: 'FillOrder',\n    0x010e: 'ImageDescription',\n    0x010f: 'Make',\n    0x0110: 'Model',\n    0x0111: 'StripOffsets',\n    0x0112: 'Orientation',\n    0x0115: 'SamplesPerPixel',\n    0x0116: 'RowsPerStrip',\n    0x0117: 'StripByteCounts',\n    0x0118: 'MinSampleValue',\n    0x0119: 'MaxSampleValue',\n    0x011a: 'XResolution',\n    0x011b: 'YResolution',\n    0x011c: 'PlanarConfiguration',\n    0x0120: 'FreeOffsets',\n    0x0121: 'FreeByteCounts',\n    0x0122: 'GrayResponseUnit',\n    0x0123: 'GrayResponseCurve',\n    0x0128: 'ResolutionUnit',\n    0x0131: 'Software',\n    0x0132: 'DateTime',\n    0x013b: 'Artist',\n    0x013c: 'HostComputer',\n    0x0140: 'ColorMap',\n    0x0152: 'ExtraSamples',\n    0x8298: 'Copyright',\n    // Extension tags\n    0x010d: 'DocumentName',\n    0x011d: 'PageName',\n    0x011e: 'XPosition',\n    0x011f: 'YPosition',\n    0x0124: 'T4Options',\n    0x0125: 'T6Options',\n    0x0129: 'PageNumber',\n    0x012d: 'TransferFunction',\n    0x013d: 'Predictor',\n    0x013e: 'WhitePoint',\n    0x013f: 'PrimaryChromaticities',\n    0x0141: 'HalftoneHints',\n    0x0142: 'TileWidth',\n    0x0143: 'TileLength',\n    0x0144: 'TileOffsets',\n    0x0145: 'TileByteCounts',\n    0x0146: 'BadFaxLines',\n    0x0147: 'CleanFaxData',\n    0x0148: 'ConsecutiveBadFaxLines',\n    0x014a: 'SubIFDs',\n    0x014c: 'InkSet',\n    0x014d: 'InkNames',\n    0x014e: 'NumberOfInks',\n    0x0150: 'DotRange',\n    0x0151: 'TargetPrinter',\n    0x0153: 'SampleFormat',\n    0x0154: 'SMinSampleValue',\n    0x0155: 'SMaxSampleValue',\n    0x0156: 'TransferRange',\n    0x0157: 'ClipPath',\n    0x0158: 'XClipPathUnits',\n    0x0159: 'YClipPathUnits',\n    0x015a: 'Indexed',\n    0x015b: 'JPEGTables',\n    0x015f: 'OPIProxy',\n    0x0190: 'GlobalParametersIFD',\n    0x0191: 'ProfileType',\n    0x0192: 'FaxProfile',\n    0x0193: 'CodingMethods',\n    0x0194: 'VersionYear',\n    0x0195: 'ModeNumber',\n    0x01b1: 'Decode',\n    0x01b2: 'DefaultImageColor',\n    0x0200: 'JPEGProc',\n    0x0201: 'JPEGInterchangeFormat',\n    0x0202: 'JPEGInterchangeFormatLength',\n    0x0203: 'JPEGRestartInterval',\n    0x0205: 'JPEGLosslessPredictors',\n    0x0206: 'JPEGPointTransforms',\n    0x0207: 'JPEGQTables',\n    0x0208: 'JPEGDCTables',\n    0x0209: 'JPEGACTables',\n    0x0211: 'YCbCrCoefficients',\n    0x0212: 'YCbCrSubSampling',\n    0x0213: 'YCbCrPositioning',\n    0x0214: 'ReferenceBlackWhite',\n    0x022f: 'StripRowCounts',\n    0x02bc: 'XMP',\n    0x800d: 'ImageID',\n    0x87ac: 'ImageLayer',\n    // Private tags\n    0x80a4: 'WangAnnotatio',\n    0x82a5: 'MDFileTag',\n    0x82a6: 'MDScalePixel',\n    0x82a7: 'MDColorTable',\n    0x82a8: 'MDLabName',\n    0x82a9: 'MDSampleInfo',\n    0x82aa: 'MDPrepDate',\n    0x82ab: 'MDPrepTime',\n    0x82ac: 'MDFileUnits',\n    0x830e: 'ModelPixelScaleTag',\n    0x83bb: 'IPTC',\n    0x847e: 'INGRPacketDataTag',\n    0x847f: 'INGRFlagRegisters',\n    0x8480: 'IrasBTransformationMatrix',\n    0x8482: 'ModelTiepointTag',\n    0x85d8: 'ModelTransformationTag',\n    0x8649: 'Photoshop',\n    0x8769: 'ExifIFD',\n    0x8773: 'ICCProfile',\n    0x87af: 'GeoKeyDirectoryTag',\n    0x87b0: 'GeoDoubleParamsTag',\n    0x87b1: 'GeoAsciiParamsTag',\n    0x8825: 'GPSIFD',\n    0x885c: 'HylaFAXFaxRecvParams',\n    0x885d: 'HylaFAXFaxSubAddress',\n    0x885e: 'HylaFAXFaxRecvTime',\n    0x935c: 'ImageSourceData',\n    0xa005: 'InteroperabilityIFD',\n    0xa480: 'GDAL_METADATA',\n    0xa481: 'GDAL_NODATA',\n    0xc427: 'OceScanjobDescription',\n    0xc428: 'OceApplicationSelector',\n    0xc429: 'OceIdentificationNumber',\n    0xc42a: 'OceImageLogicCharacteristics',\n    0xc612: 'DNGVersion',\n    0xc613: 'DNGBackwardVersion',\n    0xc614: 'UniqueCameraModel',\n    0xc615: 'LocalizedCameraModel',\n    0xc616: 'CFAPlaneColor',\n    0xc617: 'CFALayout',\n    0xc618: 'LinearizationTable',\n    0xc619: 'BlackLevelRepeatDim',\n    0xc61a: 'BlackLevel',\n    0xc61b: 'BlackLevelDeltaH',\n    0xc61c: 'BlackLevelDeltaV',\n    0xc61d: 'WhiteLevel',\n    0xc61e: 'DefaultScale',\n    0xc61f: 'DefaultCropOrigin',\n    0xc620: 'DefaultCropSize',\n    0xc621: 'ColorMatrix1',\n    0xc622: 'ColorMatrix2',\n    0xc623: 'CameraCalibration1',\n    0xc624: 'CameraCalibration2',\n    0xc625: 'ReductionMatrix1',\n    0xc626: 'ReductionMatrix2',\n    0xc627: 'AnalogBalance',\n    0xc628: 'AsShotNeutral',\n    0xc629: 'AsShotWhiteXY',\n    0xc62a: 'BaselineExposure',\n    0xc62b: 'BaselineNoise',\n    0xc62c: 'BaselineSharpness',\n    0xc62d: 'BayerGreenSplit',\n    0xc62e: 'LinearResponseLimit',\n    0xc62f: 'CameraSerialNumber',\n    0xc630: 'LensInfo',\n    0xc631: 'ChromaBlurRadius',\n    0xc632: 'AntiAliasStrength',\n    0xc634: 'DNGPrivateData',\n    0xc635: 'MakerNoteSafety',\n    0xc65a: 'CalibrationIlluminant1',\n    0xc65b: 'CalibrationIlluminant2',\n    0xc65c: 'BestQualityScale',\n    0xc660: 'AliasLayerMetadata',\n};\nconst tagsByName = {};\nfor (const i in tagsById) {\n    tagsByName[tagsById[i]] = Number(i);\n}\nexport { tagsById, tagsByName };\n//# sourceMappingURL=standard.js.map","export function guessStripByteCounts(ifd) {\n    if (ifd.compression !== 1) {\n        throw new Error('missing mandatory StripByteCounts field in compressed image');\n    }\n    const bytesPerStrip = ifd.rowsPerStrip *\n        ifd.width *\n        ifd.samplesPerPixel *\n        (ifd.bitsPerSample / 8);\n    return new Array(ifd.stripOffsets.length).fill(bytesPerStrip);\n}\n//# sourceMappingURL=hacks.js.map","// Section 14: Differencing Predictor (p. 64)\nexport function applyHorizontalDifferencing8Bit(data, width, components) {\n    let i = 0;\n    while (i < data.length) {\n        for (let j = components; j < width * components; j += components) {\n            for (let k = 0; k < components; k++) {\n                data[i + j + k] =\n                    (data[i + j + k] + data[i + j - (components - k)]) & 255;\n            }\n        }\n        i += width * components;\n    }\n}\nexport function applyHorizontalDifferencing16Bit(data, width, components) {\n    let i = 0;\n    while (i < data.length) {\n        for (let j = components; j < width * components; j += components) {\n            for (let k = 0; k < components; k++) {\n                data[i + j + k] =\n                    (data[i + j + k] + data[i + j - (components - k)]) & 65535;\n            }\n        }\n        i += width * components;\n    }\n}\n//# sourceMappingURL=horizontal_differencing.js.map","import * as exif from \"./tags/exif.js\";\nimport * as gps from \"./tags/gps.js\";\nimport * as standard from \"./tags/standard.js\";\nconst tags = {\n    standard,\n    exif,\n    gps,\n};\nexport default class IFD {\n    kind;\n    data;\n    fields;\n    exif;\n    gps;\n    _hasMap;\n    _map;\n    constructor(kind) {\n        if (!kind) {\n            throw new Error('missing kind');\n        }\n        this.data = new Uint8Array();\n        this.fields = new Map();\n        this.kind = kind;\n        this._hasMap = false;\n        this._map = {};\n    }\n    get(tag) {\n        if (typeof tag === 'number') {\n            return this.fields.get(tag);\n        }\n        else if (typeof tag === 'string') {\n            return this.fields.get(tags[this.kind].tagsByName[tag]);\n        }\n        else {\n            throw new Error('expected a number or string');\n        }\n    }\n    get map() {\n        if (!this._hasMap) {\n            const taglist = tags[this.kind].tagsById;\n            for (const key of this.fields.keys()) {\n                if (taglist[key]) {\n                    this._map[taglist[key]] = this.fields.get(key);\n                }\n            }\n            this._hasMap = true;\n        }\n        return this._map;\n    }\n}\n//# sourceMappingURL=ifd.js.map","const types = new Map([\n    [1, [1, readByte]], // BYTE\n    [2, [1, readASCII]], // ASCII\n    [3, [2, readShort]], // SHORT\n    [4, [4, readLong]], // LONG\n    [5, [8, readRational]], // RATIONAL\n    [6, [1, readSByte]], // SBYTE\n    [7, [1, readByte]], // UNDEFINED\n    [8, [2, readSShort]], // SSHORT\n    [9, [4, readSLong]], // SLONG\n    [10, [8, readSRational]], // SRATIONAL\n    [11, [4, readFloat]], // FLOAT\n    [12, [8, readDouble]], // DOUBLE\n]);\nexport function getByteLength(type, count) {\n    const val = types.get(type);\n    if (!val)\n        throw new Error(`type not found: ${type}`);\n    return val[0] * count;\n}\nexport function readData(decoder, type, count) {\n    const val = types.get(type);\n    if (!val)\n        throw new Error(`type not found: ${type}`);\n    return val[1](decoder, count);\n}\nfunction readByte(decoder, count) {\n    if (count === 1)\n        return decoder.readUint8();\n    const array = new Uint8Array(count);\n    for (let i = 0; i < count; i++) {\n        array[i] = decoder.readUint8();\n    }\n    return array;\n}\nfunction readASCII(decoder, count) {\n    const strings = [];\n    let currentString = '';\n    for (let i = 0; i < count; i++) {\n        // eslint-disable-next-line unicorn/prefer-code-point\n        const char = String.fromCharCode(decoder.readUint8());\n        if (char === '\\0') {\n            strings.push(currentString);\n            currentString = '';\n        }\n        else {\n            currentString += char;\n        }\n    }\n    if (strings.length === 1) {\n        return strings[0];\n    }\n    else {\n        return strings;\n    }\n}\nfunction readShort(decoder, count) {\n    if (count === 1)\n        return decoder.readUint16();\n    const array = new Uint16Array(count);\n    for (let i = 0; i < count; i++) {\n        array[i] = decoder.readUint16();\n    }\n    return array;\n}\nfunction readLong(decoder, count) {\n    if (count === 1)\n        return decoder.readUint32();\n    const array = new Uint32Array(count);\n    for (let i = 0; i < count; i++) {\n        array[i] = decoder.readUint32();\n    }\n    return array;\n}\nfunction readRational(decoder, count) {\n    if (count === 1) {\n        return decoder.readUint32() / decoder.readUint32();\n    }\n    const rationals = new Array(count);\n    for (let i = 0; i < count; i++) {\n        rationals[i] = decoder.readUint32() / decoder.readUint32();\n    }\n    return rationals;\n}\nfunction readSByte(decoder, count) {\n    if (count === 1)\n        return decoder.readInt8();\n    const array = new Int8Array(count);\n    for (let i = 0; i < count; i++) {\n        array[i] = decoder.readInt8();\n    }\n    return array;\n}\nfunction readSShort(decoder, count) {\n    if (count === 1)\n        return decoder.readInt16();\n    const array = new Int16Array(count);\n    for (let i = 0; i < count; i++) {\n        array[i] = decoder.readInt16();\n    }\n    return array;\n}\nfunction readSLong(decoder, count) {\n    if (count === 1)\n        return decoder.readInt32();\n    const array = new Int32Array(count);\n    for (let i = 0; i < count; i++) {\n        array[i] = decoder.readInt32();\n    }\n    return array;\n}\nfunction readSRational(decoder, count) {\n    if (count === 1) {\n        return decoder.readInt32() / decoder.readInt32();\n    }\n    const rationals = new Array(count);\n    for (let i = 0; i < count; i++) {\n        rationals[i] = decoder.readInt32() / decoder.readInt32();\n    }\n    return rationals;\n}\nfunction readFloat(decoder, count) {\n    if (count === 1)\n        return decoder.readFloat32();\n    const array = new Float32Array(count);\n    for (let i = 0; i < count; i++) {\n        array[i] = decoder.readFloat32();\n    }\n    return array;\n}\nfunction readDouble(decoder, count) {\n    if (count === 1)\n        return decoder.readFloat64();\n    const array = new Float64Array(count);\n    for (let i = 0; i < count; i++) {\n        array[i] = decoder.readFloat64();\n    }\n    return array;\n}\n//# sourceMappingURL=ifd_value.js.map","import { IOBuffer } from 'iobuffer';\nconst CLEAR_CODE = 256;\nconst EOI_CODE = 257;\n// 0-255 from the table + 256 for clear code + 257 for end of information code.\nconst TABLE_START = 258;\nconst MIN_BIT_LENGTH = 9;\nlet stringTable = [];\nfunction initializeStringTable() {\n    if (stringTable.length === 0) {\n        for (let i = 0; i < 256; i++) {\n            stringTable.push([i]);\n        }\n        // Fill the table with dummy data.\n        // Elements at indices > 257 will be replaced during decompression.\n        const dummyString = [];\n        for (let i = 256; i < 4096; i++) {\n            stringTable.push(dummyString);\n        }\n    }\n}\nconst andTable = [511, 1023, 2047, 4095];\nconst bitJumps = [0, 0, 0, 0, 0, 0, 0, 0, 0, 511, 1023, 2047, 4095];\nclass LzwDecoder {\n    stripArray;\n    nextData = 0;\n    nextBits = 0;\n    bytePointer = 0;\n    tableLength = TABLE_START;\n    currentBitLength = MIN_BIT_LENGTH;\n    outData;\n    constructor(data) {\n        this.stripArray = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        this.outData = new IOBuffer(data.byteLength);\n        this.initializeTable();\n    }\n    decode() {\n        let code = 0;\n        let oldCode = 0;\n        while ((code = this.getNextCode()) !== EOI_CODE) {\n            if (code === CLEAR_CODE) {\n                this.initializeTable();\n                code = this.getNextCode();\n                if (code === EOI_CODE) {\n                    break;\n                }\n                this.writeString(this.stringFromCode(code));\n                oldCode = code;\n            }\n            else if (this.isInTable(code)) {\n                this.writeString(this.stringFromCode(code));\n                this.addStringToTable(this.stringFromCode(oldCode).concat(this.stringFromCode(code)[0]));\n                oldCode = code;\n            }\n            else {\n                const outString = this.stringFromCode(oldCode).concat(this.stringFromCode(oldCode)[0]);\n                this.writeString(outString);\n                this.addStringToTable(outString);\n                oldCode = code;\n            }\n        }\n        const outArray = this.outData.toArray();\n        return new DataView(outArray.buffer, outArray.byteOffset, outArray.byteLength);\n    }\n    initializeTable() {\n        initializeStringTable();\n        this.tableLength = TABLE_START;\n        this.currentBitLength = MIN_BIT_LENGTH;\n    }\n    writeString(string) {\n        this.outData.writeBytes(string);\n    }\n    stringFromCode(code) {\n        // At this point, `code` must be defined in the table.\n        return stringTable[code];\n    }\n    isInTable(code) {\n        return code < this.tableLength;\n    }\n    addStringToTable(string) {\n        stringTable[this.tableLength++] = string;\n        if (stringTable.length > 4096) {\n            stringTable = [];\n            throw new Error('LZW decoding error. Please open an issue at https://github.com/image-js/tiff/issues/new/choose (include a test image).');\n        }\n        if (this.tableLength === bitJumps[this.currentBitLength]) {\n            this.currentBitLength++;\n        }\n    }\n    getNextCode() {\n        this.nextData =\n            (this.nextData << 8) | (this.stripArray[this.bytePointer++] & 0xff);\n        this.nextBits += 8;\n        if (this.nextBits < this.currentBitLength) {\n            this.nextData =\n                (this.nextData << 8) | (this.stripArray[this.bytePointer++] & 0xff);\n            this.nextBits += 8;\n        }\n        const code = (this.nextData >> (this.nextBits - this.currentBitLength)) &\n            andTable[this.currentBitLength - 9];\n        this.nextBits -= this.currentBitLength;\n        // This should not really happen but is present in other codes as well.\n        // See: https://github.com/sugark/Tiffus/blob/15a60123813d1612f4ae9e4fab964f9f7d71cf63/src/org/eclipse/swt/internal/image/TIFFLZWDecoder.java\n        if (this.bytePointer > this.stripArray.length) {\n            return 257;\n        }\n        return code;\n    }\n}\nexport function decompressLzw(stripData) {\n    return new LzwDecoder(stripData).decode();\n}\n//# sourceMappingURL=lzw.js.map","import Ifd from \"./ifd.js\";\n// eslint-disable-next-line prefer-named-capture-group\nconst dateTimeRegex = /^(\\d{4}):(\\d{2}):(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/;\nexport default class TiffIfd extends Ifd {\n    constructor() {\n        super('standard');\n    }\n    // Custom fields\n    get size() {\n        return this.width * this.height;\n    }\n    get width() {\n        return this.imageWidth;\n    }\n    get height() {\n        return this.imageLength;\n    }\n    get components() {\n        return this.samplesPerPixel;\n    }\n    get date() {\n        const date = new Date();\n        const result = dateTimeRegex.exec(this.dateTime);\n        if (result === null) {\n            throw new Error(`invalid dateTime: ${this.dateTime}`);\n        }\n        date.setFullYear(Number(result[1]), Number(result[2]) - 1, Number(result[3]));\n        date.setHours(Number(result[4]), Number(result[5]), Number(result[6]));\n        return date;\n    }\n    // IFD fields\n    get newSubfileType() {\n        return this.get('NewSubfileType');\n    }\n    get imageWidth() {\n        return this.get('ImageWidth');\n    }\n    get imageLength() {\n        return this.get('ImageLength');\n    }\n    get bitsPerSample() {\n        const data = this.get('BitsPerSample');\n        if (data && typeof data !== 'number') {\n            return data[0];\n        }\n        return data;\n    }\n    get alpha() {\n        const extraSamples = this.extraSamples;\n        if (!extraSamples)\n            return false;\n        return extraSamples[0] !== 0;\n    }\n    get associatedAlpha() {\n        const extraSamples = this.extraSamples;\n        if (!extraSamples)\n            return false;\n        return extraSamples[0] === 1;\n    }\n    get extraSamples() {\n        return alwaysArray(this.get('ExtraSamples'));\n    }\n    get compression() {\n        return this.get('Compression') || 1;\n    }\n    get type() {\n        return this.get('PhotometricInterpretation');\n    }\n    get fillOrder() {\n        return this.get('FillOrder') || 1;\n    }\n    get documentName() {\n        return this.get('DocumentName');\n    }\n    get imageDescription() {\n        return this.get('ImageDescription');\n    }\n    get stripOffsets() {\n        return alwaysArray(this.get('StripOffsets'));\n    }\n    get orientation() {\n        return this.get('Orientation');\n    }\n    get samplesPerPixel() {\n        return this.get('SamplesPerPixel') || 1;\n    }\n    get rowsPerStrip() {\n        return this.get('RowsPerStrip') || 2 ** 32 - 1;\n    }\n    get stripByteCounts() {\n        return alwaysArray(this.get('StripByteCounts'));\n    }\n    get minSampleValue() {\n        return this.get('MinSampleValue') || 0;\n    }\n    get maxSampleValue() {\n        return this.get('MaxSampleValue') || 2 ** this.bitsPerSample - 1;\n    }\n    get xResolution() {\n        return this.get('XResolution');\n    }\n    get yResolution() {\n        return this.get('YResolution');\n    }\n    get planarConfiguration() {\n        return this.get('PlanarConfiguration') || 1;\n    }\n    get resolutionUnit() {\n        return this.get('ResolutionUnit') || 2;\n    }\n    get dateTime() {\n        return this.get('DateTime');\n    }\n    get predictor() {\n        return this.get('Predictor') || 1;\n    }\n    get sampleFormat() {\n        const data = alwaysArray(this.get('SampleFormat') || 1);\n        return data[0];\n    }\n    get sMinSampleValue() {\n        return this.get('SMinSampleValue') || this.minSampleValue;\n    }\n    get sMaxSampleValue() {\n        return this.get('SMaxSampleValue') || this.maxSampleValue;\n    }\n    get palette() {\n        const totalColors = 2 ** this.bitsPerSample;\n        const colorMap = this.get('ColorMap');\n        if (!colorMap)\n            return undefined;\n        if (colorMap.length !== 3 * totalColors) {\n            throw new Error(`ColorMap size must be ${totalColors}`);\n        }\n        const palette = [];\n        for (let i = 0; i < totalColors; i++) {\n            palette.push([\n                colorMap[i],\n                colorMap[i + totalColors],\n                colorMap[i + 2 * totalColors],\n            ]);\n        }\n        return palette;\n    }\n    get tileWidth() {\n        return this.get('TileWidth');\n    }\n    get tileHeight() {\n        return this.get('TileLength');\n    }\n    get tileOffsets() {\n        return alwaysArray(this.get('TileOffsets'));\n    }\n    get tileByteCounts() {\n        return alwaysArray(this.get('TileByteCounts'));\n    }\n    get tiled() {\n        return (this.tileWidth !== undefined &&\n            this.tileHeight !== undefined &&\n            this.tileOffsets !== undefined &&\n            this.tileByteCounts !== undefined);\n    }\n}\nfunction alwaysArray(value) {\n    if (typeof value === 'number')\n        return [value];\n    return value;\n}\n//# sourceMappingURL=tiff_ifd.js.map","import { inflate } from 'pako';\nexport function decompressZlib(stripData) {\n    const stripUint8 = new Uint8Array(stripData.buffer, stripData.byteOffset, stripData.byteLength);\n    const inflated = inflate(stripUint8);\n    return new DataView(inflated.buffer, inflated.byteOffset, inflated.byteLength);\n}\n//# sourceMappingURL=zlib.js.map","import { IOBuffer } from 'iobuffer';\nimport { guessStripByteCounts } from \"./hacks.js\";\nimport { applyHorizontalDifferencing16Bit, applyHorizontalDifferencing8Bit, } from \"./horizontal_differencing.js\";\nimport IFD from \"./ifd.js\";\nimport { getByteLength, readData } from \"./ifd_value.js\";\nimport { decompressLzw } from \"./lzw.js\";\nimport TiffIfd from \"./tiff_ifd.js\";\nimport { decompressZlib } from \"./zlib.js\";\nconst defaultOptions = {\n    ignoreImageData: false,\n};\nexport default class TIFFDecoder extends IOBuffer {\n    _nextIFD;\n    constructor(data) {\n        super(data);\n        this._nextIFD = 0;\n    }\n    get isMultiPage() {\n        let c = 0;\n        this.decodeHeader();\n        while (this._nextIFD) {\n            c++;\n            this.decodeIFD({ ignoreImageData: true }, true);\n            if (c === 2) {\n                return true;\n            }\n        }\n        if (c === 1) {\n            return false;\n        }\n        throw unsupported('ifdCount', c);\n    }\n    get pageCount() {\n        let c = 0;\n        this.decodeHeader();\n        while (this._nextIFD) {\n            c++;\n            this.decodeIFD({ ignoreImageData: true }, true);\n        }\n        if (c > 0) {\n            return c;\n        }\n        throw unsupported('ifdCount', c);\n    }\n    decode(options = {}) {\n        const { pages } = options;\n        checkPages(pages);\n        const maxIndex = pages ? Math.max(...pages) : Infinity;\n        options = { ...defaultOptions, ...options };\n        const result = [];\n        this.decodeHeader();\n        let index = 0;\n        while (this._nextIFD) {\n            if (pages) {\n                if (pages.includes(index)) {\n                    result.push(this.decodeIFD(options, true));\n                }\n                else {\n                    this.decodeIFD({ ignoreImageData: true }, true);\n                }\n                if (index === maxIndex) {\n                    break;\n                }\n            }\n            else {\n                result.push(this.decodeIFD(options, true));\n            }\n            index++;\n        }\n        if (index < maxIndex && maxIndex !== Infinity) {\n            throw new RangeError(`Index ${maxIndex} is out of bounds. The stack only contains ${index} images.`);\n        }\n        return result;\n    }\n    decodeHeader() {\n        // Byte offset\n        const value = this.readUint16();\n        if (value === 0x4949) {\n            this.setLittleEndian();\n        }\n        else if (value === 0x4d4d) {\n            this.setBigEndian();\n        }\n        else {\n            throw new Error(`invalid byte order: 0x${value.toString(16)}`);\n        }\n        // Magic number\n        if (this.readUint16() !== 42) {\n            throw new Error('not a TIFF file');\n        }\n        // Offset of the first IFD\n        this._nextIFD = this.readUint32();\n    }\n    decodeIFD(options, tiff) {\n        this.seek(this._nextIFD);\n        let ifd;\n        if (tiff) {\n            ifd = new TiffIfd();\n        }\n        else {\n            if (!options.kind) {\n                throw new Error(`kind is missing`);\n            }\n            ifd = new IFD(options.kind);\n        }\n        const numEntries = this.readUint16();\n        for (let i = 0; i < numEntries; i++) {\n            this.decodeIFDEntry(ifd);\n        }\n        if (!options.ignoreImageData) {\n            if (!(ifd instanceof TiffIfd)) {\n                throw new Error('must be a tiff ifd');\n            }\n            this.decodeImageData(ifd);\n        }\n        this._nextIFD = this.readUint32();\n        return ifd;\n    }\n    decodeIFDEntry(ifd) {\n        const offset = this.offset;\n        const tag = this.readUint16();\n        const type = this.readUint16();\n        const numValues = this.readUint32();\n        if (type < 1 || type > 12) {\n            this.skip(4); // unknown type, skip this value\n            return;\n        }\n        const valueByteLength = getByteLength(type, numValues);\n        if (valueByteLength > 4) {\n            this.seek(this.readUint32());\n        }\n        const value = readData(this, type, numValues);\n        ifd.fields.set(tag, value);\n        // Read sub-IFDs\n        if (tag === 0x8769 || tag === 0x8825) {\n            const currentOffset = this.offset;\n            let kind = 'exif';\n            if (tag === 0x8769) {\n                kind = 'exif';\n            }\n            else if (tag === 0x8825) {\n                kind = 'gps';\n            }\n            this._nextIFD = value;\n            ifd[kind] = this.decodeIFD({\n                kind,\n                ignoreImageData: true,\n            }, false);\n            this.offset = currentOffset;\n        }\n        // go to the next entry\n        this.seek(offset);\n        this.skip(12);\n    }\n    decodeImageData(ifd) {\n        const orientation = ifd.orientation;\n        if (orientation && orientation !== 1) {\n            throw unsupported('orientation', orientation);\n        }\n        switch (ifd.type) {\n            case 0: // WhiteIsZero\n            case 1: // BlackIsZero\n            case 2: // RGB\n            case 3: // Palette color\n                if (ifd.tiled) {\n                    this.readTileData(ifd);\n                }\n                else {\n                    this.readStripData(ifd);\n                }\n                break;\n            default:\n                throw unsupported('image type', ifd.type);\n        }\n        this.applyPredictor(ifd);\n        this.convertAlpha(ifd);\n        if (ifd.bitsPerSample === 1) {\n            this.split1BitData(ifd);\n        }\n        if (ifd.type === 0) {\n            // WhiteIsZero: we invert the values\n            const bitDepth = ifd.bitsPerSample;\n            const maxValue = 2 ** bitDepth - 1;\n            for (let i = 0; i < ifd.data.length; i++) {\n                ifd.data[i] = maxValue - ifd.data[i];\n            }\n        }\n    }\n    split1BitData(ifd) {\n        const { imageWidth, imageLength, samplesPerPixel } = ifd;\n        const data = new Uint8Array(imageLength * imageWidth * samplesPerPixel);\n        const bytesPerRow = Math.ceil((imageWidth * samplesPerPixel) / 8);\n        let dataIndex = 0;\n        for (let row = 0; row < imageLength; row++) {\n            const rowStartByte = row * bytesPerRow;\n            for (let col = 0; col < imageWidth * samplesPerPixel; col++) {\n                const byteIndex = rowStartByte + Math.floor(col / 8);\n                const bitIndex = 7 - (col % 8);\n                const bit = (ifd.data[byteIndex] >> bitIndex) & 1;\n                data[dataIndex++] = bit;\n            }\n        }\n        ifd.data = data;\n    }\n    static uncompress(data, compression = 1) {\n        switch (compression) {\n            // No compression, nothing to do\n            case 1: {\n                return data;\n            }\n            // LZW compression\n            case 5: {\n                return decompressLzw(data);\n            }\n            // Zlib and Deflate compressions. They are identical.\n            case 8:\n            case 32946: {\n                return decompressZlib(data);\n            }\n            case 2: // CCITT Group 3 1-Dimensional Modified Huffman run length encoding\n                throw unsupported('Compression', 'CCITT Group 3');\n            case 32773: // PackBits compression\n                throw unsupported('Compression', 'PackBits');\n            default:\n                throw unsupported('Compression', compression);\n        }\n    }\n    createSampleReader(sampleFormat, bitDepth, littleEndian) {\n        if (bitDepth === 8 || bitDepth === 1) {\n            return (data, index) => data.getUint8(index);\n        }\n        else if (bitDepth === 16) {\n            return (data, index) => data.getUint16(2 * index, littleEndian);\n        }\n        else if (bitDepth === 32 && sampleFormat === 3) {\n            return (data, index) => data.getFloat32(4 * index, littleEndian);\n        }\n        else if (bitDepth === 64 && sampleFormat === 3) {\n            return (data, index) => data.getFloat64(8 * index, littleEndian);\n        }\n        else {\n            throw unsupported('bitDepth', bitDepth);\n        }\n    }\n    readStripData(ifd) {\n        // General Image Dimensions\n        const width = ifd.width;\n        const height = ifd.height;\n        const size = ifd.bitsPerSample !== 1\n            ? width * ifd.samplesPerPixel * height\n            : Math.ceil((width * ifd.samplesPerPixel) / 8) * height;\n        // Compressed Strip Layout\n        const stripOffsets = ifd.stripOffsets;\n        const stripByteCounts = ifd.stripByteCounts || guessStripByteCounts(ifd);\n        const littleEndian = this.isLittleEndian();\n        // For 1-bit images, calculate pixels per strip correctly\n        const stripLength = ifd.bitsPerSample !== 1\n            ? width * ifd.samplesPerPixel * ifd.rowsPerStrip\n            : Math.ceil((width * ifd.samplesPerPixel) / 8) * ifd.rowsPerStrip;\n        const readSamples = this.createSampleReader(ifd.sampleFormat, ifd.bitsPerSample, littleEndian);\n        // Output Data Buffer\n        const output = getDataArray(size, ifd.bitsPerSample, ifd.sampleFormat);\n        // Iterate over Number of Strips\n        let start = 0;\n        for (let i = 0; i < stripOffsets.length; i++) {\n            // Extract Strip Data, Uncompress\n            const stripData = new DataView(this.buffer, this.byteOffset + stripOffsets[i], stripByteCounts[i]);\n            const uncompressed = TIFFDecoder.uncompress(stripData, ifd.compression);\n            // Last strip can be smaller\n            const length = Math.min(stripLength, size - start);\n            // Write Uncompressed Strip Data to Output (Linear Layout)\n            for (let index = 0; index < length; ++index) {\n                const value = readSamples(uncompressed, index);\n                output[start + index] = value;\n            }\n            start += length;\n        }\n        ifd.data = output;\n        // For 1-bit images, we need to convert the data to bits\n    }\n    readTileData(ifd) {\n        if (!ifd.tileWidth || !ifd.tileHeight) {\n            return;\n        }\n        const width = ifd.width;\n        const height = ifd.height;\n        const size = ifd.bitsPerSample !== 1\n            ? width * height * ifd.samplesPerPixel\n            : Math.ceil((width * ifd.samplesPerPixel) / 8) * height;\n        const twidth = ifd.tileWidth;\n        const theight = ifd.tileHeight;\n        const nwidth = Math.ceil(width / twidth);\n        const nheight = Math.ceil(height / theight);\n        const tileOffsets = ifd.tileOffsets;\n        const tileByteCounts = ifd.tileByteCounts;\n        const littleEndian = this.isLittleEndian();\n        const readSamples = this.createSampleReader(ifd.sampleFormat, ifd.bitsPerSample, littleEndian);\n        const output = getDataArray(size, ifd.bitsPerSample, ifd.sampleFormat);\n        for (let nx = 0; nx < nwidth; ++nx) {\n            for (let ny = 0; ny < nheight; ++ny) {\n                const nind = ny * nwidth + nx;\n                const tileData = new DataView(this.buffer, this.byteOffset + tileOffsets[nind], tileByteCounts[nind]);\n                const uncompressed = TIFFDecoder.uncompress(tileData, ifd.compression);\n                if (ifd.bitsPerSample === 1) {\n                    // For 1-bit: read sequentially by bytes\n                    const bytesPerRow = Math.ceil(width / 8);\n                    const tileBytesPerRow = Math.ceil(twidth / 8);\n                    for (let ty = 0; ty < theight && ny * theight + ty < height; ty++) {\n                        const iy = ny * theight + ty;\n                        const srcStart = ty * tileBytesPerRow;\n                        const dstStart = iy * bytesPerRow + Math.floor((nx * twidth) / 8);\n                        // Copy the row of bytes from tile to output\n                        const bytesToCopy = Math.min(tileBytesPerRow, bytesPerRow - Math.floor((nx * twidth) / 8));\n                        for (let b = 0; b < bytesToCopy; b++) {\n                            output[dstStart + b] = readSamples(uncompressed, srcStart + b);\n                        }\n                    }\n                }\n                else {\n                    // For 8/16/32-bit: read by pixels\n                    for (let ty = 0; ty < theight; ty++) {\n                        for (let tx = 0; tx < twidth; tx++) {\n                            const ix = nx * twidth + tx;\n                            const iy = ny * theight + ty;\n                            if (ix >= width || iy >= height)\n                                continue;\n                            const tilePixelIndex = ty * twidth + tx;\n                            const value = readSamples(uncompressed, tilePixelIndex);\n                            const outputPixelIndex = (iy * width + ix) * ifd.samplesPerPixel;\n                            output[outputPixelIndex] = value;\n                        }\n                    }\n                }\n            }\n        }\n        ifd.data = output;\n    }\n    applyPredictor(ifd) {\n        const bitDepth = ifd.bitsPerSample;\n        switch (ifd.predictor) {\n            case 1: {\n                // No prediction scheme, nothing to do\n                break;\n            }\n            case 2: {\n                if (bitDepth === 8) {\n                    applyHorizontalDifferencing8Bit(ifd.data, ifd.width, ifd.components);\n                }\n                else if (bitDepth === 16) {\n                    applyHorizontalDifferencing16Bit(ifd.data, ifd.width, ifd.components);\n                }\n                else {\n                    throw new Error(`Horizontal differencing is only supported for images with a bit depth of ${bitDepth}`);\n                }\n                break;\n            }\n            default:\n                throw new Error(`invalid predictor: ${ifd.predictor}`);\n        }\n    }\n    convertAlpha(ifd) {\n        if (ifd.alpha && ifd.associatedAlpha) {\n            const { data, components, maxSampleValue } = ifd;\n            for (let i = 0; i < data.length; i += components) {\n                const alphaValue = data[i + components - 1];\n                for (let j = 0; j < components - 1; j++) {\n                    data[i + j] = Math.round((data[i + j] * maxSampleValue) / alphaValue);\n                }\n            }\n        }\n    }\n}\nfunction getDataArray(size, bitDepth, sampleFormat) {\n    if (bitDepth === 8 || bitDepth === 1) {\n        return new Uint8Array(size);\n    }\n    else if (bitDepth === 16) {\n        return new Uint16Array(size);\n    }\n    else if (bitDepth === 32 && sampleFormat === 3) {\n        return new Float32Array(size);\n    }\n    else if (bitDepth === 64 && sampleFormat === 3) {\n        return new Float64Array(size);\n    }\n    else {\n        throw unsupported('bit depth / sample format', `${bitDepth} / ${sampleFormat}`);\n    }\n}\nfunction unsupported(type, value) {\n    return new Error(`Unsupported ${type}: ${value}`);\n}\nfunction checkPages(pages) {\n    if (pages) {\n        for (const page of pages) {\n            if (page < 0 || !Number.isInteger(page)) {\n                throw new RangeError(`Index ${page} is invalid. Must be a positive integer.`);\n            }\n        }\n    }\n}\n//# sourceMappingURL=tiff_decoder.js.map","import { tagsById as exif } from \"./tags/exif.js\";\nimport { tagsById as gps } from \"./tags/gps.js\";\nimport { tagsById as standard } from \"./tags/standard.js\";\nimport TIFFDecoder from \"./tiff_decoder.js\";\nfunction decodeTIFF(data, options) {\n    const decoder = new TIFFDecoder(data);\n    return decoder.decode(options);\n}\nfunction isMultiPage(data) {\n    const decoder = new TIFFDecoder(data);\n    return decoder.isMultiPage;\n}\nfunction pageCount(data) {\n    const decoder = new TIFFDecoder(data);\n    return decoder.pageCount;\n}\nconst tagNames = {\n    exif,\n    gps,\n    standard,\n};\nexport { decodeTIFF as decode, isMultiPage, pageCount, tagNames };\nexport {} from \"./types.js\";\nexport { default as TiffIfd } from \"./tiff_ifd.js\";\n//# sourceMappingURL=index.js.map","import { IOBuffer } from 'iobuffer';\nimport { decode as decodeTIFF } from 'tiff';\nexport function decode(data) {\n    const buffer = new IOBuffer(data);\n    const result = {};\n    buffer.setBigEndian();\n    const val = buffer.readUint16();\n    if (val !== 0xffd8) {\n        throw new Error('SOI marker not found. Not a valid JPEG file');\n    }\n    const next = buffer.readUint16();\n    if (next === 0xffe1) {\n        buffer.skip(2);\n        const header = buffer.readBytes(6);\n        if (header[0] === 69 && // E\n            header[1] === 120 && // x\n            header[2] === 105 && // i\n            header[3] === 102 && // f\n            header[4] === 0 &&\n            header[5] === 0) {\n            result.exif = decodeTIFF(new Uint8Array(buffer.buffer, buffer.byteOffset + 12, buffer.byteLength - 12), {\n                pages: [0],\n                ignoreImageData: true,\n            });\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=decode.js.map","/**\n * Get metadata from an IFD.\n * @param ifd - The IFD.\n * @returns The metadata.\n */\nexport function getMetadata(ifd) {\n    return {\n        tiff: {\n            fields: ifd.fields,\n            tags: ifd.map,\n        },\n        exif: ifd.exif,\n    };\n}\n//# sourceMappingURL=getMetadata.js.map","import { decode as decodeExif } from 'fast-jpeg';\nimport { decode } from 'jpeg-js';\nimport { Image } from '../Image.js';\nimport { getMetadata } from './getMetadata.js';\n/**\n * Decode a jpeg. See the jpeg-js npm module.\n * @param buffer - The data to decode.\n * @returns The decoded image.\n */\nexport function decodeJpeg(buffer) {\n    const jpeg = decode(buffer, {\n        useTArray: true,\n        maxMemoryUsageInMB: Number.POSITIVE_INFINITY,\n        maxResolutionInMP: Number.POSITIVE_INFINITY,\n    });\n    const decodedExif = decodeExif(buffer);\n    // TODO : handle stacks (many IFDs?)\n    const meta = decodedExif.exif?.[0]\n        ? getMetadata(decodedExif.exif[0])\n        : undefined;\n    return new Image(jpeg.width, jpeg.height, {\n        data: jpeg.data,\n        colorModel: 'RGBA',\n        meta,\n    });\n}\n//# sourceMappingURL=decodeJpeg.js.map","import { decode } from 'fast-png';\nimport { Image } from '../Image.js';\nimport { assert } from '../utils/validators/assert.js';\n/**\n * Decode a PNG. See the fast-png npm module.\n * @param buffer - The data to decode.\n * @returns The decoded image.\n */\nexport function decodePng(buffer) {\n    const png = decode(buffer);\n    let colorModel;\n    const bitDepth = png.depth;\n    if (png.palette) {\n        return loadPalettePng(png);\n    }\n    if (bitDepth === 1) {\n        return new Image(png.width, png.height, {\n            data: decodeBinary(png),\n            colorModel: 'GREY',\n        });\n    }\n    switch (png.channels) {\n        case 1:\n            colorModel = 'GREY';\n            break;\n        case 2:\n            colorModel = 'GREYA';\n            break;\n        case 3:\n            colorModel = 'RGB';\n            break;\n        case 4:\n            colorModel = 'RGBA';\n            break;\n        default:\n            throw new RangeError(`invalid number of channels: ${png.channels}`);\n    }\n    return new Image(png.width, png.height, {\n        colorModel,\n        bitDepth,\n        data: png.data,\n    });\n}\n/**\n * Compute PNG data from palette information and return a new image.\n * @param png - Decoded PNG.\n * @returns The new image.\n */\nfunction loadPalettePng(png) {\n    assert(png.palette);\n    const pixels = png.width * png.height;\n    const data = new Uint8Array(pixels * png.palette[0].length);\n    const pixelsPerByte = 8 / png.depth;\n    const factor = png.depth < 8 ? pixelsPerByte : 1;\n    const mask = Number.parseInt('1'.repeat(png.depth), 2);\n    let dataIndex = 0;\n    for (let i = 0; i < pixels; i++) {\n        const index = Math.floor(i / factor);\n        let value = png.data[index];\n        if (png.depth < 8) {\n            value =\n                (value >>> (png.depth * (pixelsPerByte - 1 - (i % pixelsPerByte)))) &\n                    mask;\n        }\n        const paletteValue = png.palette[value];\n        for (const paletteChannel of paletteValue) {\n            data[dataIndex++] = paletteChannel;\n        }\n    }\n    return new Image(png.width, png.height, {\n        data,\n        colorModel: png.palette[0].length === 4 ? 'RGBA' : 'RGB',\n    });\n}\nfunction decodeBinary(png) {\n    const totalPixels = png.width * png.height;\n    const result = new Uint8Array(totalPixels);\n    const pngData = png.data;\n    const padding = png.width % 8;\n    const bytesPerLine = Math.ceil(png.width / 8);\n    let pixelIndex = 0;\n    for (let byteIndex = 0; byteIndex < pngData.length && pixelIndex < totalPixels; byteIndex++) {\n        const byte = pngData[byteIndex];\n        const limit = byteIndex % bytesPerLine === 0 ? 8 - padding : 0;\n        for (let bitIndex = 7; bitIndex >= limit && pixelIndex < totalPixels; bitIndex--) {\n            const bit = (byte >> bitIndex) & 1;\n            result[pixelIndex++] = bit * 255;\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=decodePng.js.map","import { decode } from 'tiff';\nimport { Image } from '../Image.js';\nimport { getMetadata } from './getMetadata.js';\n/**\n * Decode a TIFF. See the tiff module.\n * @param buffer - The data to decode.\n * @returns The decoded image.\n */\nexport function decodeTiff(buffer) {\n    const result = decode(buffer, { pages: [0] });\n    return getImageFromIFD(result[0]);\n}\n/**\n * Create image from a single IFD.\n * @param ifd - The IFD.\n * @returns The decoded image.\n */\nexport function getImageFromIFD(ifd) {\n    if (ifd.data instanceof Float32Array || ifd.data instanceof Float64Array) {\n        throw new Error('Float TIFF data is not supported.');\n    }\n    if (ifd.type === 3) {\n        const hasAlpha = ifd.samplesPerPixel === 2;\n        const pixelLength = hasAlpha ? 4 : 3;\n        const data = new Uint16Array(pixelLength * ifd.width * ifd.height);\n        const palette = ifd.palette;\n        let ptr = 0;\n        if (hasAlpha) {\n            for (let index = 0; index < ifd.data.length; index += ifd.samplesPerPixel) {\n                const color = palette[ifd.data[index]];\n                data[ptr++] = color[0];\n                data[ptr++] = color[1];\n                data[ptr++] = color[2];\n                // To ensure that the value is 16 bits.\n                data[ptr++] = Math.round((ifd.data[index + 1] / 2 ** ifd.bitsPerSample) * 65535);\n            }\n        }\n        else {\n            for (let index = 0; index < ifd.data.length; index += ifd.samplesPerPixel) {\n                const color = palette[ifd.data[index]];\n                data[ptr++] = color[0];\n                data[ptr++] = color[1];\n                data[ptr++] = color[2];\n            }\n        }\n        return new Image(ifd.width, ifd.height, {\n            data,\n            colorModel: hasAlpha ? 'RGBA' : 'RGB',\n            bitDepth: 16,\n            meta: getMetadata(ifd),\n        });\n    }\n    else if (ifd.type === 1 || ifd.type === 0) {\n        if (ifd.bitsPerSample !== 1) {\n            return new Image(ifd.width, ifd.height, {\n                data: ifd.data,\n                bitDepth: ifd.bitsPerSample,\n                colorModel: ifd.alpha ? 'GREYA' : 'GREY',\n                meta: getMetadata(ifd),\n            });\n        }\n        else {\n            return new Image(ifd.width, ifd.height, {\n                data: ifd.data.map((pixel) => pixel * 255),\n                bitDepth: 8,\n                colorModel: 'GREY',\n                meta: getMetadata(ifd),\n            });\n        }\n    }\n    else {\n        return new Image(ifd.width, ifd.height, {\n            data: ifd.data,\n            bitDepth: ifd.bitsPerSample,\n            colorModel: ifd.alpha ? 'RGBA' : 'RGB',\n            meta: getMetadata(ifd),\n        });\n    }\n}\n//# sourceMappingURL=decodeTiff.js.map","import imageType from 'image-type';\nimport { match } from 'ts-pattern';\nimport { decodeBmp } from \"./decodeBmp.js\";\nimport { decodeJpeg } from './decodeJpeg.js';\nimport { decodePng } from './decodePng.js';\nimport { decodeTiff } from './decodeTiff.js';\n/**\n * Decode input data. Data format is automatically detected.\n * Possible formats: png, jpeg and tiff.\n * @param data - Data to decode.\n * @returns The decoded image.\n */\nexport function decode(data) {\n    const typedArray = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    const type = imageType(typedArray);\n    return match(type)\n        .with({ mime: 'image/png' }, () => decodePng(typedArray))\n        .with({ mime: 'image/jpeg' }, () => decodeJpeg(typedArray))\n        .with({ mime: 'image/tiff' }, () => decodeTiff(typedArray))\n        .with({ mime: 'image/bmp' }, () => decodeBmp(typedArray))\n        .otherwise(() => {\n        throw new RangeError(`invalid data format: ${type?.mime}`);\n    });\n}\n//# sourceMappingURL=decode.js.map","import { getNodeApiOrThrow } from '../utils/cross_platform.js';\nimport { decode } from './decode.js';\n/**\n * Read an image from the disk.\n * The file format is automatically selected based on the first few bytes.\n * This method is only implemented for Node.js.\n * @param path - The path to the image.\n * @returns Image instance.\n */\nexport async function read(path) {\n    const nodeApi = getNodeApiOrThrow('read');\n    const data = await nodeApi.fs.promises.readFile(path);\n    return decode(data);\n}\n/**\n * Synchronous version of @see {@link read}.\n * This method is only implemented for Node.js.\n * @param path - The path to the image.\n * @returns Image instance.\n */\nexport function readSync(path) {\n    const nodeApi = getNodeApiOrThrow('readSync');\n    return decode(nodeApi.fs.readFileSync(path));\n}\n//# sourceMappingURL=read.js.map","import { Image } from '../Image.js';\nimport { assert } from '../utils/validators/assert.js';\n/**\n * Read an image from an HTML canvas element.\n * @param canvas - Canvas element.\n * @returns The read image.\n */\nexport function readCanvas(canvas) {\n    const ctx = canvas.getContext('2d');\n    assert(ctx);\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    return new Image(imageData.width, imageData.height, {\n        data: new Uint8Array(imageData.data.buffer, imageData.data.byteOffset, imageData.data.byteLength),\n        colorModel: 'RGBA',\n    });\n}\n//# sourceMappingURL=readCanvas.js.map","import { assert } from '../utils/validators/assert.js';\nimport { readCanvas } from './readCanvas.js';\n// TODO: Create nodejs version that throws an error\n/**\n * Read an image from an HTML image source.\n * @param img - Image source such as an <img> or <svg> element.\n * @returns The read image.\n */\nexport function readImg(img) {\n    const canvas = document.createElement('canvas');\n    canvas.width = img.width;\n    canvas.height = img.height;\n    const ctx = canvas.getContext('2d');\n    assert(ctx);\n    ctx.drawImage(img, 0, 0);\n    return readCanvas(canvas);\n}\n//# sourceMappingURL=readImg.js.map","import { decode } from './decode.js';\n/**\n * Fetches image URL and decodes it.\n * @param dataUrl - Image URL.\n * @returns decoded image data.\n */\nexport async function fetchURL(dataUrl) {\n    const response = await fetch(dataUrl);\n    const arrayBuffer = await response.arrayBuffer();\n    const image = decode(new DataView(arrayBuffer));\n    return image;\n}\n//# sourceMappingURL=fetchURL.js.map","/**\n * Convert HSV (hue, saturation, value) color code to RGB.\n * - Hue: angle in the color wheel (from red to purple), in range 0-359.\n * - Saturation: how strong the color is (from white to bright color), in range 0-255.\n * - Value: basically the brightness (from black to intense color), in range 0-255.\n * @param hsv - The HSV color.\n * @returns The RGB color.\n */\nexport function hsvToRgb(hsv) {\n    const h = hsv[0];\n    const s = hsv[1] / 255;\n    const v = hsv[2] / 255;\n    const C = s * v;\n    const X = C * (1 - Math.abs(((h / 60) % 2) - 1));\n    const m = v - C;\n    let r, g, b;\n    if (h >= 0 && h < 60) {\n        r = C;\n        g = X;\n        b = 0;\n    }\n    else if (h >= 60 && h < 120) {\n        r = X;\n        g = C;\n        b = 0;\n    }\n    else if (h >= 120 && h < 180) {\n        r = 0;\n        g = C;\n        b = X;\n    }\n    else if (h >= 180 && h < 240) {\n        r = 0;\n        g = X;\n        b = C;\n    }\n    else if (h >= 240 && h < 300) {\n        r = X;\n        g = 0;\n        b = C;\n    }\n    else {\n        r = C;\n        g = 0;\n        b = X;\n    }\n    const rgb = new Uint8Array(3);\n    rgb[0] = (r + m) * 255;\n    rgb[1] = (g + m) * 255;\n    rgb[2] = (b + m) * 255;\n    return rgb;\n}\n//# sourceMappingURL=hsvToRgb.js.map","/**\n * Convert RGB array to 32 bits number where alpha is set to 255.\n * @param rgb - The RGB color array.\n * @returns 32 bits number encoding RGBA color.\n */\nexport function rgbToNumber(rgb) {\n    return 0xff000000 + (rgb[2] << 16) + (rgb[1] << 8) + rgb[0];\n}\n//# sourceMappingURL=rgbToNumber.js.map","import { hsvToRgb } from '../hsvToRgb.js';\nimport { rgbToNumber } from '../rgbToNumber.js';\n/**\n * Return a map where ROIs are red (negative) or green (positive) depending on the ROI index.\n * @param options - Color maps options.\n * @returns The colored map.\n */\nexport function getBinaryMap(options) {\n    const { nbNegative, nbPositive, whiteHue = 120, blackHue = 0, roiKind = 'bw', } = options;\n    const colorMap = new Uint32Array(nbNegative + nbPositive + 1);\n    // negative values\n    if (roiKind === 'bw' || roiKind === 'black') {\n        for (let i = -nbNegative; i < 0; i++) {\n            const hsv = [blackHue, 255, 255];\n            colorMap[i + nbNegative] = rgbToNumber(hsvToRgb(hsv));\n        }\n    }\n    if (roiKind === 'bw' || roiKind === 'white') {\n        // positive values\n        for (let i = 1; i <= nbPositive; i++) {\n            const hsv = [whiteHue, 255, 255];\n            colorMap[i + nbNegative] = rgbToNumber(hsvToRgb(hsv));\n        }\n    }\n    return colorMap;\n}\n//# sourceMappingURL=getBinaryMap.js.map","import { match } from 'ts-pattern';\nimport { hsvToRgb } from '../hsvToRgb.js';\nimport { rgbToNumber } from '../rgbToNumber.js';\n/**\n * Return a map where ROIs are all different hues.\n * @param options - Get temperature map options.\n * @returns The colored map.\n */\nexport function getRainbowMap(options) {\n    const { nbNegative, nbPositive, roiKind = 'bw' } = options;\n    const colorMap = new Uint32Array(nbNegative + nbPositive + 1);\n    const hueRange = 360;\n    const step = match(roiKind)\n        .with('bw', () => hueRange / (nbNegative + nbPositive))\n        .with('black', () => hueRange / nbNegative)\n        .with('white', () => hueRange / nbPositive)\n        .exhaustive();\n    // negative values\n    let hue = 0;\n    if (roiKind === 'bw' || roiKind === 'black') {\n        for (let i = -nbNegative; i < 0; i++) {\n            const hsv = [hue, 255, 255];\n            colorMap[i + nbNegative] = rgbToNumber(hsvToRgb(hsv));\n            hue += step;\n        }\n    }\n    // positive values\n    if (roiKind === 'bw' || roiKind === 'white') {\n        for (let i = 1; i <= nbPositive; i++) {\n            const hsv = [hue, 255, 255];\n            colorMap[i + nbNegative] = rgbToNumber(hsvToRgb(hsv));\n            hue += step;\n        }\n    }\n    return colorMap;\n}\n//# sourceMappingURL=getRainbowMap.js.map","import { hsvToRgb } from '../hsvToRgb.js';\nimport { rgbToNumber } from '../rgbToNumber.js';\n/**\n * Return a map where ROIs are different shades of red (positive) or blue (negative) depending on the ROI index. It it the saturation of the HSV color model that is varied.\n * @param options - Get temperature map options.\n * @returns The colored map.\n */\nexport function getSaturationMap(options) {\n    const { nbNegative, nbPositive, roiKind = 'bw', whiteHue = 0, blackHue = 240, } = options;\n    const colorMap = new Uint32Array(nbNegative + nbPositive + 1);\n    const range = 255 - 63; // saturation range for good contrast\n    const negativeStep = range / nbNegative;\n    const positiveStep = range / nbPositive;\n    // negative values\n    let counter = 0;\n    if (roiKind === 'bw' || roiKind === 'black') {\n        for (let i = -nbNegative; i < 0; i++) {\n            const hsv = [blackHue, 255 - counter++ * negativeStep, 255];\n            colorMap[i + nbNegative] = rgbToNumber(hsvToRgb(hsv));\n        }\n    }\n    // positive values\n    counter = 0;\n    if (roiKind === 'bw' || roiKind === 'white') {\n        for (let i = 1; i <= nbPositive; i++) {\n            const hsv = [whiteHue, 255 - counter++ * positiveStep, 255];\n            colorMap[i + nbNegative] = rgbToNumber(hsvToRgb(hsv));\n        }\n    }\n    return colorMap;\n}\n//# sourceMappingURL=getSaturationMap.js.map","import { match } from 'ts-pattern';\nimport { getBinaryMap } from './colorMaps/getBinaryMap.js';\nimport { getRainbowMap } from './colorMaps/getRainbowMap.js';\nimport { getSaturationMap } from './colorMaps/getSaturationMap.js';\n/**\n * Return a map of 32 bits integers corresponding to the colors of each ROI.\n * @param options - Get color map options.\n * @returns The color map.\n */\nexport function getColorMap(options) {\n    const { mode = 'binary' } = options;\n    options = { roiKind: 'bw', ...options };\n    return match(mode)\n        .with('binary', () => getBinaryMap(options))\n        .with('saturation', () => getSaturationMap(options))\n        .with('rainbow', () => getRainbowMap(options))\n        .exhaustive();\n}\n//# sourceMappingURL=getColorMap.js.map","import { Image } from '../Image.js';\nimport { getColorMap } from './utils/getColorMap.js';\nexport const RoisColorMode = {\n    /**\n     * Only two acceptable values: red or green.\n     */\n    BINARY: 'binary',\n    /**\n     * Palette of reds and blues.\n     */\n    SATURATION: 'saturation',\n    /**\n     * All possible hues (gradient of colors).\n     */\n    RAINBOW: 'rainbow',\n};\n/**\n * Generate an image with all the ROIs of various colors.\n * @param roiMapManager - The ROI map manager.\n * @param options - Color ROIs options.\n * @returns The colored image.\n */\nexport function colorRois(roiMapManager, options = {}) {\n    const { roiKind = 'bw', mode = 'binary' } = options;\n    const map = roiMapManager.getMap();\n    const image = new Image(map.width, map.height, {\n        colorModel: 'RGBA',\n    });\n    const colorMap = getColorMap({\n        roiKind,\n        mode,\n        nbNegative: map.nbNegative,\n        nbPositive: map.nbPositive,\n    });\n    const data32 = new Uint32Array(image.getRawImage().data.buffer);\n    for (let index = 0; index < image.size; index++) {\n        data32[index] = colorMap[map.data[index] + map.nbNegative];\n    }\n    return image;\n}\n//# sourceMappingURL=colorRois.js.map","/**\n * Return an array with the coordinates of the pixels that are on the border of the ROI.\n * The reference is the top-left corner of the ROI.\n * @param roi - ROI to process.\n * @param options - Get border points options.\n * @returns The array of border pixels.\n */\nexport function getBorderPoints(roi, options = {}) {\n    const mask = roi.getMask();\n    return mask.getBorderPoints(options);\n}\n//# sourceMappingURL=getBorderPoints.js.map","import { Mask } from '../Mask.js';\n/**\n * Generate a mask of an ROI.\n * @param roi - The ROI to generate a mask for.\n * @param options - Get mask options.\n * @returns The ROI mask.\n */\nexport function getMask(roi, options = {}) {\n    const { solidFill = false } = options;\n    const mask = new Mask(roi.width, roi.height, { origin: roi.origin });\n    for (let row = 0; row < roi.height; row++) {\n        for (let column = 0; column < roi.width; column++) {\n            if (roi.getMapValue(roi.origin.column + column, roi.origin.row + row) ===\n                roi.id) {\n                mask.setBit(column, row, 1);\n            }\n            else {\n                mask.setBit(column, row, 0);\n            }\n        }\n    }\n    if (solidFill) {\n        mask.solidFill({ out: mask });\n    }\n    return mask;\n}\n//# sourceMappingURL=getMask.js.map","import { EigenvalueDecomposition } from 'ml-matrix';\nimport { xVariance, xyCovariance } from 'ml-spectra-processing';\nimport { getAngle } from '../../maskAnalysis/utils/getAngle.js';\nimport { toDegrees } from '../../utils/geometry/angles.js';\nimport { assert } from '../../utils/validators/assert.js';\n/**\n * Calculates ellipse on around ROI.\n * @param roi - Region of interest.\n * @returns Ellipse.\n */\nexport function getEllipse(roi) {\n    const xCenter = roi.centroid.column;\n    const yCenter = roi.centroid.row;\n    const xCentered = roi.relativePoints.map((point) => point.column - xCenter);\n    const yCentered = roi.relativePoints.map((point) => point.row - yCenter);\n    const centeredXVariance = xVariance(xCentered, { unbiased: false });\n    const centeredYVariance = xVariance(yCentered, { unbiased: false });\n    const centeredCovariance = xyCovariance({\n        x: xCentered,\n        y: yCentered,\n    }, { unbiased: false });\n    //spectral decomposition of the sample covariance matrix\n    const sampleCovarianceMatrix = [\n        [centeredXVariance, centeredCovariance],\n        [centeredCovariance, centeredYVariance],\n    ];\n    const e = new EigenvalueDecomposition(sampleCovarianceMatrix);\n    const eigenvalues = e.realEigenvalues;\n    const vectors = e.eigenvectorMatrix;\n    assert(eigenvalues[0] <= eigenvalues[1]);\n    let radiusMajor = Math.sqrt(eigenvalues[1]);\n    let radiusMinor = Math.sqrt(eigenvalues[0]);\n    const vectorMajor = vectors.getColumn(1);\n    const vectorMinor = vectors.getColumn(0);\n    let majorAxisPoint1 = {\n        column: xCenter + radiusMajor * vectorMajor[0],\n        row: yCenter + radiusMajor * vectorMajor[1],\n    };\n    let majorAxisPoint2 = {\n        column: xCenter - radiusMajor * vectorMajor[0],\n        row: yCenter - radiusMajor * vectorMajor[1],\n    };\n    let minorAxisPoint1 = {\n        column: xCenter + radiusMinor * vectorMinor[0],\n        row: yCenter + radiusMinor * vectorMinor[1],\n    };\n    let minorAxisPoint2 = {\n        column: xCenter - radiusMinor * vectorMinor[0],\n        row: yCenter - radiusMinor * vectorMinor[1],\n    };\n    let majorLength = Math.hypot(majorAxisPoint1.column - majorAxisPoint2.column, majorAxisPoint1.row - majorAxisPoint2.row);\n    let minorLength = Math.hypot(minorAxisPoint1.column - majorAxisPoint2.column, minorAxisPoint1.row - minorAxisPoint2.row);\n    let ellipseSurface = (((minorLength / 2) * majorLength) / 2) * Math.PI;\n    if (ellipseSurface !== roi.surface) {\n        const scaleFactor = Math.sqrt(roi.surface / ellipseSurface);\n        radiusMajor *= scaleFactor;\n        radiusMinor *= scaleFactor;\n        majorAxisPoint1 = {\n            column: xCenter + radiusMajor * vectorMajor[0],\n            row: yCenter + radiusMajor * vectorMajor[1],\n        };\n        majorAxisPoint2 = {\n            column: xCenter - radiusMajor * vectorMajor[0],\n            row: yCenter - radiusMajor * vectorMajor[1],\n        };\n        minorAxisPoint1 = {\n            column: xCenter + radiusMinor * vectorMinor[0],\n            row: yCenter + radiusMinor * vectorMinor[1],\n        };\n        minorAxisPoint2 = {\n            column: xCenter - radiusMinor * vectorMinor[0],\n            row: yCenter - radiusMinor * vectorMinor[1],\n        };\n        majorLength *= scaleFactor;\n        minorLength *= scaleFactor;\n        ellipseSurface *= scaleFactor ** 2;\n    }\n    return {\n        center: {\n            column: xCenter,\n            row: yCenter,\n        },\n        majorAxis: {\n            points: [majorAxisPoint1, majorAxisPoint2],\n            length: majorLength,\n            angle: toDegrees(getAngle(majorAxisPoint1, majorAxisPoint2)),\n        },\n        minorAxis: {\n            points: [minorAxisPoint1, minorAxisPoint2],\n            length: minorLength,\n            angle: toDegrees(getAngle(minorAxisPoint1, minorAxisPoint2)),\n        },\n        surface: ellipseSurface,\n    };\n}\n//# sourceMappingURL=getEllipse.js.map","import { getConvexHull } from '../maskAnalysis/getConvexHull.js';\nimport { getFeret } from '../maskAnalysis/getFeret.js';\nimport { getMbr } from '../maskAnalysis/getMbr.js';\nimport { getBorderPoints } from './getBorderPoints.js';\nimport { getMask } from './getMask.js';\nimport { getEllipse } from './properties/getEllipse.js';\nexport class Roi {\n    /**\n     * Original map with all the ROI IDs.\n     */\n    map;\n    /**\n     * ID of the ROI. Positive for white ROIs and negative for black ones.\n     */\n    id;\n    /**\n     * Origin of the ROI. The top-left corner of the rectangle around\n     * the ROI relative to the original image.\n     */\n    origin;\n    /**\n     * Width of the ROI.\n     */\n    width;\n    /**\n     * Height of the ROI.\n     */\n    height;\n    /**\n     * Surface of the ROI.\n     */\n    surface;\n    /**\n     * Cached values of properties to improve performance.\n     */\n    #computed;\n    constructor(map, id, width, height, origin, surface) {\n        this.map = map;\n        this.id = id;\n        this.origin = origin;\n        this.width = width;\n        this.height = height;\n        this.surface = surface;\n        this.#computed = {};\n    }\n    /**\n     * Return the value at the given coordinates in an ROI map.\n     * @param column - Column of the value.\n     * @param row - Row of the value.\n     * @returns The value at the given coordinates.\n     */\n    getMapValue(column, row) {\n        return this.map.data[this.map.width * row + column];\n    }\n    /**\n     * Returns the ratio between the width and the height of the bounding rectangle of the ROI.\n     * @returns The width by height ratio.\n     */\n    getRatio() {\n        return this.width / this.height;\n    }\n    /**\n     * Generates a mask of an ROI. You can specify the kind of mask you want using the `kind` option.\n     * @param options - Get Mask options.\n     * @returns The ROI mask.\n     */\n    getMask(options) {\n        return getMask(this, options);\n    }\n    /**\n     * Computes the diameter of a circle that has the same perimeter as the particle image.\n     * @returns Ped value in pixels.\n     */\n    get ped() {\n        return this.perimeter / Math.PI;\n    }\n    /**\n     * Return an array with the coordinates of the pixels that are on the border of the ROI.\n     * The points are defined as [column, row].\n     * @param options - Get border points options.\n     * @returns The array of border pixels.\n     */\n    getBorderPoints(options) {\n        return getBorderPoints(this, options);\n    }\n    /**\n     * Returns an array of ROIs IDs that are included in the current ROI.\n     * This will be useful to know if there are some holes in the ROI.\n     * @returns InternalIDs.\n     */\n    get internalIDs() {\n        return this.#getComputed('internalIDs', () => {\n            const internal = [this.id];\n            const roiMap = this.map;\n            const data = roiMap.data;\n            if (this.height > 2) {\n                for (let column = 0; column < this.width; column++) {\n                    const target = this.#computeIndex(0, column);\n                    if (internal.includes(data[target])) {\n                        const id = data[target + roiMap.width];\n                        if (!internal.includes(id) && !this.boxIDs.includes(id)) {\n                            internal.push(id);\n                        }\n                    }\n                }\n            }\n            const array = new Array(4);\n            for (let column = 1; column < this.width - 1; column++) {\n                for (let row = 1; row < this.height - 1; row++) {\n                    const target = this.#computeIndex(row, column);\n                    if (internal.includes(data[target])) {\n                        // We check if one of the neighbor is not yet in.\n                        array[0] = data[target - 1];\n                        array[1] = data[target + 1];\n                        array[2] = data[target - roiMap.width];\n                        array[3] = data[target + roiMap.width];\n                        for (let i = 0; i < 4; i++) {\n                            const id = array[i];\n                            if (!internal.includes(id) && !this.boxIDs.includes(id)) {\n                                internal.push(id);\n                            }\n                        }\n                    }\n                }\n            }\n            return internal;\n        });\n    }\n    /**\n     * Returns an array of ROIs IDs that touch the current ROI.\n     * @returns The array of Borders.\n     */\n    get externalBorders() {\n        return this.#getComputed('externalBorders', () => {\n            // Takes all the borders and removes the internal one ...\n            const borders = this.borders;\n            const externalBorders = [];\n            const externalIDs = [];\n            const internals = this.internalIDs;\n            for (const border of borders) {\n                if (!internals.includes(border.connectedID)) {\n                    const element = {\n                        connectedID: border.connectedID,\n                        length: border.length,\n                    };\n                    externalIDs.push(element.connectedID);\n                    externalBorders.push(element);\n                }\n            }\n            return externalBorders;\n        });\n    }\n    /**\n     * Calculates and caches the number of sides by which each pixel is touched externally.\n     * @returns An object which tells how many pixels are exposed externally to how many sides.\n     */\n    get perimeterInfo() {\n        return this.#getComputed('perimeterInfo', () => {\n            const roiMap = this.map;\n            const data = roiMap.data;\n            let one = 0;\n            let two = 0;\n            let three = 0;\n            let four = 0;\n            const externalIDs = new Set(this.externalBorders.map((element) => element.connectedID));\n            for (let column = 0; column < this.width; column++) {\n                for (let row = 0; row < this.height; row++) {\n                    const target = this.#computeIndex(row, column);\n                    if (data[target] === this.id) {\n                        let nbAround = 0;\n                        if (column === 0) {\n                            nbAround++;\n                        }\n                        else if (externalIDs.has(data[target - 1])) {\n                            nbAround++;\n                        }\n                        if (column === roiMap.width - 1) {\n                            nbAround++;\n                        }\n                        else if (externalIDs.has(data[target + 1])) {\n                            nbAround++;\n                        }\n                        if (row === 0) {\n                            nbAround++;\n                        }\n                        else if (externalIDs.has(data[target - roiMap.width])) {\n                            nbAround++;\n                        }\n                        if (row === roiMap.height - 1) {\n                            nbAround++;\n                        }\n                        else if (externalIDs.has(data[target + roiMap.width])) {\n                            nbAround++;\n                        }\n                        switch (nbAround) {\n                            case 1:\n                                one++;\n                                break;\n                            case 2:\n                                two++;\n                                break;\n                            case 3:\n                                three++;\n                                break;\n                            case 4:\n                                four++;\n                                break;\n                            default:\n                        }\n                    }\n                }\n            }\n            return { one, two, three, four };\n        });\n    }\n    /**\n     * Perimeter of the ROI.\n     * The perimeter is calculated using the sum of all the external borders of the ROI to which we subtract:\n     * (2 - √2) * the number of pixels that have 2 external borders\n     * 2 * (2 - √2) * the number of pixels that have 3 external borders\n     * @returns Perimeter value in pixels.\n     */\n    get perimeter() {\n        const info = this.perimeterInfo;\n        const delta = 2 - Math.sqrt(2);\n        return (info.one +\n            info.two * 2 +\n            info.three * 3 +\n            info.four * 4 -\n            delta * (info.two + info.three * 2 + info.four));\n    }\n    /**\n     * Computes ROI points relative to ROIs point of `origin`.\n     * @returns Array of points with relative ROI coordinates.\n     */\n    get relativePoints() {\n        return this.#getComputed(`relativePoints`, () => {\n            const points = Array.from(this.points(false));\n            return points;\n        });\n    }\n    /**\n     * Computes ROI points relative to Image's/Mask's point of `origin`.\n     * @returns Array of points with absolute ROI coordinates.\n     */\n    get absolutePoints() {\n        return this.#getComputed(`absolutePoints`, () => {\n            const points = Array.from(this.points(true));\n            return points;\n        });\n    }\n    get boxIDs() {\n        return this.#getComputed('boxIDs', () => {\n            const surroundingIDs = new Set(); // Allows to get a unique list without indexOf.\n            const roiMap = this.map;\n            const data = roiMap.data;\n            // We check the first line and the last line.\n            for (const row of [0, this.height - 1]) {\n                for (let column = 0; column < this.width; column++) {\n                    const target = this.#computeIndex(row, column);\n                    if (column - this.origin.column > 0 &&\n                        data[target] === this.id &&\n                        data[target - 1] !== this.id) {\n                        const value = data[target - 1];\n                        surroundingIDs.add(value);\n                    }\n                    if (roiMap.width - column - this.origin.column > 1 &&\n                        data[target] === this.id &&\n                        data[target + 1] !== this.id) {\n                        const value = data[target + 1];\n                        surroundingIDs.add(value);\n                    }\n                }\n            }\n            // We check the first column and the last column.\n            for (const column of [0, this.width - 1]) {\n                for (let row = 0; row < this.height; row++) {\n                    const target = this.#computeIndex(row, column);\n                    if (row - this.origin.row > 0 &&\n                        data[target] === this.id &&\n                        data[target - roiMap.width] !== this.id) {\n                        const value = data[target - roiMap.width];\n                        surroundingIDs.add(value);\n                    }\n                    if (roiMap.height - row - this.origin.row > 1 &&\n                        data[target] === this.id &&\n                        data[target + roiMap.width] !== this.id) {\n                        const value = data[target + roiMap.width];\n                        surroundingIDs.add(value);\n                    }\n                }\n            }\n            return Array.from(surroundingIDs); // The selection takes the whole rectangle.\n        });\n    }\n    /**\n     * Computes the diameter of a circle of equal projection area (EQPC).\n     * It is a diameter of a circle that has the same surface as the ROI.\n     * @returns `eqpc` value in pixels.\n     */\n    get eqpc() {\n        return 2 * Math.sqrt(this.surface / Math.PI);\n    }\n    /**\n     * Computes ellipse of ROI. It is the smallest ellipse that fits the ROI.\n     * @returns Ellipse\n     */\n    get ellipse() {\n        return this.#getComputed('ellipse', () => {\n            return getEllipse(this);\n        });\n    }\n    /**\n     * Number of holes in the ROI and their total surface.\n     * Used to calculate fillRatio.\n     * @returns The surface of holes in ROI in pixels.\n     */\n    get holesInfo() {\n        return this.#getComputed('holesInfo', () => {\n            let surface = 0;\n            const data = this.map.data;\n            for (let column = 1; column < this.width - 1; column++) {\n                for (let row = 1; row < this.height - 1; row++) {\n                    const target = this.#computeIndex(row, column);\n                    if (this.internalIDs.includes(data[target]) &&\n                        data[target] !== this.id) {\n                        surface++;\n                    }\n                }\n            }\n            return {\n                number: this.internalIDs.length - 1,\n                surface,\n            };\n        });\n    }\n    /**\n     * Calculates and caches border's length and their IDs.\n     * @returns Borders' length and their IDs.\n     */\n    get borders() {\n        return this.#getComputed('borders', () => {\n            const roiMap = this.map;\n            const data = roiMap.data;\n            const surroudingIDs = new Set();\n            const surroundingBorders = new Map();\n            const visitedData = new Set();\n            const dx = [1, 0, -1, 0];\n            const dy = [0, 1, 0, -1];\n            for (let column = this.origin.column; column <= this.origin.column + this.width; column++) {\n                for (let row = this.origin.row; row <= this.origin.row + this.height; row++) {\n                    const target = column + row * roiMap.width;\n                    if (data[target] === this.id) {\n                        for (let dir = 0; dir < 4; dir++) {\n                            const newX = column + dx[dir];\n                            const newY = row + dy[dir];\n                            if (newX >= 0 &&\n                                newY >= 0 &&\n                                newX < roiMap.width &&\n                                newY < roiMap.height) {\n                                const neighbour = newX + newY * roiMap.width;\n                                if (data[neighbour] !== this.id &&\n                                    !visitedData.has(neighbour)) {\n                                    visitedData.add(neighbour);\n                                    surroudingIDs.add(data[neighbour]);\n                                    let surroundingBorder = surroundingBorders.get(data[neighbour]);\n                                    if (!surroundingBorder) {\n                                        surroundingBorders.set(data[neighbour], 1);\n                                    }\n                                    else {\n                                        surroundingBorders.set(data[neighbour], ++surroundingBorder);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            const id = Array.from(surroudingIDs);\n            return id.map((id) => {\n                return {\n                    connectedID: id,\n                    length: surroundingBorders.get(id),\n                };\n            });\n        });\n    }\n    /**\n     * Computes fill ratio of the ROI. It is calculated by dividing ROI's actual surface over the surface combined with holes, to see how holes affect its surface.\n     * @returns Fill ratio value.\n     */\n    get fillRatio() {\n        return this.surface / (this.surface + this.holesInfo.surface);\n    }\n    /**\n     * Computes sphericity of the ROI.\n     * Sphericity is a measure of the degree to which a particle approximates the shape of a sphere, and is independent of its size. The value is always between 0 and 1. The less spheric the ROI is the smaller is the number.\n     * @returns Sphericity value.\n     */\n    get sphericity() {\n        return (2 * Math.sqrt(this.surface * Math.PI)) / this.perimeter;\n    }\n    /**\n     * Computes the surface of the ROI, including the surface of the holes.\n     * @returns Surface including holes measured in pixels.\n     */\n    get filledSurface() {\n        return this.surface + this.holesInfo.surface;\n    }\n    /**\n     * The solidity describes the extent to which a shape is convex or concave.\n     * The solidity of a completely convex shape is 1, the farther the it deviates from 1, the greater the extent of concavity in the shape of the ROI.\n     * @returns Solidity value.\n     */\n    get solidity() {\n        return this.surface / this.convexHull.surface;\n    }\n    //TODO Should be refactored to not need creating a new Mask.\n    /**\n     *Computes convex hull. It is the smallest convex set that contains it.\n     * @see https://en.wikipedia.org/wiki/Convex_hull\n     * @returns Convex hull.\n     */\n    get convexHull() {\n        return this.#getComputed('convexHull', () => {\n            return getConvexHull(this.getMask());\n        });\n    }\n    /**\n     * Computes the minimum bounding rectangle.\n     * In digital image processing, the bounding box is merely the coordinates of the rectangular border that fully encloses a digital image when it is placed over a page, a canvas, a screen or other similar bidimensional background.\n     * @returns The minimum bounding rectangle.\n     */\n    get mbr() {\n        return this.#getComputed('mbr', () => {\n            return getMbr(this.getMask());\n        });\n    }\n    /*\n    * Computes roundness of ROI.\n    * Roundness is the measure of how closely the shape of an object approaches that of a mathematically perfect circle.\n   (See slide 24 https://static.horiba.com/fileadmin/Horiba/Products/Scientific/Particle_Characterization/Webinars/Slides/TE011.pdf) */\n    get roundness() {\n        return (4 * this.surface) / (Math.PI * this.feret.maxDiameter.length ** 2);\n    }\n    /**\n     * This is not a diameter in its actual sense but the common basis of a group of diameters derived from the distance of two tangents to the contour of the particle in a well-defined orientation.\n     * In simpler words, the method corresponds to the measurement by a slide gauge (slide gauge principle).\n     * In general it is defined as the distance between two parallel tangents of the particle at an arbitrary angle. The minimum Feret diameter is often used as the diameter equivalent to a sieve analysis.\n     * @returns The maximum and minimum Feret Diameters.\n     */\n    get feret() {\n        return this.#getComputed('feret', () => {\n            return getFeret(this.getMask());\n        });\n    }\n    /**\n     * A JSON object with all the data about ROI.\n     * @returns All current ROI properties as one object.\n     */\n    toJSON() {\n        return {\n            id: this.id,\n            origin: this.origin,\n            height: this.height,\n            width: this.width,\n            surface: this.surface,\n            eqpc: this.eqpc,\n            ped: this.ped,\n            feret: this.feret,\n            fillRatio: this.fillRatio,\n            sphericity: this.sphericity,\n            roundness: this.roundness,\n            solidity: this.solidity,\n            perimeter: this.perimeter,\n            convexHull: this.convexHull,\n            mbr: this.mbr,\n            filledSurface: this.filledSurface,\n            centroid: this.centroid,\n        };\n    }\n    /**\n     * Computes a center of mass of the current ROI.\n     * @returns point\n     */\n    get centroid() {\n        return this.#getComputed('centroid', () => {\n            const roiMap = this.map;\n            const data = roiMap.data;\n            let sumColumn = 0;\n            let sumRow = 0;\n            for (let column = 0; column < this.width; column++) {\n                for (let row = 0; row < this.height; row++) {\n                    const target = this.#computeIndex(row, column);\n                    if (data[target] === this.id) {\n                        sumColumn += column;\n                        sumRow += row;\n                    }\n                }\n            }\n            return {\n                column: sumColumn / this.surface + this.origin.column,\n                row: sumRow / this.surface + this.origin.row,\n            };\n        });\n    }\n    //  A helper function to cache already calculated properties.\n    #getComputed(property, callback) {\n        if (this.#computed[property] === undefined) {\n            const result = callback();\n            this.#computed[property] = result;\n            return result;\n        }\n        return this.#computed[property];\n    }\n    //TODO Make this private.\n    /**\n     * Calculates the correct index on the map of ROI.\n     * @param y - Map row\n     * @param x - Map column\n     * @returns Index within the ROI map.\n     */\n    #computeIndex(y, x) {\n        const roiMap = this.map;\n        return (y + this.origin.row) * roiMap.width + x + this.origin.column;\n    }\n    /**\n     * Generator function to calculate point's coordinates.\n     * @param absolute - controls whether coordinates should be relative to ROI's point of `origin` (relative), or relative to ROI's position on the Image/Mask (absolute).\n     * @yields Coordinates of each point of ROI.\n     */\n    *points(absolute) {\n        for (let row = 0; row < this.height; row++) {\n            for (let column = 0; column < this.width; column++) {\n                const target = (row + this.origin.row) * this.map.width +\n                    column +\n                    this.origin.column;\n                if (this.map.data[target] === this.id) {\n                    if (absolute) {\n                        yield {\n                            column: this.origin.column + column,\n                            row: this.origin.row + row,\n                        };\n                    }\n                    else {\n                        yield { column, row };\n                    }\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=Roi.js.map","import { Roi } from './Roi.js';\n/**\n * Generate an array of ROIs based on an ROI map manager.\n * @param roiMapManager - Roi map manager to use.\n */\nexport function computeRois(roiMapManager) {\n    const map = roiMapManager.getMap();\n    const whites = new Array(map.nbPositive);\n    const blacks = new Array(map.nbNegative);\n    for (let i = 0; i < map.nbPositive; i++) {\n        whites[i] = {\n            minRow: map.height,\n            minColumn: map.width,\n            maxRow: -1,\n            maxColumn: -1,\n            surface: 0,\n            id: i + 1,\n        };\n    }\n    for (let i = 0; i < map.nbNegative; i++) {\n        blacks[i] = {\n            borderLengths: [],\n            borderIDs: [],\n            minRow: map.height,\n            minColumn: map.width,\n            maxRow: -1,\n            maxColumn: -1,\n            surface: 0,\n            id: -i - 1,\n        };\n    }\n    for (let row = 0; row < map.height; row++) {\n        for (let column = 0; column < map.width; column++) {\n            const currentIndex = roiMapManager.getMapValue(column, row);\n            if (currentIndex === 0) {\n                continue;\n            }\n            let currentRoi;\n            if (currentIndex < 0) {\n                currentRoi = blacks[-currentIndex - 1];\n            }\n            else {\n                currentRoi = whites[currentIndex - 1];\n            }\n            currentRoi.surface++;\n            if (row < currentRoi.minRow) {\n                currentRoi.minRow = row;\n            }\n            if (row > currentRoi.maxRow) {\n                currentRoi.maxRow = row;\n            }\n            if (column < currentRoi.minColumn) {\n                currentRoi.minColumn = column;\n            }\n            if (column > currentRoi.maxColumn) {\n                currentRoi.maxColumn = column;\n            }\n        }\n    }\n    roiMapManager.whiteRois = new Array(map.nbPositive);\n    roiMapManager.blackRois = new Array(map.nbNegative);\n    for (let i = 0; i < map.nbNegative; i++) {\n        const width = blacks[i].maxColumn - blacks[i].minColumn + 1;\n        const height = blacks[i].maxRow - blacks[i].minRow + 1;\n        const origin = { row: blacks[i].minRow, column: blacks[i].minColumn };\n        const id = blacks[i].id;\n        const surface = blacks[i].surface;\n        const blackRoi = new Roi(map, id, width, height, origin, surface);\n        roiMapManager.blackRois[i] = blackRoi;\n    }\n    for (let i = 0; i < map.nbPositive; i++) {\n        const width = whites[i].maxColumn - whites[i].minColumn + 1;\n        const height = whites[i].maxRow - whites[i].minRow + 1;\n        const origin = { row: whites[i].minRow, column: whites[i].minColumn };\n        const id = whites[i].id;\n        const surface = whites[i].surface;\n        const whiteRoi = new Roi(map, id, width, height, origin, surface);\n        roiMapManager.whiteRois[i] = whiteRoi;\n    }\n}\n//# sourceMappingURL=computeRois.js.map","import { match } from 'ts-pattern';\nimport { computeRois } from './computeRois.js';\nexport const RoiKind = {\n    BLACK: 'black',\n    WHITE: 'white',\n    BW: 'bw',\n};\n/**\n * Return an array of ROIs matching the options.\n * @param roiMapManager - The ROI map manager containing the ROIs.\n * @param options - Get ROIs options.\n * @returns The array of ROIs.\n */\nexport function getRois(roiMapManager, options = {}) {\n    const { minSurface = 0, maxSurface = Number.MAX_SAFE_INTEGER, kind = 'white', } = options;\n    if (roiMapManager.blackRois.length === 0 &&\n        roiMapManager.whiteRois.length === 0) {\n        computeRois(roiMapManager);\n    }\n    const rois = match(kind)\n        .with('black', () => roiMapManager.blackRois)\n        .with('white', () => roiMapManager.whiteRois)\n        .with('bw', () => [...roiMapManager.whiteRois, ...roiMapManager.blackRois])\n        .exhaustive();\n    return rois.filter((roi) => roi.surface >= minSurface && roi.surface <= maxSurface);\n}\n//# sourceMappingURL=getRois.js.map","import { Matrix } from 'ml-matrix';\nimport { fromMask } from './fromMask.js';\nimport { getRois } from './getRois.js';\nexport class RoiMapManager {\n    map;\n    whiteRois;\n    blackRois;\n    constructor(map) {\n        this.map = map;\n        this.whiteRois = [];\n        this.blackRois = [];\n    }\n    /**\n     * Return the ROI map of the RoiMapManager.\n     * @returns - The ROI map.\n     */\n    getMap() {\n        return this.map;\n    }\n    /**\n     * Return the value at the given coordinates in an ROI map.\n     * @param column - Column of the value.\n     * @param row - Row of the value.\n     * @returns The value at the given coordinates.\n     */\n    getMapValue(column, row) {\n        return this.map.data[this.map.width * row + column];\n    }\n    /**\n     * Returns the ROI map as a correct width and height matrix.\n     * @returns The ROI map matrix.\n     */\n    getMapMatrix() {\n        return Matrix.from1DArray(this.map.height, this.map.width, this.map.data).to2DArray();\n    }\n    getRois(options = {}) {\n        return getRois(this, options);\n    }\n    getRoiById(roiID) {\n        const rois = this.getRois({ kind: 'bw' });\n        const foundRoi = rois.find((roi) => roi.id === roiID);\n        if (!foundRoi) {\n            throw new Error(`invalid ID: ${roiID}`);\n        }\n        return foundRoi;\n    }\n    static fromMask(mask, options = {}) {\n        return fromMask(mask, options);\n    }\n}\n//# sourceMappingURL=RoiMapManager.js.map","import { assert } from '../utils/validators/assert.js';\nimport { RoiMapManager } from './RoiMapManager.js';\n/**\n * Extract the ROIs of an image.\n * @param mask - Mask to extract the ROIs from.\n * @param options - From mask options.\n * @returns The corresponding ROI manager.\n */\nexport function fromMask(mask, options = {}) {\n    const { allowCorners = false } = options;\n    const MAX_TODO_ARRAY_FILTER = 65535; // 65535 should be enough for most of the cases\n    const MAX_POSITIVE_ID = 2 ** 31 - 1;\n    const MAX_NEGATIVE_ID = -(2 ** 31 - 1);\n    // based on a binary image we will create plenty of small images\n    const data = new Int32Array(mask.size); // maxValue: maxPositiveId, minValue: maxNegativeId\n    // split will always return an array of images\n    let positiveId = 0;\n    let negativeId = 0;\n    const columnToProcess = new Uint16Array(MAX_TODO_ARRAY_FILTER + 1);\n    const rowToProcess = new Uint16Array(MAX_TODO_ARRAY_FILTER + 1);\n    for (let column = 0; column < mask.width; column++) {\n        for (let row = 0; row < mask.height; row++) {\n            if (data[row * mask.width + column] === 0) {\n                // need to process the whole surface\n                analyseSurface(column, row);\n            }\n        }\n    }\n    // x column\n    // y row\n    function analyseSurface(column, row) {\n        let from = 0;\n        let to = 0;\n        const targetState = mask.getBit(column, row);\n        const id = targetState ? ++positiveId : --negativeId;\n        assert(positiveId <= MAX_POSITIVE_ID && negativeId >= MAX_NEGATIVE_ID, 'too many regions of interest');\n        columnToProcess[0] = column;\n        rowToProcess[0] = row;\n        while (from <= to) {\n            const currentColumn = columnToProcess[from & MAX_TODO_ARRAY_FILTER];\n            const currentRow = rowToProcess[from & MAX_TODO_ARRAY_FILTER];\n            data[currentRow * mask.width + currentColumn] = id;\n            // need to check all around mask pixel\n            if (currentColumn > 0 &&\n                data[currentRow * mask.width + currentColumn - 1] === 0 &&\n                mask.getBit(currentColumn - 1, currentRow) === targetState) {\n                // LEFT\n                to++;\n                columnToProcess[to & MAX_TODO_ARRAY_FILTER] = currentColumn - 1;\n                rowToProcess[to & MAX_TODO_ARRAY_FILTER] = currentRow;\n                data[currentRow * mask.width + currentColumn - 1] = MAX_NEGATIVE_ID;\n            }\n            if (currentRow > 0 &&\n                data[(currentRow - 1) * mask.width + currentColumn] === 0 &&\n                mask.getBit(currentColumn, currentRow - 1) === targetState) {\n                // TOP\n                to++;\n                columnToProcess[to & MAX_TODO_ARRAY_FILTER] = currentColumn;\n                rowToProcess[to & MAX_TODO_ARRAY_FILTER] = currentRow - 1;\n                data[(currentRow - 1) * mask.width + currentColumn] = MAX_NEGATIVE_ID;\n            }\n            if (currentColumn < mask.width - 1 &&\n                data[currentRow * mask.width + currentColumn + 1] === 0 &&\n                mask.getBit(currentColumn + 1, currentRow) === targetState) {\n                // RIGHT\n                to++;\n                columnToProcess[to & MAX_TODO_ARRAY_FILTER] = currentColumn + 1;\n                rowToProcess[to & MAX_TODO_ARRAY_FILTER] = currentRow;\n                data[currentRow * mask.width + currentColumn + 1] = MAX_NEGATIVE_ID;\n            }\n            if (currentRow < mask.height - 1 &&\n                data[(currentRow + 1) * mask.width + currentColumn] === 0 &&\n                mask.getBit(currentColumn, currentRow + 1) === targetState) {\n                // BOTTOM\n                to++;\n                columnToProcess[to & MAX_TODO_ARRAY_FILTER] = currentColumn;\n                rowToProcess[to & MAX_TODO_ARRAY_FILTER] = currentRow + 1;\n                data[(currentRow + 1) * mask.width + currentColumn] = MAX_NEGATIVE_ID;\n            }\n            if (allowCorners) {\n                if (currentColumn > 0 &&\n                    currentRow > 0 &&\n                    data[(currentRow - 1) * mask.width + currentColumn - 1] === 0 &&\n                    mask.getBit(currentColumn - 1, currentRow - 1) === targetState) {\n                    // TOP LEFT\n                    to++;\n                    columnToProcess[to & MAX_TODO_ARRAY_FILTER] = currentColumn - 1;\n                    rowToProcess[to & MAX_TODO_ARRAY_FILTER] = currentRow - 1;\n                    data[(currentRow - 1) * mask.width + currentColumn - 1] =\n                        MAX_NEGATIVE_ID;\n                }\n                if (currentColumn < mask.width - 1 &&\n                    currentRow > 0 &&\n                    data[(currentRow - 1) * mask.width + currentColumn + 1] === 0 &&\n                    mask.getBit(currentColumn + 1, currentRow - 1) === targetState) {\n                    // TOP RIGHT\n                    to++;\n                    columnToProcess[to & MAX_TODO_ARRAY_FILTER] = currentColumn + 1;\n                    rowToProcess[to & MAX_TODO_ARRAY_FILTER] = currentRow - 1;\n                    data[(currentRow - 1) * mask.width + currentColumn + 1] =\n                        MAX_NEGATIVE_ID;\n                }\n                if (currentColumn > 0 &&\n                    currentRow < mask.height - 1 &&\n                    data[(currentRow + 1) * mask.width + currentColumn - 1] === 0 &&\n                    mask.getBit(currentColumn - 1, currentRow + 1) === targetState) {\n                    // BOTTOM LEFT\n                    to++;\n                    columnToProcess[to & MAX_TODO_ARRAY_FILTER] = currentColumn - 1;\n                    rowToProcess[to & MAX_TODO_ARRAY_FILTER] = currentRow + 1;\n                    data[(currentRow + 1) * mask.width + currentColumn - 1] =\n                        MAX_NEGATIVE_ID;\n                }\n                if (currentColumn < mask.width - 1 &&\n                    currentRow < mask.height - 1 &&\n                    data[(currentRow + 1) * mask.width + currentColumn + 1] === 0 &&\n                    mask.getBit(currentColumn + 1, currentRow + 1) === targetState) {\n                    // BOTTOM RIGHT\n                    to++;\n                    columnToProcess[to & MAX_TODO_ARRAY_FILTER] = currentColumn + 1;\n                    rowToProcess[to & MAX_TODO_ARRAY_FILTER] = currentRow + 1;\n                    data[(currentRow + 1) * mask.width + currentColumn + 1] =\n                        MAX_NEGATIVE_ID;\n                }\n            }\n            from++;\n            assert(to - from <= MAX_TODO_ARRAY_FILTER, 'fromMask can not finish, the array to manage internal data is not big enough.' +\n                'You could improve mask by changing MAX_ARRAY');\n        }\n    }\n    return new RoiMapManager({\n        width: mask.width,\n        height: mask.height,\n        data,\n        nbNegative: Math.abs(negativeId),\n        nbPositive: positiveId,\n    });\n}\n//# sourceMappingURL=fromMask.js.map","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PriorityQueue = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\nvar AbstractPriorityQueue, ArrayStrategy, BHeapStrategy, BinaryHeapStrategy, PriorityQueue,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nAbstractPriorityQueue = _dereq_('./PriorityQueue/AbstractPriorityQueue');\n\nArrayStrategy = _dereq_('./PriorityQueue/ArrayStrategy');\n\nBinaryHeapStrategy = _dereq_('./PriorityQueue/BinaryHeapStrategy');\n\nBHeapStrategy = _dereq_('./PriorityQueue/BHeapStrategy');\n\nPriorityQueue = (function(superClass) {\n  extend(PriorityQueue, superClass);\n\n  function PriorityQueue(options) {\n    options || (options = {});\n    options.strategy || (options.strategy = BinaryHeapStrategy);\n    options.comparator || (options.comparator = function(a, b) {\n      return (a || 0) - (b || 0);\n    });\n    PriorityQueue.__super__.constructor.call(this, options);\n  }\n\n  return PriorityQueue;\n\n})(AbstractPriorityQueue);\n\nPriorityQueue.ArrayStrategy = ArrayStrategy;\n\nPriorityQueue.BinaryHeapStrategy = BinaryHeapStrategy;\n\nPriorityQueue.BHeapStrategy = BHeapStrategy;\n\nmodule.exports = PriorityQueue;\n\n\n},{\"./PriorityQueue/AbstractPriorityQueue\":2,\"./PriorityQueue/ArrayStrategy\":3,\"./PriorityQueue/BHeapStrategy\":4,\"./PriorityQueue/BinaryHeapStrategy\":5}],2:[function(_dereq_,module,exports){\nvar AbstractPriorityQueue;\n\nmodule.exports = AbstractPriorityQueue = (function() {\n  function AbstractPriorityQueue(options) {\n    var ref;\n    if ((options != null ? options.strategy : void 0) == null) {\n      throw 'Must pass options.strategy, a strategy';\n    }\n    if ((options != null ? options.comparator : void 0) == null) {\n      throw 'Must pass options.comparator, a comparator';\n    }\n    this.priv = new options.strategy(options);\n    this.length = (options != null ? (ref = options.initialValues) != null ? ref.length : void 0 : void 0) || 0;\n  }\n\n  AbstractPriorityQueue.prototype.queue = function(value) {\n    this.length++;\n    this.priv.queue(value);\n    return void 0;\n  };\n\n  AbstractPriorityQueue.prototype.dequeue = function(value) {\n    if (!this.length) {\n      throw 'Empty queue';\n    }\n    this.length--;\n    return this.priv.dequeue();\n  };\n\n  AbstractPriorityQueue.prototype.peek = function(value) {\n    if (!this.length) {\n      throw 'Empty queue';\n    }\n    return this.priv.peek();\n  };\n\n  AbstractPriorityQueue.prototype.clear = function() {\n    this.length = 0;\n    return this.priv.clear();\n  };\n\n  return AbstractPriorityQueue;\n\n})();\n\n\n},{}],3:[function(_dereq_,module,exports){\nvar ArrayStrategy, binarySearchForIndexReversed;\n\nbinarySearchForIndexReversed = function(array, value, comparator) {\n  var high, low, mid;\n  low = 0;\n  high = array.length;\n  while (low < high) {\n    mid = (low + high) >>> 1;\n    if (comparator(array[mid], value) >= 0) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n};\n\nmodule.exports = ArrayStrategy = (function() {\n  function ArrayStrategy(options) {\n    var ref;\n    this.options = options;\n    this.comparator = this.options.comparator;\n    this.data = ((ref = this.options.initialValues) != null ? ref.slice(0) : void 0) || [];\n    this.data.sort(this.comparator).reverse();\n  }\n\n  ArrayStrategy.prototype.queue = function(value) {\n    var pos;\n    pos = binarySearchForIndexReversed(this.data, value, this.comparator);\n    this.data.splice(pos, 0, value);\n    return void 0;\n  };\n\n  ArrayStrategy.prototype.dequeue = function() {\n    return this.data.pop();\n  };\n\n  ArrayStrategy.prototype.peek = function() {\n    return this.data[this.data.length - 1];\n  };\n\n  ArrayStrategy.prototype.clear = function() {\n    this.data.length = 0;\n    return void 0;\n  };\n\n  return ArrayStrategy;\n\n})();\n\n\n},{}],4:[function(_dereq_,module,exports){\nvar BHeapStrategy;\n\nmodule.exports = BHeapStrategy = (function() {\n  function BHeapStrategy(options) {\n    var arr, i, j, k, len, ref, ref1, shift, value;\n    this.comparator = (options != null ? options.comparator : void 0) || function(a, b) {\n      return a - b;\n    };\n    this.pageSize = (options != null ? options.pageSize : void 0) || 512;\n    this.length = 0;\n    shift = 0;\n    while ((1 << shift) < this.pageSize) {\n      shift += 1;\n    }\n    if (1 << shift !== this.pageSize) {\n      throw 'pageSize must be a power of two';\n    }\n    this._shift = shift;\n    this._emptyMemoryPageTemplate = arr = [];\n    for (i = j = 0, ref = this.pageSize; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n      arr.push(null);\n    }\n    this._memory = [];\n    this._mask = this.pageSize - 1;\n    if (options.initialValues) {\n      ref1 = options.initialValues;\n      for (k = 0, len = ref1.length; k < len; k++) {\n        value = ref1[k];\n        this.queue(value);\n      }\n    }\n  }\n\n  BHeapStrategy.prototype.queue = function(value) {\n    this.length += 1;\n    this._write(this.length, value);\n    this._bubbleUp(this.length, value);\n    return void 0;\n  };\n\n  BHeapStrategy.prototype.dequeue = function() {\n    var ret, val;\n    ret = this._read(1);\n    val = this._read(this.length);\n    this.length -= 1;\n    if (this.length > 0) {\n      this._write(1, val);\n      this._bubbleDown(1, val);\n    }\n    return ret;\n  };\n\n  BHeapStrategy.prototype.peek = function() {\n    return this._read(1);\n  };\n\n  BHeapStrategy.prototype.clear = function() {\n    this.length = 0;\n    this._memory.length = 0;\n    return void 0;\n  };\n\n  BHeapStrategy.prototype._write = function(index, value) {\n    var page;\n    page = index >> this._shift;\n    while (page >= this._memory.length) {\n      this._memory.push(this._emptyMemoryPageTemplate.slice(0));\n    }\n    return this._memory[page][index & this._mask] = value;\n  };\n\n  BHeapStrategy.prototype._read = function(index) {\n    return this._memory[index >> this._shift][index & this._mask];\n  };\n\n  BHeapStrategy.prototype._bubbleUp = function(index, value) {\n    var compare, indexInPage, parentIndex, parentValue;\n    compare = this.comparator;\n    while (index > 1) {\n      indexInPage = index & this._mask;\n      if (index < this.pageSize || indexInPage > 3) {\n        parentIndex = (index & ~this._mask) | (indexInPage >> 1);\n      } else if (indexInPage < 2) {\n        parentIndex = (index - this.pageSize) >> this._shift;\n        parentIndex += parentIndex & ~(this._mask >> 1);\n        parentIndex |= this.pageSize >> 1;\n      } else {\n        parentIndex = index - 2;\n      }\n      parentValue = this._read(parentIndex);\n      if (compare(parentValue, value) < 0) {\n        break;\n      }\n      this._write(parentIndex, value);\n      this._write(index, parentValue);\n      index = parentIndex;\n    }\n    return void 0;\n  };\n\n  BHeapStrategy.prototype._bubbleDown = function(index, value) {\n    var childIndex1, childIndex2, childValue1, childValue2, compare;\n    compare = this.comparator;\n    while (index < this.length) {\n      if (index > this._mask && !(index & (this._mask - 1))) {\n        childIndex1 = childIndex2 = index + 2;\n      } else if (index & (this.pageSize >> 1)) {\n        childIndex1 = (index & ~this._mask) >> 1;\n        childIndex1 |= index & (this._mask >> 1);\n        childIndex1 = (childIndex1 + 1) << this._shift;\n        childIndex2 = childIndex1 + 1;\n      } else {\n        childIndex1 = index + (index & this._mask);\n        childIndex2 = childIndex1 + 1;\n      }\n      if (childIndex1 !== childIndex2 && childIndex2 <= this.length) {\n        childValue1 = this._read(childIndex1);\n        childValue2 = this._read(childIndex2);\n        if (compare(childValue1, value) < 0 && compare(childValue1, childValue2) <= 0) {\n          this._write(childIndex1, value);\n          this._write(index, childValue1);\n          index = childIndex1;\n        } else if (compare(childValue2, value) < 0) {\n          this._write(childIndex2, value);\n          this._write(index, childValue2);\n          index = childIndex2;\n        } else {\n          break;\n        }\n      } else if (childIndex1 <= this.length) {\n        childValue1 = this._read(childIndex1);\n        if (compare(childValue1, value) < 0) {\n          this._write(childIndex1, value);\n          this._write(index, childValue1);\n          index = childIndex1;\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    return void 0;\n  };\n\n  return BHeapStrategy;\n\n})();\n\n\n},{}],5:[function(_dereq_,module,exports){\nvar BinaryHeapStrategy;\n\nmodule.exports = BinaryHeapStrategy = (function() {\n  function BinaryHeapStrategy(options) {\n    var ref;\n    this.comparator = (options != null ? options.comparator : void 0) || function(a, b) {\n      return a - b;\n    };\n    this.length = 0;\n    this.data = ((ref = options.initialValues) != null ? ref.slice(0) : void 0) || [];\n    this._heapify();\n  }\n\n  BinaryHeapStrategy.prototype._heapify = function() {\n    var i, j, ref;\n    if (this.data.length > 0) {\n      for (i = j = 1, ref = this.data.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {\n        this._bubbleUp(i);\n      }\n    }\n    return void 0;\n  };\n\n  BinaryHeapStrategy.prototype.queue = function(value) {\n    this.data.push(value);\n    this._bubbleUp(this.data.length - 1);\n    return void 0;\n  };\n\n  BinaryHeapStrategy.prototype.dequeue = function() {\n    var last, ret;\n    ret = this.data[0];\n    last = this.data.pop();\n    if (this.data.length > 0) {\n      this.data[0] = last;\n      this._bubbleDown(0);\n    }\n    return ret;\n  };\n\n  BinaryHeapStrategy.prototype.peek = function() {\n    return this.data[0];\n  };\n\n  BinaryHeapStrategy.prototype.clear = function() {\n    this.length = 0;\n    this.data.length = 0;\n    return void 0;\n  };\n\n  BinaryHeapStrategy.prototype._bubbleUp = function(pos) {\n    var parent, x;\n    while (pos > 0) {\n      parent = (pos - 1) >>> 1;\n      if (this.comparator(this.data[pos], this.data[parent]) < 0) {\n        x = this.data[parent];\n        this.data[parent] = this.data[pos];\n        this.data[pos] = x;\n        pos = parent;\n      } else {\n        break;\n      }\n    }\n    return void 0;\n  };\n\n  BinaryHeapStrategy.prototype._bubbleDown = function(pos) {\n    var last, left, minIndex, right, x;\n    last = this.data.length - 1;\n    while (true) {\n      left = (pos << 1) + 1;\n      right = left + 1;\n      minIndex = pos;\n      if (left <= last && this.comparator(this.data[left], this.data[minIndex]) < 0) {\n        minIndex = left;\n      }\n      if (right <= last && this.comparator(this.data[right], this.data[minIndex]) < 0) {\n        minIndex = right;\n      }\n      if (minIndex !== pos) {\n        x = this.data[minIndex];\n        this.data[minIndex] = this.data[pos];\n        this.data[pos] = x;\n        pos = minIndex;\n      } else {\n        break;\n      }\n    }\n    return void 0;\n  };\n\n  return BinaryHeapStrategy;\n\n})();\n\n\n},{}]},{},[1])(1)\n});","import PriorityQueue from 'js-priority-queue';\nimport { getExtrema } from '../compute/index.js';\nimport checkProcessable from '../utils/validators/checkProcessable.js';\nimport { RoiMapManager } from './RoiMapManager.js';\n/**\n * This method allows to create a ROIMap using the water shed algorithm. By default this algorithm\n * will fill the holes and therefore the lowest value of the image (black zones).\n * If no points are given, the function will look for all the minimal points.\n * If no mask is given the algorithm will completely fill the image.\n * Please take care about the value that has be in the mask ! In order to be coherent with the expected mask,\n * meaning that if it is a dark zone, the mask will be dark the normal behavior to fill a zone\n * is that the mask pixel is clear (value of 0) !\n * If you are looking for 'maxima' the image must be inverted before applying the algorithm\n * @param image - Image that the filter will be applied to.\n * @param options - WaterShedOptions\n * @returns RoiMapManager\n */\nexport function waterShed(image, options) {\n    let { points } = options;\n    const { mask, threshold = 1 } = options;\n    const currentImage = image;\n    checkProcessable(image, {\n        bitDepth: [8, 16],\n        components: 1,\n    });\n    const fillMaxValue = threshold * image.maxValue;\n    // WaterShed is done from points in the image. We can either specify those points in options,\n    // or it is gonna take the minimum locals of the image by default.\n    if (!points) {\n        points = getExtrema(image, {\n            kind: 'minimum',\n            mask,\n        });\n    }\n    const maskExpectedValue = 0;\n    const data = new Int32Array(currentImage.size);\n    const width = currentImage.width;\n    const height = currentImage.height;\n    const toProcess = new PriorityQueue({\n        comparator: (a, b) => a.intensity - b.intensity,\n        strategy: PriorityQueue.BinaryHeapStrategy,\n    });\n    for (let i = 0; i < points.length; i++) {\n        const index = points[i].column + points[i].row * width;\n        data[index] = -i - 1;\n        const intensity = currentImage.getValueByIndex(index, 0);\n        if (intensity <= fillMaxValue) {\n            toProcess.queue({\n                column: points[i].column,\n                row: points[i].row,\n                intensity,\n            });\n        }\n    }\n    const dxs = [1, 0, -1, 0, 1, 1, -1, -1];\n    const dys = [0, 1, 0, -1, 1, -1, 1, -1];\n    // Then we iterate through each points\n    while (toProcess.length > 0) {\n        const currentPoint = toProcess.dequeue();\n        const currentValueIndex = currentPoint.column + currentPoint.row * width;\n        for (let dir = 0; dir < 4; dir++) {\n            const newX = currentPoint.column + dxs[dir];\n            const newY = currentPoint.row + dys[dir];\n            if (newX >= 0 && newY >= 0 && newX < width && newY < height) {\n                const currentNeighbourIndex = newX + newY * width;\n                if (!mask ||\n                    mask.getBitByIndex(currentNeighbourIndex) === maskExpectedValue) {\n                    const intensity = currentImage.getValueByIndex(currentNeighbourIndex, 0);\n                    if (intensity <= fillMaxValue && data[currentNeighbourIndex] === 0) {\n                        data[currentNeighbourIndex] = data[currentValueIndex];\n                        toProcess.queue({\n                            column: currentPoint.column + dxs[dir],\n                            row: currentPoint.row + dys[dir],\n                            intensity,\n                        });\n                    }\n                }\n            }\n        }\n    }\n    const nbNegative = points.length;\n    const nbPositive = 0;\n    return new RoiMapManager({\n        data,\n        nbPositive,\n        nbNegative,\n        width: image.width,\n        height: image.height,\n    });\n}\n//# sourceMappingURL=waterShed.js.map","import { format } from '../../utils/validators/checkProcessable.js';\n/**\n * This method checks if a process can be applied on the stack.\n * @param stack - Stack to verify.\n * @param options - Check processable options.\n */\nexport function checkProcessable(stack, options = {}) {\n    const { sameDimensions = false, alpha } = options;\n    let { bitDepth } = options;\n    if (sameDimensions) {\n        const width = stack.getImage(0).width;\n        const height = stack.getImage(0).height;\n        for (let i = 1; i < stack.size; i++) {\n            const currentImage = stack.getImage(i);\n            if (currentImage.width !== width || currentImage.height !== height) {\n                throw new RangeError(`images must all have same dimensions to apply this algorithm`);\n            }\n        }\n    }\n    if (alpha !== undefined && alpha !== stack.alpha) {\n        throw new RangeError(`stack images ${alpha ? 'should' : 'should not'} have an alpha channel to apply this algorithm`);\n    }\n    if (bitDepth) {\n        if (!Array.isArray(bitDepth)) {\n            bitDepth = [bitDepth];\n        }\n        if (!bitDepth.includes(stack.bitDepth)) {\n            throw new RangeError(`image bitDepth must be ${format(bitDepth)} to apply this algorithm`);\n        }\n    }\n}\n//# sourceMappingURL=checkProcessable.js.map","import { checkProcessable } from '../utils/checkProcessable.js';\n/**\n * Get the sum of all the histograms of the stack's images. If no channel is specified in the options, the images must be GREY.\n * @param stack - Stack to process.\n * @param options - Histogram options.\n * @returns The histogram of the stack.\n */\nexport function histogram(stack, options) {\n    checkProcessable(stack, { bitDepth: [8, 16] });\n    const { slots = 2 ** stack.bitDepth, channel = 0 } = options;\n    const result = new Uint32Array(slots);\n    for (let i = 0; i < stack.size; i++) {\n        const image = stack.getImage(i);\n        const histogram = image.histogram({ channel, slots });\n        for (const [index, value] of histogram.entries()) {\n            result[index] += value;\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=histogram.js.map","import { Image } from '../../Image.js';\nimport { checkProcessable } from '../utils/checkProcessable.js';\n/**\n *  Returns a new image with the maximum values of each pixel from the stack.\n * @param stack - Stack to process.\n * @returns The maximum image.\n */\nexport function maxImage(stack) {\n    checkProcessable(stack, { sameDimensions: true });\n    const newImage = Image.createFrom(stack.getImage(0));\n    const nbChannels = newImage.channels;\n    for (let i = 0; i < stack.size; i++) {\n        for (let j = 0; j < newImage.size; j++) {\n            for (let channel = 0; channel < nbChannels; channel++) {\n                newImage.setValueByIndex(j, channel, Math.max(newImage.getValueByIndex(j, channel), stack.getValueByIndex(i, j, channel)));\n            }\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=maxImage.js.map","import { Image } from '../../Image.js';\nimport { checkProcessable } from '../utils/checkProcessable.js';\n/**\n *  Returns a new image with the average values of each pixel of the images of the stack.\n * @param stack - Stack to process.\n * @returns The mean image.\n */\nexport function meanImage(stack) {\n    checkProcessable(stack, { sameDimensions: true, bitDepth: [8, 16] });\n    const image = stack.getImage(0);\n    const dataSize = image.size * stack.channels;\n    const sum = new Uint32Array(dataSize).fill(0);\n    for (let i = 0; i < stack.size; i++) {\n        for (let j = 0; j < image.size; j++) {\n            for (let channel = 0; channel < stack.channels; channel++) {\n                sum[j * stack.channels + channel] += stack.getValueByIndex(i, j, channel);\n            }\n        }\n    }\n    const meanImage = Image.createFrom(image);\n    for (let i = 0; i < image.size; i++) {\n        for (let channel = 0; channel < stack.channels; channel++) {\n            const index = i * stack.channels + channel;\n            meanImage.setValueByIndex(i, channel, sum[index] / stack.size);\n        }\n    }\n    return meanImage;\n}\n//# sourceMappingURL=meanImage.js.map","// @ts-expect-error: median-quisckselect has no types\nimport quickMedian from 'median-quickselect';\nimport { Image } from '../../Image.js';\nimport { checkProcessable } from '../utils/checkProcessable.js';\n/**\n *  Returns a new image with the median values of each pixel of the images of the stack.\n * @param stack - Stack to process.\n * @returns The median image.\n */\nexport function medianImage(stack) {\n    checkProcessable(stack, { sameDimensions: true, bitDepth: [8, 16] });\n    const image = stack.getImage(0);\n    const result = Image.createFrom(image);\n    for (let j = 0; j < image.size; j++) {\n        for (let channel = 0; channel < stack.channels; channel++) {\n            const currentValues = new Array(stack.size);\n            for (let i = 0; i < stack.size; i++) {\n                currentValues[i] = stack.getValueByIndex(i, j, channel);\n            }\n            result.setValueByIndex(j, channel, quickMedian(currentValues));\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=medianImage.js.map","import { decodeApng } from 'fast-png';\nimport { Image } from \"../../Image.js\";\nimport { Stack } from \"../../Stack.js\";\n/**\n * Decodes APNG image into a Stack\n * @param data - APNG data.\n * @returns stack of frames.\n */\nexport function decodeStackFromApng(data) {\n    const decodedApng = decodeApng(data);\n    const images = [];\n    let colorModel;\n    switch (decodedApng.channels) {\n        case 1:\n            if (decodedApng.palette) {\n                colorModel = decodedApng.palette[0].length === 3 ? 'RGB' : 'RGBA';\n            }\n            else {\n                colorModel = 'GREY';\n            }\n            break;\n        case 2:\n            colorModel = 'GREYA';\n            break;\n        case 3:\n            colorModel = 'RGB';\n            break;\n        default:\n            colorModel = 'RGBA';\n            break;\n    }\n    if (decodedApng.palette) {\n        for (const image of decodedApng.frames) {\n            images.push(new Image(decodedApng.width, decodedApng.height, {\n                data: convertIndexedData(image.data, decodedApng.palette),\n                colorModel,\n            }));\n        }\n    }\n    else {\n        for (const image of decodedApng.frames) {\n            images.push(new Image(decodedApng.width, decodedApng.height, {\n                data: image.data,\n                colorModel,\n            }));\n        }\n    }\n    const stack = new Stack(images);\n    return stack;\n}\nfunction convertIndexedData(data, palette) {\n    const result = new Uint8Array(data.length * palette[0].length);\n    for (let i = 0; i < data.length; i++) {\n        for (let channel = 0; channel < palette[0].length; channel++) {\n            result[i * palette[0].length + channel] = palette[data[i]][channel];\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=decodeApng.js.map","import { decode } from 'tiff';\nimport { Stack } from '../../Stack.js';\nimport { getImageFromIFD } from '../../load/decodeTiff.js';\n/**\n * Decode a TIFF and create a stack of images.\n * @param buffer - The data to decode.\n * @returns The stack of images.\n */\nexport function decodeStackFromTiff(buffer) {\n    const decoded = decode(buffer);\n    const images = [];\n    for (const IFD of decoded) {\n        images.push(getImageFromIFD(IFD));\n    }\n    return new Stack(images);\n}\n//# sourceMappingURL=decodeTiff.js.map","import imageType from 'image-type';\nimport { match } from 'ts-pattern';\nimport { decodeStackFromApng } from \"./decodeApng.js\";\nimport { decodeStackFromTiff } from './decodeTiff.js';\n/**\n * Decode input data and create stack. Data format is automatically detected.\n * Possible formats: tiff.\n * @param data - Data to decode.\n * @returns The decoded image.\n */\nexport function decodeStack(data) {\n    const typedArray = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    const type = imageType(typedArray);\n    return match(type)\n        .with({ mime: 'image/tiff' }, () => decodeStackFromTiff(typedArray))\n        .with({ mime: 'image/png' }, () => decodeStackFromApng(typedArray))\n        .otherwise(() => {\n        throw new RangeError(`invalid data format: ${type?.mime}`);\n    });\n}\n//# sourceMappingURL=decodeStack.js.map","import { Image } from '../../Image.js';\nimport { checkProcessable } from '../utils/checkProcessable.js';\n/**\n *  Returns a new image with the minimum values of each pixel from the stack.\n * @param stack - Stack to process.\n * @returns The minimum image.\n */\nexport function minImage(stack) {\n    checkProcessable(stack, { sameDimensions: true });\n    const newImage = Image.createFrom(stack.getImage(0));\n    newImage.fill(newImage.maxValue);\n    const nbChannels = newImage.channels;\n    for (let i = 0; i < stack.size; i++) {\n        for (let j = 0; j < newImage.size; j++) {\n            for (let channel = 0; channel < nbChannels; channel++) {\n                newImage.setValueByIndex(j, channel, Math.min(newImage.getValueByIndex(j, channel), stack.getValueByIndex(i, j, channel)));\n            }\n        }\n    }\n    return newImage;\n}\n//# sourceMappingURL=minImage.js.map","import { Image } from '../../Image.js';\nimport { checkProcessable } from '../utils/checkProcessable.js';\n/**\n *  Returns a new 16 bits depth image with the sum of each pixel of the images of the stack.\n * @param stack - Stack to process.\n * @returns The sum image.\n */\nexport function sum(stack) {\n    checkProcessable(stack, { sameDimensions: true, bitDepth: 8 });\n    // Because 255*257 = 2**16 - 1\n    if (stack.size > 257) {\n        throw new Error('Maximal valid stack size is 257');\n    }\n    const image = stack.getImage(0);\n    const dataSize = image.size * stack.channels;\n    const sum = new Uint16Array(dataSize).fill(0);\n    for (let i = 0; i < stack.size; i++) {\n        for (let j = 0; j < image.size; j++) {\n            for (let channel = 0; channel < stack.channels; channel++) {\n                sum[j * stack.channels + channel] += stack.getValueByIndex(i, j, channel);\n            }\n        }\n    }\n    return new Image(image.width, image.height, {\n        data: sum,\n        colorModel: stack.colorModel,\n        bitDepth: 16,\n    });\n}\n//# sourceMappingURL=sum.js.map","/**\n * Verify all images of array have the same bit depth and color model.\n * @param images - Images to process\n */\nexport function checkImagesValid(images) {\n    const colorModel = images[0].colorModel;\n    const bitDepth = images[0].bitDepth;\n    for (const image of images) {\n        if (image.colorModel !== colorModel || image.bitDepth !== bitDepth) {\n            throw new RangeError(`images must all have the same bit depth and color model`);\n        }\n    }\n}\n/**\n * Checks if all the images of an array are the same dimensions.\n * @param images - Images array.\n * @returns `true` if all images have the same dimensions.\n */\nexport function verifySameDimensions(images) {\n    const width = images[0].width;\n    const height = images[0].height;\n    for (const image of images) {\n        if (image.width !== width || image.height !== height) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=checkImagesValid.js.map","import { histogram, maxImage, meanImage, medianImage, minImage, sum, } from './stack/index.js';\nimport { checkImagesValid, verifySameDimensions, } from './stack/utils/checkImagesValid.js';\nexport class Stack {\n    /**\n     * The array of images.\n     */\n    images;\n    /**\n     * The stack size.\n     */\n    size;\n    /**\n     * Do the images have an alpha channel?\n     */\n    alpha;\n    /**\n     * The color model of the images.\n     */\n    colorModel;\n    /**\n     * The bit depth of the images.\n     */\n    bitDepth;\n    /**\n     * Whether all the images of the stack have the same dimensions.\n     */\n    sameDimensions;\n    /**\n     * The number of channels of the images.\n     */\n    channels;\n    /**\n     * Create a new stack from an array of images.\n     * The images must have the same bit depth and color model.\n     * @param images - Array of images from which to create the stack.\n     */\n    constructor(images) {\n        checkImagesValid(images);\n        this.images = images;\n        this.size = images.length;\n        this.alpha = images[0].alpha;\n        this.colorModel = images[0].colorModel;\n        this.channels = images[0].channels;\n        this.bitDepth = images[0].bitDepth;\n        this.sameDimensions = verifySameDimensions(images);\n    }\n    *[Symbol.iterator]() {\n        for (const image of this.images) {\n            yield image;\n        }\n    }\n    /**\n     * Clone a stack. The images are a copy of the original images.\n     * @returns A new stack with the same images.\n     */\n    clone() {\n        return new Stack(this.images.map((image) => image.clone()));\n    }\n    /**\n     * Get the images of the stack. Mainly for debugging purposes.\n     * @returns The images.\n     */\n    getImages() {\n        return this.images;\n    }\n    /**\n     * Get the image at the given index.\n     * @param index - The index of the image.\n     * @returns The image.\n     */\n    getImage(index) {\n        return this.images[index];\n    }\n    /**\n     * Get a value from an image of the stack.\n     * @param stackIndex - Index of the image in the stack.\n     * @param row - Row index of the pixel.\n     * @param column - Column index of the pixel.\n     * @param channel - The channel to retrieve.\n     * @returns The value at the given position.\n     */\n    getValue(stackIndex, row, column, channel) {\n        return this.images[stackIndex].getValue(row, column, channel);\n    }\n    /**\n     * Get a value from an image of the stack. Specify the pixel position using its index.\n     * @param stackIndex - Index of the image in the stack.\n     * @param index - The index of the pixel.\n     * @param channel - The channel to retrieve.\n     * @returns The value at the given position.\n     */\n    getValueByIndex(stackIndex, index, channel) {\n        return this.images[stackIndex].getValueByIndex(index, channel);\n    }\n    /**\n     * Return the image containing the minimum values of all the images in the stack for\n     * each pixel. All the images must have the same dimensions.\n     * @returns The minimum image.\n     */\n    minImage() {\n        return minImage(this);\n    }\n    /**\n     * Return the image containing the maximum values of all the images in the stack for\n     * each pixel. All the images must have the same dimensions.\n     * @returns The maximum image.\n     */\n    maxImage() {\n        return maxImage(this);\n    }\n    /**\n     * Return the image containing the median values of all the images in the stack for\n     * each pixel. All the images must have the same dimensions.\n     * @returns The median image.\n     */\n    medianImage() {\n        return medianImage(this);\n    }\n    /**\n     * Return the image containing the average values of all the images in the stack for\n     * each pixel. All the images must have the same dimensions.\n     * @returns The mean image.\n     */\n    meanImage() {\n        return meanImage(this);\n    }\n    /**\n     * Return a 16 bits depth image containing the sum values of all the images in the stack for\n     * each pixel.\n     * @returns The sum image.\n     */\n    sum() {\n        return sum(this);\n    }\n    /**\n     * Get the sum of all the histograms of the stack's images. If no channel is specified in the options, the images must be GREY.\n     * @param options - Histogram options.\n     * @returns The histogram of the stack.\n     */\n    histogram(options = {}) {\n        return histogram(this, options);\n    }\n    /**\n     * Align all the images of the stack on the image at the given index.\n     * @param refIndex - The index of the reference image.\n     */\n    // public alignImages(refIndex: number): Stack {}\n    /**\n     * Map a function on all the images of the stack.\n     * @param callback - Function to apply on each image.\n     * @returns New stack with the modified images.\n     */\n    map(callback) {\n        return new Stack(this.images.map(callback));\n    }\n    /**\n     * Filter the images in the stack.\n     * @param callback - Function to decide which images to keep.\n     * @returns New filtered stack.\n     */\n    filter(callback) {\n        return new Stack(this.images.filter(callback));\n    }\n}\n//# sourceMappingURL=Stack.js.map","export const channelLabels = {\n    GREY: ['Grey'],\n    GREYA: ['Grey', 'Alpha'],\n    RGB: ['Red', 'Green', 'Blue'],\n    RGBA: ['Red', 'Green', 'Blue', 'Alpha'],\n    BINARY: ['Mask'],\n};\n//# sourceMappingURL=channelLabels.js.map"],"names":["toString","Object","prototype","isAnyArray","value","tag","call","endsWith","includes","max","input","options","arguments","length","undefined","TypeError","_options$fromIndex","fromIndex","_options$toIndex","toIndex","Number","isInteger","Error","maxValue","i","min","minValue","rescale","output","Array","currentMin","currentMax","RangeError","_options$min","autoMinMax","_options$max","factor","defineProperty","matrix","require$$0","require$$1","indent","repeat","indentData","inspectMatrix","inspectMatrixWithOptions","maxRows","maxColumns","maxNumSize","padMinus","constructor","name","inspectData","rows","columns","maxI","Math","maxJ","result","loop","j","get","line","push","formatNumber","join","num","formatNumber2","padEnd","len","str","fix","toFixed","startsWith","exp","toExponential","slice","installMathOperations","AbstractMatrix","Matrix","add","addS","addM","set","checkMatrix","newMatrix","sub","subS","subM","subtract","subtractS","subtractM","mul","mulS","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","acos","acosh","asin","asinh","atan","atanh","cbrt","ceil","clz32","cos","cosh","expm1","floor","fround","log","log1p","log10","log2","round","sign","sin","sinh","sqrt","tan","tanh","trunc","pow","arg0","powS","powM","checkRowIndex","index","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkRowIndices","rowIndices","checkColumnIndices","columnIndices","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","array","checkNonEmpty","isEmpty","sumByRow","sum","sumByColumn","sumAll","v","productByRow","productByColumn","productAll","varianceByRow","unbiased","mean","cols","variance","sum1","sum2","x","varianceByColumn","varianceAll","size","centerByRow","centerByColumn","centerAll","getScaleByRow","scale","scaleByRow","getScaleByColumn","scaleByColumn","getScaleAll","divider","scaleAll","from1DArray","newRows","newColumns","newData","row","column","rowVector","columnVector","zeros","ones","fill","rand","random","randInt","interval","eye","diag","data","l","matrix1","matrix2","isMatrix","klass","apply","callback","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isDistance","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","reducedEchelonForm","m","n","maxRow","p","pivot","setSubMatrix","neg","getRow","getRowVector","setRow","row1","row2","temp","getColumn","getColumnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","by","NaN","NEGATIVE_INFINITY","maxIndex","idx","POSITIVE_INFINITY","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","norm","type","dot","cumulativeSum","vector2","vector1","mmul","other","Bcolj","Float64Array","s","mpow","scalar","bb","e","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","m6","m7","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18","m19","m20","m21","m22","m23","c02","c12","c20","c21","c22","mmulStrassen","y","r1","c1","r2","c2","console","warn","embed","mat","r","c","resultat","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","scaleRows","isFinite","scaleColumns","flipRows","middle","first","last","flipColumns","kroneckerProduct","q","kroneckerSum","AxI","IxB","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","rowIndex","columnIndex","trace","from","to","entries","product","standardDeviation","center","Symbol","iterator","col","values","for","isArrayOfNumbers","every","element","randomInt","diagonal","identity","negate","tensorProduct","#initData","nRows","nColumns","arrayData","removeRow","splice","addRow","removeColumn","newRow","addColumn","SymmetricMatrix","diagonalSize","isSymmetricMatrix","klassType","upperRightEntries","toMatrix","removeCross","addCross","applyMask","mask","sidesToRemove","passthroughs","reverse","sideIndex","toCompact","compact","fromCompact","compactSize","JSON","stringify","upperRightValues","DistanceMatrix","isDistanceMatrix","klassSubType","sideSize","toSymmetricMatrix","compactLength","BaseView","MatrixColumnView","MatrixColumnSelectionView","MatrixFlipColumnView","MatrixFlipRowView","MatrixRowView","MatrixRowSelectionView","MatrixSelectionView","MatrixSubView","MatrixTransposeView","WrapperMatrix1D","_calculateIndex","WrapperMatrix2D","wrap","LuDecomposition","lu","pivotVector","pivotSign","t","LUcolj","kmax","LU","isSingular","solve","count","X","determinant","lowerTriangularMatrix","upperTriangularMatrix","pivotPermutationVector","hypotenuse","QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","orthogonalMatrix","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","si","nct","nrt","mrc","pp","eps","EPSILON","kase","alpha","MIN_VALUE","isNaN","ks","f","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","condition","norm2","rank","tol","ii","leftSingularVectors","diagonalMatrix","useSVD","leftHandSide","rightHandSide","d","subMatrix0","subMatrix1","subMatrix2","xrange","exception","range","dependenciesOneRow","error","thresholdValue","thresholdError","returnArray","linearDependencies","results","Abis","svd","pseudoInverse","svdSolution","covariance","xMatrix","yMatrix","yIsSame","cov","correlation","sdx","sdy","corr","EigenvalueDecomposition","assumeSymmetric","tred2","tql2","H","ort","orthes","hqr2","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","hh","dl1","c3","el1","s2","tst1","low","high","nn","exshift","z","iter","w","ra","sa","vr","vi","notlast","cdivres","cdiv","xr","xi","yr","yi","CholeskyDecomposition","dimension","positiveDefinite","L","isPositiveDefinite","B","nipals","scaleScores","maxIterations","terminationCriteria","u","diff","tOld","counter","xResidual","residual","yResidual","betas","CHO","EVD","EigenvalueDecomposition_1","Matrix_1","NIPALS","Nipals","SVD","SingularValueDecomposition_1","WrapperMatrix1D_1","_default","default","determinant_1","inverse_1","pseudoInverse_1","getCentroid","points","nbPoints","xSum","ySum","getAffineTransform","source","destination","sourceCentroid","destinationCentroid","translatedSource","translatedDestination","ratioSum","sourcePoint","destinationPoint","getDistanceToOrigin","scaledSource","covarianceMatrix","rotation","newV","angleDegrees","atan2","PI","translation","point","hypot","_ref","module","exports","window","median","quickSelectMedian","LOOP","FLOAT_MUL","sh1","sh2","sh3","multiply_uint32","nlo","nhi","XSadd","seed","Date","now","state","Uint32Array","init","getFloat","bind","getUint32","nextState","periodCertification","PROB_TOLERANCE","randomChoice","replace","probabilities","valuesArr","cumSum","getArray","randomIndex","arr","Random","seedOrRandom","xsadd","XSAdd","randomGenerator","choice","randomSample","getNbIterations","probability","outliersFraction","sampleSize","ransac","minNbInliers","getNbValues","fitFunction","distanceFunction","modelFunction","maxNbIterations","stopProbabilty","iteration","bestNbInliers","bestInliers","bestModelParameters","bestError","seeds","srcSubset","dstSubset","modelParameters","model","predictedDestination","nbInliers","inliers","distances","distance","arrayMedian","nbIterations","getDistanceMatrix","keypoints","point1","origin","point2","squaredDistance","getKeypointsInRadius","radius","squaredRadius","currentIndices","getBestKeypointsInRadius","keypointsInRadius","toIgnore","Uint8Array","keypoint","secondKeypointIndex","secondKeypoint","score","difference","p1","p2","normalize","rotate","radians","sortByColumnRow","sortedPoints","getAngle","angle","getClockwiseAngle","toDegrees","getRadius","checkBorderDistance","image","width","height","N","J","this","o","M","I","P","Z","aa","fa","ta","ia","Q","_","R","S","W","T","G","E","O","F","D","$","C","A","K","oa","circle","circleAA","cubicBezier","cubicBezierAA","cubicBezierSegment","cubicBezierSegmentAA","ellipse","ellipseRect","lineAA","lineWidth","quadBezier","quadBezierAA","quadBezierSegment","quadBezierSegmentAA","quadRationalBezier","quadRationalBezierSegment","quadRationalBezierSegmentAA","rotatedEllipse","rotatedEllipseRect","toStringTag","deleteDuplicates","finalPoints","getCirclePoints","circlePoints","firstQuarter","secondQuarter","thirdQuarter","fourthQuarter","concat","zeroPoint","getFilledCirclePoints","getLinePoints","sorted","linePoints","getCompassPoints","getIndex","channel","channels","surroundingPixels","formatter","Intl","ListFormat","checkProcessable","bitDepth","colorModel","components","isArray","format","errorMessage","map","String","getFastScore","currentIntensity","getValueByPoint","brighterSum","darkerSum","pointIntensity","getValue","SOBEL_X","SOBEL_Y","SCHARR_X","SCHARR_Y","PREWITT_X","PREWITT_Y","getHarrisScore","windowSize","harrisConstant","cropOrigin","crop","xDerivative","gradientFilter","kernelX","yDerivative","kernelY","getRawImage","xx","xy","yy","xxSum","xySum","yySum","structureTensor","eigenValues","isFastKeypoint","compassPoints","nbContiguousPixels","brighter","darker","comparisonArray","currentLength","counterArray","currentValue","nextValue","getFastKeypoints","fastRadius","scoreAlgorithm","harrisScoreOptions","maxNbFeatures","nonMaxSuppression","getScore","match","with","corner","exhaustive","allKeypoints","scoreArray","currentScore","neighbour","neighbourScore","getPatchIntensityMoment","getCoordinates","moment","relativeCirclePoints","intensity","getPatchIntensityCentroid","moment10","moment01","moment00","centroid","getOrientedFastKeypoints","centroidPatchDiameter","fastKeypoints","orientedFastKeypoints","compareIntensity","absoluteP1","absoluteP2","intensity1","intensity2","xMedian","exact","middleIndex","calcMiddle","quickSelect","medianNext","currentLow","currentHigh","swap","xCheck","minLength","xFindClosestIndex","target","currentDiff","xGetFromToIndex","xMean","sumValue","xVariance","sqrError","FFT","_csize","table","power","_width","_bitrev","revShift","_out","_data","_inv","fromComplexArray","complex","storage","res","createComplexArray","toComplexArray","completeSpectrum","spectrum","half","transform","out","_transform4","realTransform","_realTransform4","inverseTransform","step","outOff","bitrev","off","_singleTransform2","_singleTransform4","inv","quarterLen","limit","Ar","Ai","Br","Bi","Cr","Ci","Dr","Di","MAr","MAi","tableBr","tableBi","MBr","MBi","tableCr","tableCi","MCr","MCi","tableDr","tableDi","MDr","MDi","T0r","T0i","T1r","T1i","T2r","T2i","T3r","T3i","FAr","FAi","FCr","FCi","FBr","FBi","FDr","FDi","evenR","evenI","oddR","oddI","leftR","leftI","rightR","rightI","step2","step3","_singleRealTransform2","_singleRealTransform4","halfLen","hquarterLen","ST0r","ST0i","ST1r","ST1i","ST2r","ST2i","ST3r","ST3i","SFAr","SFAi","SFBr","SFBi","SA","SB","multiplyUint32","createRandomArray","distribution","generator","gaussianGenerator","GaussianGenerator","generateGaussian","val","xyCovariance","meanX","meanY","assert","message","assertUnreachable","getClamp","clamp255","clamp65535","getClampFromTo","clamp","getGaussianPoints","xSeed","ySeed","sigma","xCoordinates","getGaussianValues","yCoordinates","nbValues","rounded","extractSquareImage","patchSize","cropOffset","getKeypointPatch","radAngle","rawWidth","cropWidth","borderDistance","cropped","rotated","transformRotate","interpolationType","getBriefDescriptors","descriptorLength","smoothingOptions","pointsDistributionOptions","gaussianPoints","smoothed","gaussianBlur","descriptors","filteredKeypoints","patch","descriptor","getBrief","bestKptRadius","minScore","allSourceKeypoints","sourceKeypoints","brief","getIntensityMoment","xDistance","yDistance","getIntensityCentroid","getHammingDistance","descriptor1","descriptor2","bruteForceOneMatch","nbBestMatches","matches","sourceIndex","minDistance","destinationIndex","sortBySourceDest","match1","match2","sortByDestSource","getCrosscheckMatches","srcMatches","dstMatches","crosscheck","srcDstMatches","dstSrcMatches","sortedSrcDst","sortedDstSrc","pointer1","pointer2","validateChannels","validateChannel","validateValues","validateValue","validateForComparison","validateColor","color","newImage","getOutputImage","newIntensity","setClampedValue","computeRmse","otherImage","globalMse","computeMse","absolute","getValueByIndex","computePsnr","rmsePixel","getDefaultColor","setBlendedPixel","setPixel","Image","sourceAlpha","at","targetAlpha","newAlpha","setValue","component","sourceComponent","targetComponent","newComponent","setBlendedVisiblePixel","roundPoint","drawCircleOnImage","strokeColor","fillColor","prevRow","drawLine","drawLineOnImage","drawLineOnMask","newMask","maskToOutputMask","setVisiblePixel","drawPolylineOnImage","drawPolylineOnMask","twoProduct_1","twoProduct","SPLITTER","abig","ahi","alo","bbig","bhi","blo","err1","err2","err3","robustSum","linearExpansionSum","scalarScalar","bv","av","br","ar","ne","nf","eptr","fptr","ei","ea","fi","q0","q1","_x","_bv","_av","_br","_ar","twoSum","fastTwoSum","robustScale","scaleLinearExpansion","ts","pq","robustDiff","robustSubtract","require$$2","require$$3","NUM_EXPAND","ERRBOUND3","ERRBOUND4","orientation_3","prod","orientation3Exact","m0","orientation_4","orientation4Exact","orientation_5","orientation5Exact","orientation","fn","CACHED","orientation0","orientation1","orientation2","orientation3","det","orientation4","adx","bdx","cdx","ady","bdy","cdy","adz","bdz","cdz","bdxcdy","cdxbdy","cdxady","adxcdy","adxbdy","bdxady","permanent","slowOrient","args","proc","slow","o0","o1","o2","o3","o4","o5","getOrientation","a0","a1","a2","a3","a4","generateOrientationProc","robustPnp","robustPointInPolygon","orient","vs","inside","lim","yj","yk","x0","x1","px","y0","y1","arrayPointsToObjects","drawPolygonOnImage","otherOptions","drawPolyline","filteredPoints","arrayPoints","drawPolygonOnMask","filled","setBit","drawRectangle","rectangleWidth","rectangleHeight","currentColumn","currentRow","drawPoints","drawMarker","shape","markerSize","drawCircle","drawPolygon","drawMarkers","otherMask","getBitByIndex","setBitByIndex","checkSize","checkKernel","kernel","checkBorderType","borderType","checkInputLength","actual","expected","createArray","DirectConvolution","kernelOffset","outputSize","kernelSize","convolve","_convolutionBorder0","_convolutionBorderCut","interpolateInput","BorderType","CONSTANT","CUT","REPLICATE","REFLECT","WRAP","REFLECT_101","getBorderInterpolation","getInterpolateConstant","interpolateReplicate","interpolateReflect","interpolateReflect101","interpolateWrap","interpolateConstant","newColumn","interpolateConstantPoint","interpolateReplicatePoint","interpolateReflectPoint","interpolateWrapPoint","interpolateReflect101Point","extendBorders","horizontal","vertical","borderValue","interpolateBorder","createFrom","copyTo","newValue","integer","decimal","directConvolution","convolutedData","rawDirectConvolution","dataIndex","setValueByIndex","computeConvolutionValue","returnRawValue","separableConvolution","normalizeSeparatedKernel","doubleKernelOffsetX","kernelOffsetX","doubleKernelOffsetY","kernelOffsetY","extendedImage","rowConvolution","ConvolutionBorderType","columnConvolution","rowData","columnData","convolvedData","convolvedRow","convolvedColumn","kernelWidth","kernelHeight","kY","kX","kernelValue","sumKernelX","reduce","prev","current","sumKernelY","blur","DerivativeFilter","SOBEL","SCHARR","PREWITT","derivativeFilter","filter","kernels","ImageColorModel","GREY","GREYA","RGB","RGBA","BINARY","colorModels","increaseContrast","uniform","minMax","maxDiffIndex","previousDiff","level","inputMin","inputMax","outputMin","outputMax","getSize","getKernel","sigmaX","sigmaY","sizeX","sizeY","radiusX","radiusY","scale2X","gradientX","gradientY","gradient","convertColor","canConvert","Map","canConvertTo","newParameters","convertGreyToAny","convertRgbToRgb","convertRgbToGrey","fillAlpha","copyAlpha","maskToOutputImage","convertBinaryToGrey","img","convertBinaryToRgb","dest","black","white","setPixelByIndex","convertBitDepth","newBitDepth","convertToUint8","convertToUint16","targetImage","checkPointIsInteger","extract","resultWidth","resultHeight","imageStartRow","imageStartColumn","maskStartRow","maskStartColumn","resultRow","resultColumn","getBit","getPixel","merge","images","split","huang","histogram","firstBin","ih","lastBin","term","mu0","sumPix","numPix","mu1","minEnt","MAX_VALUE","it","ent","muX","intermodes","iHisto","bimodalTest","previous","next","tt","modes","isodata","toth","totl","li","total","sumBack","sumObj","numBack","numObj","oldThresh","newThresh","meanBack","meanObj","tolerance","maxEntropy","normHisto","P1","P2","totEnt","maxEnt","entBack","entObj","minError","Tprev","mu","sigma2","tau2","w0","w1","w2","sqterm","sumA1","sumA","sumA2","sumB1","sumB","sumB2","sumC1","sumC","sumC2","minimum","iterations","histogramCopy","auHistogram","isBimodal","peaks","moments","histogramLength","normalizedHistogram","cd","c0","z0","z1","p0","otsu","histogramCounts","wB","maximum","wF","mF","between","percentile","avec","partialSum","endIndex","renyiEntropy","threshold1","threshold2","threshold3","maxEnt1","maxEnt2","maxEnt3","alpha2","term2","alpha3","term3","entBack1","entBack2","entBack3","entObj1","entObj2","entObj3","totEnt1","totEnt2","totEnt3","tStars","omega","optThreshold","shanbhag","triangle","dmax","min2","inverted","left","right","nx","ny","splitDistance","newDistance","yen","P1Sq","P2Sq","maxCrit","crit","ThresholdAlgorithm","HUANG","INTERMODES","ISODATA","LI","MAX_ENTROPY","MEAN","MIN_ERROR","MINIMUM","MOMENTS","OTSU","PERCENTILE","RENYI_ENTROPY","SHANBHAG","TRIANGLE","YEN","computeThreshold","algorithm","slots","imageToOutputMask","luma709","red","green","blue","luma601","average","minmax","cyan","blackColor","magenta","yellow","hue","delta","saturation","lightness","GreyAlgorithm","LUMA_709","LUMA_601","MAX","MIN","AVERAGE","MINMAX","RED","GREEN","BLUE","BLACK","CYAN","MAGENTA","YELLOW","HUE","SATURATION","LIGHTNESS","algos","Set","algo","keys","greyAlgorithms","has","grey","keepAlpha","mergeAlpha","newColorModel","method","sourcePixel","cropAlpha","findLeft","top","findTop","bottom","findBottom","findRight","InterpolationType","NEAREST","BILINEAR","BICUBIC","getInterpolationFunction","interpolateNearest","interpolateBilinear","interpolateBicubic","px0","py0","px1","py1","vx0y0","vx1y0","vx0y1","vx1y1","xNorm","yNorm","vx2y0","vx3y0","v0","cubic","vx2y1","vx3y1","v1","vx0y2","vx1y2","vx2y2","vx3y2","v2","vx0y3","vx1y3","vx2y3","vx3y3","v3","transformMatrix","fullImage","isValidMatrix","corners","transformedCorners","transformPoint","maxX","maxY","minX","minY","centerX","centerY","interpolate","perspective","transformationMatrix","resize","xFactor","yFactor","checkOptions","preserveAspectRatio","newWidth","newHeight","maybeWidth","maybeHeight","sizeOpt","sizeImg","centerCoordinates","getRotationMatrix","angleRadians","getPerspectiveWarp","pts","tl","tr","bl","order4Points","widthRect","heightRect","distance2Points","x2","y2","x3","y3","x4","y4","indexMinX","minX2","indexMinX2","rotatePoint","rotationCenter","angleCos","angleSin","cropRectangle","getSmallestAngle","rotatedPoints","p3","originalWidth","originalHeight","expandedTopLeft","angleHorizontal","paintMaskOnImage","blend","checkColorIsNumberArray","paintMaskOnMask","maybeToPrecision","number","figures","toPrecision","checkArrayLength","BaseRegression2D","new","predict","inputs","isOnePoint","_predict","train","precision","toLaTeX","chi2","rmsd","xSquared","ySquared","xY","PolynomialRegression2D","order","coefficients","outputs","newInputs","_toFormula","isLaTeX","sup","closeSup","times","coefficient","load","json","powColVector","examples","nbCoefficients","scaleX1","scaleX2","scaleY","qqs","qqs1","correctBackground","background","backgroundKind","invert","gamma","getValueArray","clamped","ratio","imageChannels","flipX","currentCol","oppositeCol","flipY","oppositeRow","flip","axis","medianFilter","cellSize","cellValues","Uint16Array","halfCellSize","cellRow","cellColumn","pixelate","getCellValue","getCellValueFunction","currentCellWidth","currentCellHeight","getCellCenter","getCellMean","getCellMedian","getBorderPoints","innerBorders","allowCorners","solidFill","borders","getLineLength","getPolygonPerimeter","perimeter","getPolygonArea","area","getExtendedBorderPoints","borderPoints","monotoneChainConvexHull","byXThenY","cw","getConvexHull","surface","mcch","getFeret","hull","hullPoints","minDiameter","calliperLines","maxDiameter","aspectRatio","minWidth","minWidthAngle","minLinePoints","minLines","currentWidth","currentMinLinePoints","absWidth","findPointIndexesOfExtremeColumns","getMinLines","maxLinePoints","maxSquaredWidth","maxLineIndex","currentSquaredWidth","maxAngle","rotatedMaxPoints","findPointsIndexesOfExtremeRows","maxLines","getMaxLines","feretPoints","minLine1","minLine2","maxLine1","maxLine2","leftFirst","mbrPoint1","mbrPoint2","topFirst","getMbrAngle","mbr","topLeft","topRight","getMbrFromPoints","rotatedVertices","minSurface","minSurfaceAngle","aX","aY","bX","bY","tUndefined","tMin","tMax","maxWidth","cX","cY","minPoint","maxPoint","currentSurface","mbrRotated","sides","maxSide","minSide","mbrAngle","getMbr","vertices","erode","defaultKernel","onlyOnes","bit","Mask","erodeMaskOnlyOnes","erodeMask","erodeGreyOnlyOnes","erodeGrey","kernelRow","kernelColumn","minList","dilate","dilatMaskOnlyOnes","dilateMask","dilateGreyOnlyOnes","dilateGrey","maxList","open","close","topHat","openImage","bottomHat","morphologicalGradient","dilatedImage","erodedImage","borderIterator","MAX_ARRAY","toProcess","multipleFloodFill","startPixels","startPixelValue","newPixelValue","alreadyConsidered","pixelIndex","currentPixel","topBorder","leftBorder","rightBorder","bottomBorder","addToProcess","bottomLeft","bottomRight","pixel","clearBorder","cannyEdgeDetector","hysteresis","lowThreshold","highThreshold","gaussianBlurOptions","blurred","edges","finalImage","currentGradientX","currentGradientY","direction","getDirection","currentGradient","currentNms","currentEdge","currentPixels","hystColumn","hystRow","newPixels","floodFill","startPixel","cleared","boolToNumber","colorModelDef","expectedLength","getPixelByIndex","fromPoints","getNbNonZeroPixels","datum","checkChannel","setValueByPoint","dataString","printData","paintMask","pixelSum","channelSum","hist","bitShift","bitSlots","quickMedian","getChannel","getExtrema","kind","maxEquals","searchingMinimum","maskExpectedValue","dx","dy","currentY","currentX","nbEquals","dir","currentAroundValue","MultivariateLinearRegression","intercept","statistics","weights","xt","invxx","beta","fittedValues","residuals","ri","stdError","stdErrorMatrix","stdErrors","tStats","summary","regressionStatistics","standardError","observations","variables","label","tStat","grad","turn","rad","string","exec","substr","object","trim","parsed","rgba","isValid","brightness","isDark","isLight","toHex","toRgb","toRgbString","toHsl","toHslString","toHsv","saturate","desaturate","grayscale","lighten","darken","isEqual","forEach","indexOf","toLab","extend","labPlugin","formatReferenceForMlr","referenceColors","referenceData","formatInputForMlr","inputColors","inputData","getRegressionVariables","correctColor","measuredColors","mlrRed","MLR","mlrGreen","mlrBlue","newPixel","getMinMax","ImageCoordinates","CENTER","TOP_LEFT","TOP_RIGHT","BOTTOM_LEFT","BOTTOM_RIGHT","meta","createPixelArray","start","columnValues","channelValues","rowValues","setClampedValueByIndex","fillChannel","alphaIndex","changeEach","cb","coordinates","newDepth","otherwise","padding","padStart","copyData","thisImage","internalOptions","requirements","checkRequirements","property","prop","getColors","baseColor","nbShades","minValueFactor","colors","getKeypointColor","maxScore","colorIndex","drawKeypoints","showScore","showScoreOptions","maxNbKeypoints","keypointColor","absoluteOrigin","isOrientedFastKeypoint","showOrientation","kpt","getMatchColor","maxDistance","sortByDistance","scaleKeypoints","drawMatches","montage","destinationKeypoints","circleDiameter","showDistance","showDistanceOptions","maxNbMatches","scaledDestination","matchesSortedByDistance","matchColor","relativeDestinationPoint","destinationOrigin","MontageDisposition","HORIZONTAL","VERTICAL","Montage","sourceWidth","sourceHeight","destinationWidth","destinationHeight","disposition","scaledKeypoints","overlapImages","image1","image2","inverted1","inverted2","scaled","empty","alignedGrey1","filterEuclideanDistance","sameDestMatches","currentIndex","distanceSquared","decode","bytes","encoding","decoder","TextDecoder","encoder","TextEncoder","encode","defaultByteLength","hostBigEndian","view","buffer","typedArrays","int8","globalThis","Int8Array","uint8","int16","Int16Array","uint16","int32","Int32Array","uint32","uint64","BigUint64Array","int64","BigInt64Array","float32","Float32Array","float64","IOBuffer","byteLength","byteOffset","offset","lastWrittenByte","littleEndian","_mark","_marks","dataIsGiven","ArrayBuffer","dvOffset","isView","DataView","available","isLittleEndian","setLittleEndian","isBigEndian","setBigEndian","skip","back","seek","mark","reset","pushMark","popMark","pop","rewind","ensureAvailable","lengthNeeded","newLength","readBoolean","readUint8","readInt8","getInt8","getUint8","readByte","readBytes","readArray","BYTES_PER_ELEMENT","readInt16","getInt16","readUint16","getUint16","readInt32","getInt32","readUint32","readFloat32","getFloat32","readFloat64","getFloat64","readBigInt64","getBigInt64","readBigUint64","getBigUint64","readChar","fromCharCode","readChars","readUtf8","decodeText","writeBoolean","writeUint8","writeInt8","setInt8","_updateLastWrittenByte","setUint8","writeByte","writeBytes","writeInt16","setInt16","writeUint16","setUint16","writeInt32","setInt32","writeUint32","setUint32","writeFloat32","setFloat32","writeFloat64","setFloat64","writeBigInt64","setBigInt64","writeBigUint64","setBigUint64","writeChar","charCodeAt","writeChars","writeUtf8","toArray","getWrittenByteLength","BMPDecoder","bufferData","pixelDataOffset","bitsPerPixel","xPixelsPerMeter","yPixelsPerMeter","compression","colorMasks","formatCheck","decodePixelData","decodeBitDepth1Pixels","decodeStandardPixels","decodePixelsWithAlpha","currentNumber","bitIndex","calculatePadding","rowOffset","pixelBaseIndex","BITMAPV5HEADER","LogicalColorSpace","LCS_sRGB","Compression","GamutMappingIntent","LCS_GM_GRAPHICS","DEFAULT_PIXELS_PER_METER","BMPEncoder","encoded","writeBitmapV5Header","writeColorTable","writePixelArray","imageSize","writeBitmapFileHeader","writeBitDepth1Pixels","writeStandardPixels","writePixelsWithAlpha","byte","writePadding","imageOffset","fileSize","rowSize","totalBytes","Encoder","Decoder","encodeBmp","bmp","JPEGEncoder","quality","ffloor","YTable","UVTable","fdtbl_Y","fdtbl_UV","YDC_HT","UVDC_HT","YAC_HT","UVAC_HT","bitcode","category","outputfDCTQuant","DU","byteout","bytenew","bytepos","YDU","UDU","VDU","clt","RGB_YUV_TABLE","currentQuality","ZigZag","std_dc_luminance_nrcodes","std_dc_luminance_values","std_ac_luminance_nrcodes","std_ac_luminance_values","std_dc_chrominance_nrcodes","std_dc_chrominance_values","std_ac_chrominance_nrcodes","std_ac_chrominance_values","initQuantTables","sf","YQT","UVQT","aasf","computeHuffmanTbl","nrcodes","std_table","codevalue","pos_in_table","HT","initHuffmanTbl","initCategoryNumber","nrlower","nrupper","cat","nr","nrneg","initRGBYUVTable","writeBits","bs","posval","writeWord","fDCTQuant","fdtbl","d0","d1","d2","d3","d4","d5","d6","d7","dataOff","I8","I64","tmp0","tmp7","tmp1","tmp6","tmp2","tmp5","tmp3","tmp4","tmp10","tmp13","tmp11","tmp12","z5","z2","z4","z3","z11","z13","tmp0p2","tmp7p2","tmp1p2","tmp6p2","tmp2p2","tmp5p2","tmp3p2","tmp4p2","tmp10p2","tmp13p2","tmp11p2","tmp12p2","z1p2","z5p2","z2p2","z4p2","z3p2","z11p2","z13p2","writeAPP0","writeAPP1","exifBuffer","writeSOF0","writeDQT","writeDHT","writeCOM","comments","writeSOS","processDU","CDU","DC","HTDC","HTAC","EOB","M16zeroes","pos","I16","I63","DU_DCT","Diff","end0pos","lng","startpos","nrzeroes","nrmarker","initCharLookupTable","sfcc","getTime","setQuality","DCY","DCU","DCV","displayName","imageData","quadWidth","fillbits","Buffer","time_start","imgData","qu","JpegImage","jpegImage","dctZigZag","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","buildHuffmanTable","codeLengths","code","children","decodeScan","frame","resetInterval","spectralStart","spectralEnd","successivePrev","successive","opts","samplesPerLine","scanLines","mcusPerLine","progressive","maxH","maxV","startOffset","bitsData","bitsCount","readBit","nextByte","decodeHuffman","tree","node","receive","receiveAndExtend","decodeBaseline","zz","huffmanTableDC","pred","rs","huffmanTableAC","decodeDCFirst","decodeDCSuccessive","eobrun","decodeACFirst","successiveACState","successiveACNextValue","decodeACSuccessive","decodeMcu","mcu","mcuRow","mcuCol","blockRow","blockCol","blocks","tolerantDecoding","decodeBlock","blocksPerLine","componentsLength","decodeFn","marker","mcuExpected","blocksPerColumn","mcusPerColumn","buildComponentData","lines","quantizeAndInverse","dataOut","dataIn","qt","quantizationTable","v4","v5","v6","v7","sample","requestMemoryAllocation","scanLine","clampTo8bit","path","xhr","XMLHttpRequest","responseType","onload","response","mozResponseArrayBuffer","parse","send","maxResolutionInPixels","maxResolutionInMP","readDataBlock","subarray","prepareComponents","componentId","hasOwnProperty","blocksPerLineForMcu","blocksPerColumnForMcu","blocksToAllocate","jfif","adobe","quantizationTables","frames","huffmanTablesAC","huffmanTablesDC","fileMarker","malformedDataOffset","appData","comment","version","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesLength","quantizationTablesEnd","quantizationTableSpec","tableData","extended","componentsOrder","pixelsInFrame","exceededAmount","componentsCount","qId","quantizationIdx","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","selectorsCount","tableSpec","successiveApproximation","processed","nextOffset","cp","scaleX","getData","component1","component2","component3","component4","component1Line","component2Line","component3Line","component4Line","Cb","Ye","colorTransform","dataLength","copyToImageData","formatAsRGBA","imageDataArray","totalBytesAllocated","maxMemoryUsageBytes","increaseAmount","totalMemoryImpactBytes","resetMaxMemoryUsage","maxMemoryUsageBytes_","getBytesAllocated","jpegData","userOpts","defaultOpts","useTArray","maxMemoryUsageInMB","bytesNeeded","alloc","err","ReferenceError","jpegJs","encodeJpeg","Z_FIXED$1","Z_BINARY","Z_TEXT","Z_UNKNOWN$1","zero$1","buf","STORED_BLOCK","STATIC_TREES","DYN_TREES","MIN_MATCH$1","MAX_MATCH$1","LENGTH_CODES$1","LITERALS$1","L_CODES$1","D_CODES$1","BL_CODES$1","HEAP_SIZE$1","MAX_BITS$1","Buf_size","MAX_BL_BITS","END_BLOCK","REP_3_6","REPZ_3_10","REPZ_11_138","extra_lbits","extra_dbits","extra_blbits","bl_order","DIST_CODE_LEN","static_ltree","static_dtree","_dist_code","_length_code","base_length","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","static_l_desc","static_d_desc","static_bl_desc","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","pending_buf","pending","send_bits","bi_valid","bi_buf","send_code","bi_reverse","bi_flush","gen_bitlen","desc","stree","extra","base","bits","xbits","overflow","bl_count","heap","heap_max","opt_len","static_len","gen_codes","next_code","tr_static_init","init_block","dyn_ltree","dyn_dtree","bl_tree","sym_next","bi_windup","smaller","depth","_n2","_m2","pqdownheap","heap_len","compress_block","ltree","dtree","lc","sx","sym_buf","build_tree","scan_tree","prevlen","curlen","nextlen","max_count","min_count","send_tree","build_bl_tree","max_blindex","l_desc","d_desc","bl_desc","send_all_trees","lcodes","dcodes","blcodes","detect_data_type","block_mask","static_init_done","_tr_init$1","_tr_stored_block$1","stored_len","_tr_align$1","_tr_flush_block$1","opt_lenb","static_lenb","strm","data_type","strategy","_tr_tally$1","sym_end","_tr_init_1","_tr_stored_block_1","_tr_flush_block_1","_tr_tally_1","_tr_align_1","trees","_tr_init","_tr_stored_block","_tr_flush_block","_tr_tally","_tr_align","adler32","adler","s1","adler32_1","makeTable","crcTable","crc32","crc","end","crc32_1","messages","constants$2","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Z_BUF_ERROR","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_UNKNOWN","Z_DEFLATED","Z_NO_FLUSH$2","Z_FULL_FLUSH$1","Z_FINISH$3","Z_BLOCK$1","Z_OK$3","Z_STREAM_END$3","Z_STREAM_ERROR$2","Z_DATA_ERROR$2","Z_BUF_ERROR$1","Z_DEFAULT_COMPRESSION$1","Z_DEFAULT_STRATEGY$1","Z_DEFLATED$2","MAX_MEM_LEVEL","MAX_WBITS$1","DEF_MEM_LEVEL","LENGTH_CODES","LITERALS","L_CODES","D_CODES","BL_CODES","HEAP_SIZE","MAX_BITS","MIN_MATCH","MAX_MATCH","MIN_LOOKAHEAD","PRESET_DICT","INIT_STATE","GZIP_STATE","EXTRA_STATE","NAME_STATE","COMMENT_STATE","HCRC_STATE","BUSY_STATE","FINISH_STATE","BS_NEED_MORE","BS_BLOCK_DONE","BS_FINISH_STARTED","BS_FINISH_DONE","OS_CODE","errorCode","msg","zero","slide_hash","wsize","w_size","hash_size","head","HASH_ZLIB","hash_shift","hash_mask","HASH","flush_pending","avail_out","pending_out","next_out","total_out","flush_block_only","block_start","strstart","put_byte","putShortMSB","read_buf","avail_in","next_in","total_in","longest_match","cur_match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","_win","wmask","w_mask","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","_w_size","more","window_size","insert","ins_h","deflate_stored","flush","min_block","pending_buf_size","have","used","high_water","deflate_fast","hash_head","bflush","match_length","max_lazy_match","deflate_slow","max_insert","prev_match","match_available","deflate_rle","deflate_huff","Config","good_length","max_lazy","nice_length","max_chain","func","configuration_table","lm_init","DeflateState","status","gzhead","gzindex","last_flush","w_bits","hash_bits","lit_bufsize","deflateStateCheck","deflateResetKeep","deflateReset","ret","deflateSetHeader","deflateInit2","windowBits","memLevel","deflateInit","deflate$2","old_flush","header","level_flags","text","hcrc","time","os","beg","gzhead_extra","bstate","deflateEnd","deflateSetDictionary","dictionary","dictLength","tmpDict","avail","deflateInit_1","deflateInit2_1","deflateReset_1","deflateResetKeep_1","deflateSetHeader_1","deflate_2$1","deflateEnd_1","deflateSetDictionary_1","deflateInfo","deflate_1$2","deflate","_has","obj","key","assign","sources","flattenChunks","chunks","chunk","common","STR_APPLY_UIA_OK","__","_utf8len","string2buf","m_pos","str_len","buf_len","buf2binstring","buf2string","utf16buf","c_len","utf8border","strings","ZStream","zstream","toString$1","Z_NO_FLUSH$1","Z_FINISH$2","Z_OK$2","Z_STREAM_END$2","Z_DEFLATED$1","Deflate$1","chunkSize","opt","raw","gzip","ended","dict","_dict_set","flush_mode","_flush_mode","onData","onEnd","deflate$1","deflator","deflate_2","deflate_1$1","Deflate","BAD$1","TYPE$1","inffast","inflate_fast","_in","whave","wnext","s_window","hold","lcode","dcode","lmask","dmask","here","op","from_source","lencode","distcode","lenbits","distbits","dolen","dodist","mode","sane","MAXBITS","ENOUGH_LENS$1","ENOUGH_DISTS$1","CODES$1","LENS$1","DISTS$1","lbase","lext","dbase","dext","inflate_table","lens","lens_index","codes","table_index","sym","root","curr","drop","huff","incr","offs","here_bits","here_op","here_val","inftrees","CODES","LENS","DISTS","Z_FINISH$1","Z_OK$1","Z_STREAM_END$1","Z_NEED_DICT$1","Z_STREAM_ERROR$1","Z_DATA_ERROR$1","Z_MEM_ERROR$1","HEAD","FLAGS","TIME","OS","EXLEN","EXTRA","NAME","COMMENT","HCRC","DICTID","DICT","TYPE","TYPEDO","STORED","COPY_","COPY","TABLE","LENLENS","CODELENS","LEN_","LEN","LENEXT","DIST","DISTEXT","MATCH","LIT","CHECK","LENGTH","DONE","BAD","MEM","SYNC","ENOUGH_LENS","ENOUGH_DISTS","MAX_WBITS","DEF_WBITS","zswap32","InflateState","havedict","flags","check","wbits","ncode","nlen","ndist","lendyn","distdyn","was","inflateStateCheck","inflateResetKeep","inflateReset","inflateReset2","inflateInit2","inflateInit","virgin","lenfix","distfix","fixedtables","updatewindow","src","inflate$2","put","last_bits","last_op","last_val","hbuf","inf_leave","done","xflags","extra_len","inflateEnd","inflateGetHeader","inflateSetDictionary","dictid","inflateReset_1","inflateReset2_1","inflateResetKeep_1","inflateInit_1","inflateInit2_1","inflate_2$1","inflateEnd_1","inflateGetHeader_1","inflateSetDictionary_1","inflateInfo","inflate_1$2","inflate","GZheader","gzheader","Inflate$1","last_avail_out","next_out_utf8","tail","utf8str","inflate$1","inflator","Inflate_1$1","inflate_2","inflate_1$1","Inflate","deflate_1","Inflate_1","inflate_1","initialCrc","updateCrc","currentCrc","checkCrc","crcLength","chunkName","expectedCrc","actualCrc","writeCrc","unfilterNone","currentLine","newLine","bytesPerLine","unfilterSub","bytesPerPixel","unfilterUp","prevLine","unfilterAverage","unfilterPaeth","paethPredictor","pa","pb","pc","applyUnfilter","filterType","passLineBytes","osIsLittleEndian","decodeInterlaceAdam7","params","passes","xStep","yStep","resultData","passIndex","pass","passWidth","passHeight","outputX","outputY","uint16Data","swap16","decodeInterlaceNull","pngSignature","of","writeSignature","checkSignature","hasPngSignature","textChunkName","NULL","latin1Decoder","validateKeyword","keyword","validateLatin1","latin1Regex","test","decodetEXt","readKeyword","readLatin1","encodetEXt","ColorType","UNKNOWN","GREYSCALE","TRUECOLOUR","INDEXED_COLOUR","GREYSCALE_ALPHA","TRUECOLOUR_ALPHA","CompressionMethod","DEFLATE","FilterMethod","ADAPTIVE","InterlaceMethod","NO_INTERLACE","ADAM7","DisposeOpType","NONE","BACKGROUND","PREVIOUS","BlendOpType","SOURCE","OVER","PngDecoder","_checkCrc","_inflator","_png","_apng","_end","_hasPalette","_palette","_hasTransparency","_transparency","_compressionMethod","_filterMethod","_interlaceMethod","_colorType","_isAnimated","_numberOfFrames","_numberOfPlays","_frames","_writingDataChunks","Inflator","numberOfFrames","numberOfPlays","decodeChunk","decodeImage","decodeApng","decodeApngChunk","decodeApngImage","decodeIHDR","decodePLTE","decodeIDAT","decodetRNS","decodeiCCP","decodepHYs","pushDataToFrame","decodeACTL","decodeFCTL","decodeFDAT","checkBitDepth","colorType","sequenceNumber","xOffset","yOffset","delayNumber","delayDenominator","disposeOp","blendOp","palette","dataOffset","compressionMethod","compressedProfile","iccEmbeddedProfile","profile","ppuX","ppuY","unitSpecifier","resolution","unit","newFrame","transparency","prevFrame","disposeFrame","addFrameDataToCanvas","imageFrame","calculatePixelIndices","frameIndex","foregroundValue","lastFrame","defaultZlibOptions","PngEncoder","_zlibOptions","zlib","_checkData","interlace","encodeIHDR","encodePLTE","encodeTRNS","encodeData","encodeIEND","paletteLength","el","encodeIDAT","slotsPerLine","writeDataUint16","writeDataBytes","writeDataInterlaced","compressed","getColorType","png","checkInteger","expectedSize","returnValue","pixelSize","imageY","rawScanline","rawOffset","imageX","srcPos","decodePng","encodePng","ImageFormat","PNG","JPG","JPEG","BMP","defaultPng","encoderOptions","union","getNodeApiOrThrow","methodName","process","getBuiltinModule","fs","url","write","nodeApi","fileURLToPath","toWrite","getDataToWrite","recursive","dirname","promises","mkdir","writeFile","writeSync","mkdirSync","writeFileSync","destinationPath","extension","extname","toLowerCase","writeCanvas","canvas","resizeCanvas","dirtyX","dirtyY","dirtyWidth","dirtyHeight","ctx","getContext","putImageData","ImageData","Uint8ClampedArray","base64codes","base64codes1","base64codes2","encodeFast","output32","output8","encodeDataURL","base64","uint8encode","base64Data","getMatrixFromPoints","affineFitFunction","sourceMatrix","destinationMatrix","createAffineTransformModel","xTranslation","yTranslation","getEuclideanDistance","getSourceWithoutMargins","bestKeypointRadius","enhanceContrast","maxRansacNbIterations","debug","debugImagePath","import","sourceWithoutMargin","sourceExtremums","destinationExtremums","sourceBrief","destinationBrief","nbSourceKeypoints","nbDestinationKeypoints","sourcePoints","destinationPoints","nbRansacIterations","ransacResult","newSrcPoints","newDstPoints","inlier","inlierMatches","drawKeypointsBaseOptions","affineTransform","matrixGetAffineTransform","stats","nbMatches","alignMinDifference","xSpan","ySpan","startStep","bestDifference","bestShiftX","bestShiftY","startX","startY","endX","endY","nbPixelsToCheck","shiftX","shiftY","currentDifference","sourceValue","destinationValue","similarity","removeClosePoints","isMax","getSort","isDescending","sortDescending","sortAscending","toBytes","xpiZipFilename","oxmlContentTypes","oxmlRels","readUInt64LE","fileType","isBuffer","checkString","ext","mime","findNextZipHeaderIndex","startAt","findIndex","zipHeaderIndex","oxmlFound","sliced","idPos","docTypePos","findDocType","objectSize","stream","readableStream","Promise","resolve","reject","eval","once","PassThrough","read","minimumBytes","unshift","pipeline","pipe","imageExts","imageType","imageTypeModule","decodeBmp","decodedData","tagsById","tagsByName","guessStripByteCounts","ifd","bytesPerStrip","rowsPerStrip","samplesPerPixel","bitsPerSample","stripOffsets","applyHorizontalDifferencing8Bit","applyHorizontalDifferencing16Bit","tags","standard","exif","gps","IFD","fields","_hasMap","_map","taglist","types","readASCII","readShort","readLong","readRational","readSByte","readSShort","readSLong","readSRational","readFloat","readDouble","getByteLength","readData","currentString","char","rationals","CLEAR_CODE","EOI_CODE","TABLE_START","MIN_BIT_LENGTH","stringTable","initializeStringTable","dummyString","andTable","bitJumps","LzwDecoder","stripArray","nextData","nextBits","bytePointer","tableLength","currentBitLength","outData","initializeTable","oldCode","getNextCode","writeString","stringFromCode","isInTable","addStringToTable","outString","outArray","decompressLzw","stripData","dateTimeRegex","TiffIfd","Ifd","imageWidth","imageLength","date","dateTime","setFullYear","setHours","newSubfileType","extraSamples","associatedAlpha","alwaysArray","fillOrder","documentName","imageDescription","stripByteCounts","minSampleValue","maxSampleValue","xResolution","yResolution","planarConfiguration","resolutionUnit","predictor","sampleFormat","sMinSampleValue","sMaxSampleValue","totalColors","colorMap","tileWidth","tileHeight","tileOffsets","tileByteCounts","tiled","decompressZlib","stripUint8","inflated","defaultOptions","ignoreImageData","TIFFDecoder","_nextIFD","isMultiPage","decodeHeader","decodeIFD","unsupported","pageCount","pages","checkPages","Infinity","tiff","numEntries","decodeIFDEntry","decodeImageData","numValues","valueByteLength","currentOffset","readTileData","readStripData","applyPredictor","convertAlpha","split1BitData","bytesPerRow","rowStartByte","byteIndex","uncompress","createSampleReader","stripLength","readSamples","getDataArray","uncompressed","twidth","theight","nwidth","nheight","nind","tileData","tileBytesPerRow","ty","iy","srcStart","dstStart","bytesToCopy","tx","ix","tilePixelIndex","outputPixelIndex","alphaValue","page","decodeTIFF","getMetadata","decodeJpeg","jpeg","decodedExif","decodeExif","loadPalettePng","decodeBinary","pixels","pixelsPerByte","paletteValue","paletteChannel","totalPixels","pngData","decodeTiff","getImageFromIFD","hasAlpha","pixelLength","ptr","typedArray","readFile","readSync","readFileSync","readCanvas","getImageData","readImg","document","createElement","drawImage","fetchURL","dataUrl","fetch","arrayBuffer","hsvToRgb","hsv","rgb","rgbToNumber","getBinaryMap","nbNegative","nbPositive","whiteHue","blackHue","roiKind","getRainbowMap","hueRange","getSaturationMap","negativeStep","positiveStep","getColorMap","RoisColorMode","RAINBOW","colorRois","roiMapManager","getMap","data32","roi","getMask","getMapValue","id","getEllipse","xCenter","yCenter","xCentered","relativePoints","yCentered","centeredXVariance","centeredYVariance","centeredCovariance","sampleCovarianceMatrix","eigenvalues","vectors","radiusMajor","radiusMinor","vectorMajor","vectorMinor","majorAxisPoint1","majorAxisPoint2","minorAxisPoint1","minorAxisPoint2","majorLength","minorLength","ellipseSurface","scaleFactor","majorAxis","minorAxis","Roi","getRatio","ped","internalIDs","internal","roiMap","boxIDs","externalBorders","externalIDs","internals","border","connectedID","perimeterInfo","one","two","three","four","nbAround","info","absolutePoints","surroundingIDs","eqpc","holesInfo","surroudingIDs","surroundingBorders","visitedData","newX","newY","surroundingBorder","fillRatio","sphericity","filledSurface","solidity","convexHull","roundness","feret","sumColumn","sumRow","#getComputed","#computeIndex","computeRois","whites","blacks","borderLengths","borderIDs","currentRoi","whiteRois","blackRois","blackRoi","whiteRoi","RoiKind","WHITE","BW","getRois","maxSurface","MAX_SAFE_INTEGER","rois","RoiMapManager","getMapMatrix","getRoiById","roiID","foundRoi","find","fromMask","MAX_TODO_ARRAY_FILTER","MAX_POSITIVE_ID","MAX_NEGATIVE_ID","positiveId","negativeId","columnToProcess","rowToProcess","analyseSurface","targetState","require","_dereq_","AbstractPriorityQueue","ArrayStrategy","BHeapStrategy","BinaryHeapStrategy","PriorityQueue","child","parent","hasProp","ctor","__super__","superClass","comparator","ref","priv","initialValues","queue","dequeue","peek","clear","binarySearchForIndexReversed","mid","ref1","pageSize","_shift","_emptyMemoryPageTemplate","_memory","_mask","_write","_bubbleUp","_read","_bubbleDown","compare","indexInPage","parentIndex","parentValue","childIndex1","childIndex2","childValue1","childValue2","_heapify","waterShed","currentImage","fillMaxValue","dxs","dys","currentPoint","currentValueIndex","currentNeighbourIndex","stack","sameDimensions","getImage","maxImage","nbChannels","meanImage","dataSize","medianImage","currentValues","decodeStackFromApng","decodedApng","convertIndexedData","Stack","decodeStackFromTiff","decoded","decodeStack","minImage","checkImagesValid","verifySameDimensions","getImages","stackIndex","channelLabels"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,23,24,39,40,41,42,43,44,45,46,47,48,75,76,77,78,79,80,81,90,91,92,141,142,143,144,188,189,190,207,208,209,210,211,212,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,235,236,237,247,248,250,251,252,253,254,255,256,257,258,259,260,261,262,287]}