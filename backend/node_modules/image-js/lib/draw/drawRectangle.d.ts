import { Image } from '../Image.js';
import type { Mask } from '../Mask.js';
import type { Point } from '../utils/geometry/points.js';
export interface DrawRectangleOptions<OutType> {
    /**
     * Origin of the rectangle relative to a parent image (top-left corner).
     * @default `{row: 0, column: 0}`
     */
    origin?: Point;
    /**
     * Specify the width of the rectangle.
     * @default `image.width`
     */
    width?: number;
    /**
     * Specify the width of the rectangle.
     * @default `image.height`
     */
    height?: number;
    /**
     * Color of the rectangle's border - An array of numerical values, one for each channel of the image. If less values are defined than there are channels in the image, the remaining channels will be set to 0.
     * @default A black pixel.
     */
    strokeColor?: number[];
    /**
     * Rectangle fill color - An array of numerical values, one for each channel of the image. If less values are defined than there are channels in the image, the remaining channels will be set to 0.
     *
     */
    fillColor?: number[];
    /**
     * Image to which the resulting image has to be put.
     */
    out?: OutType;
}
export declare function drawRectangle(image: Image, options?: DrawRectangleOptions<Image>): Image;
export declare function drawRectangle(image: Mask, options?: DrawRectangleOptions<Mask>): Mask;
//# sourceMappingURL=drawRectangle.d.ts.map