import type { Roi } from './Roi.js';
import type { RoiMapManager } from './RoiMapManager.js';
export declare const RoiKind: {
    readonly BLACK: "black";
    readonly WHITE: "white";
    readonly BW: "bw";
};
export type RoiKind = (typeof RoiKind)[keyof typeof RoiKind];
export interface GetRoisOptions {
    /**
     * Minimal surface of the ROIs to keep.
     * @default `0`
     */
    minSurface?: number;
    /**
     * Maximal surface of the ROIs to keep.
     * @default `Number.MAX_SAFE_INTEGER`
     */
    maxSurface?: number;
    /**
     * Kind of ROIs to keep.
     * @default `'white'`
     */
    kind?: RoiKind;
}
/**
 * Return an array of ROIs matching the options.
 * @param roiMapManager - The ROI map manager containing the ROIs.
 * @param options - Get ROIs options.
 * @returns The array of ROIs.
 */
export declare function getRois(roiMapManager: RoiMapManager, options?: GetRoisOptions): Roi[];
//# sourceMappingURL=getRois.d.ts.map