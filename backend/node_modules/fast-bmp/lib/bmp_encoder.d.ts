import { IOBuffer } from 'iobuffer';
export interface ImageCodec {
    /**
     * Image height.
     */
    height: number;
    /**
     * Image width.
     */
    width: number;
    /**
     * Image number of channels.
     */
    channels: number;
    /**
     * Image number of channels excluding alpha.
     */
    components?: number;
    /**
     * Image bit depth.
     */
    bitsPerPixel: number;
    /**
     * Image compression type.
     */
    compression?: number;
    /**
     * Defines which bits represent which color.
     */
    colorMasks?: number[];
    /**
     * Horizontal number of pixels per meter.
     */
    xPixelsPerMeter?: number;
    /**
     * Vertical number of pixels per meter.
     */
    yPixelsPerMeter?: number;
    /**
     * Image data.
     */
    data: IOBuffer | ArrayBufferLike | ArrayBufferView | Buffer;
}
export default class BMPEncoder {
    width: number;
    height: number;
    bitsPerPixel: number;
    channels: number;
    components: number;
    data: Uint8Array;
    xPixelsPerMeter: number;
    yPixelsPerMeter: number;
    encoded: IOBuffer;
    compression: number;
    colorMasks: [number, number, number];
    constructor(data: ImageCodec);
    encode(): Uint8Array<ArrayBufferLike>;
    private writePixelArray;
    private writeBitDepth1Pixels;
    private writeStandardPixels;
    private writePixelsWithAlpha;
    private writePadding;
    private writeColorTable;
    writeBitmapFileHeader(imageOffset: number, fileSize: number): void;
    writeBitmapV5Header(): void;
}
//# sourceMappingURL=bmp_encoder.d.ts.map