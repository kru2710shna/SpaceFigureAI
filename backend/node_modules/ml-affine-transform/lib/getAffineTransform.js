"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAffineTransform = void 0;
const ml_matrix_1 = __importStar(require("ml-matrix"));
const getCentroid_1 = require("./getCentroid");
/**
 * Get best rotation and translation of source points to destination points.
 * Based on {@link https://nghiaho.com/?page_id=671}
 *
 * @param source - Source points as a 3xN matrix. Third dimension must be padded with ones.
 * @param destination - Destination points as a 3xN matrix. Third dimension must be padded with ones.
 * @returns The affine transformation.
 */
function getAffineTransform(source, destination) {
    if (source.columns !== destination.columns) {
        throw new Error('Source and destination matrices should have same dimensions (same number of points).');
    }
    if (source.columns < 2) {
        throw new Error('Matrices should contain at least two points for the algorithm to run properly.');
    }
    const sourceCentroid = (0, getCentroid_1.getCentroid)(source);
    const destinationCentroid = (0, getCentroid_1.getCentroid)(destination);
    const translatedSource = source.clone().subColumnVector(sourceCentroid);
    const translatedDestination = destination
        .clone()
        .subColumnVector(destinationCentroid);
    // computing scale
    let ratioSum = 0;
    const nbPoints = source.columns;
    for (let i = 0; i < nbPoints; i++) {
        const sourcePoint = translatedSource.getColumn(i);
        const destinationPoint = translatedDestination.getColumn(i);
        ratioSum +=
            getDistanceToOrigin(destinationPoint) / getDistanceToOrigin(sourcePoint);
    }
    const scale = ratioSum / nbPoints;
    const scaledSource = ml_matrix_1.default.mul(translatedSource, scale);
    // computing rotation
    const covarianceMatrix = scaledSource.mmul(translatedDestination.transpose());
    const svd = new ml_matrix_1.SingularValueDecomposition(covarianceMatrix);
    const U = svd.leftSingularVectors;
    const V = svd.rightSingularVectors;
    let rotation = V.mmul(U.transpose());
    if ((0, ml_matrix_1.determinant)(rotation) < 0) {
        const newV = V.mulColumn(2, -1);
        rotation = newV.mmul(U.transpose());
    }
    let angleDegrees = (Math.atan2(rotation.get(1, 0), rotation.get(0, 0)) * 180) / Math.PI;
    if (angleDegrees === -180) {
        angleDegrees = 180;
    }
    // computing translation
    const translation = ml_matrix_1.default.sub(destinationCentroid, ml_matrix_1.default.mul(rotation.mmul(sourceCentroid), scale));
    return {
        translation: {
            x: translation.get(0, 0),
            y: translation.get(1, 0),
        },
        rotation: angleDegrees,
        scale,
    };
}
exports.getAffineTransform = getAffineTransform;
function getDistanceToOrigin(point) {
    return Math.hypot(point[0], point[1]);
}
//# sourceMappingURL=getAffineTransform.js.map